{"pages":[],"posts":[{"title":"Virtuelle Cloud-\"Mining\" - Ponzi-Schemen (auch bekannt als HYPT)","text":"Im Augenblick gibt es fast jeden Tag einen neuen virtuellen Cloud-“Mining” Anbieter. Diese Anbieter versprechen, dass das eingezahlte Geld nach wenigen Tagen wieder in Form von Crypto-Währung (BTC, LTC, Doge und meist Dash) zu Verführung steht und man ab diesem Zeitpunkt ein regelmäßiges Einkommen hat. Das klingt zu schön um wahr zu sein, ist es natürlich auch nicht. Wesentliche Gemeinsamkeiten: Gratis virtuelle Hashrate (z.B. 100 GHs) Minimum Withdraw höher als man durch die Gratis-Hashrate verdienen kann Refferal-System, um dafür zu sorgen, dass in kürzester Zeit die Seite bekannt wird Anreize schaffen, damit die Benutzer das angesparte Guthaben wieder für weitere Hashrate ausgeben Keine Sicherheit, die Seite und das investierte Geld kann jederzeit weg sein. Gewinnrate ist konstant und unabhängig von externen Faktoren (Bitcoin Difficulty) Es gibt keine Stromkosten Beispielhafte Demo-RechnungReturn in Invest ist nach 100 Tagen, wenn man 10 € einzahlt, bekommt man 0,1€ jeden Tag zurück.In der Beispielseite melden sich jeden Tag 2000 neue Benutzer an, die einmalig 10€ einzahlen.In diesem einfachen Fall ist nach 100 Tagen das Gewinnmaximum erreicht und die Seite wird vom Netz genommen.Der Gewinn beträgt 1,01 Millionen €. Der Nutzer der am ersten Tag 10€ eingezahlt hat, hat gerade sein Geld wieder raus bekommen, alle anderen, die später eingestiegen sind, haben Verluste gemacht. Für den einfachen Fall, wenn sich gleich viele Nutzer pro Tag neu anmelden und einmalig einen gleichen Betrag einzahlen, dann ist das Verdienst-Optimum nach der ROI anzahl Tagen erreicht. Die erwartete Lebensdauer der Seite wird verlängert wenn viele Nutzer das Guthaben nicht abheben, sondern reinvestieren. Auflistung solcher Seitenhttps://navvi.cc 146629 User, $111608 Eingezahlt, 30 Tage online Inhaber der Seite mit http://privacyprotect.org/ verschleiert whois ROI nach 50 Tagen (bis 100$), ROI nach 20 Tagen (bis 1000$), ROI nach 10 Tagen (bis 2000 $), ROI nach 6,66 Tagen (bis 10000 $) Erwartete Seitenlebensdauer 50 - 6,66 Tage http://wizory.cc 68 232 User, 44 091$ Eingezahlt, 19 Tage Online Inhaber George Barton, San Francisco whois ROI nach 50 Tagen bis 25 Tagen (Ab 1000 $) (Stufenweise Anhebung) Erwartete Seitenlebensdauer 50-25 Tage http://asonno.com 156064 User, 68 Tage Registration Private [whois] (https://www.whois.com/whois/asonno.com) ROI etwa 85 Tage Erwartete Seitenlebensdauer 85 Tage http://ltcminer.io ROI nach 5 Tagen Erwartete Seitenlebensdauer 5 Tage WhoisGuard Protected whois https://amerty.cc/ 43558 user, 26083$, 9 Tage online ROI nach 50 bis 8.33 Tagen je nach Investition Privacy Protection whois Erwartete Seitenlebensdauer 50 - 8 Tage http://xanemine.xanemine.com/ 80007 User, 9 Tage online ROI nach 100 Tagen Erwartete Seitenlebensdauer 100 Tage whois Man sollte also auf gar keinen Fall Geld in solche Virtuellen Cloud-“Mining” Anbieter stecken.Ausnahme wäre hier, wenn man am ersten Tag einsteigt und exzessiv andere Nutzer wirbt (und somit dazu beiträgt das andere Nutzer Geld verlieren). Man bekommt nämlich dafür Anteile, wenn die geworbenen Nutzer investieren.In der Regel sind die Inhaber verborgen und die Seite kann jederzeit offline gehen… This page is synchronized from the post: ‘Virtuelle Cloud-“Mining” - Ponzi-Schemen (auch bekannt als HYPT)’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/virtuelle-cloud-mining-ponzi-schemen-auch-bekannt-als-hypt/"},{"title":"What are the advantages of Vericoin (VRC) and Verium Reserve (VRM)","text":"Both are planed to be combined into a dual blockchain system called Binary-Chain. The advantages are that the transaction times for VRC and VRM are reduced and both can be swaped into each other.VRC has an inovative Proof-of-Stake-Time (POST) proof, by which the VRC-wallet has to be actively open and set to stacking. The used algorithm eleminates the ‘nothing-at-stake’ fork attack vector. The ‘Rich rule’ problem of a Proof-of-Stake is also adressed by the nonlinear POST algorithm. VRM has a Proof-of-Work-Time (POWT) proof with dynamic block time which is resistant to GPU and Asic mining. There is also no maximum supply of coins and an inflation of 2% is aimed.Link to the Whitepaper. Roadmap (https://portal.vericoin.info/roadmap-the-future-of-vericoin/) Binary-Chain Cipher - encrypted messaging system from one wallet to another User - decentralized user name system Artis -anonymous exchange between VRC and VRM Stratum - communication layer for paying at VISA and Mastercard terminals Gemini - merging of both blockchains into one wallet Mobile apps https://pbs.twimg.com/media/DSVdKaBVwAEB_FN.jpg:largeOpen image in new tabsource of picture: https://twitter.com/VeriCoin/status/947265793389035520 I realy looking forward for 2018! This page is synchronized from the post: ‘What are the advantages of Vericoin (VRC) and Verium Reserve (VRM)’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/what-is-the-advantage-of-vericoin-vrc-and-verium-reserve-vrm/"},{"title":"A website claims to list IP adresses for all verge transactions","text":"Someone created a database to reveal all transactions:http://xvg.keff.org There is a discussion on reddit at the moment about this.https://www.reddit.com/r/vergecurrency/comments/7n9scf/somebody_created_a_database_linking_verge/ https://www.reddit.com/r/vergecurrency/comments/7nfeqq/i_was_not_going_to_post_anything_but_then_this/ There are now evidance that the site is a fake: image are take from redditlarger version of the image This page is synchronized from the post: ‘A website claims to list IP adresses for all verge transactions’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/verge-is-not-anonymous-anymore-a794ae614cece/"},{"title":"Best faucets for mobile phone (android)","text":"I tested several android-apps for easily visiting faucet sites from a mobile phone.This is the best android app https://play.google.com/store/apps/details?id=earn.cryptocoins It is really easy to visit all coinpot-faucets using this app. The login informations are saved. You need an coinpot account, which can be registered here https://coinpot.co/. If you do the moon faucet every day, you can double your earnings.I was able to withdraw 50 Dogecoin until now, as you can see in this screenshot (I converted all BTC, LTC and Dash to Doge). Here are the faucets which i am using: http://moonbit.co.in/?ref=e42ebae6eeda http://moonliteco.in/?ref=591ab17ded66 http://moondash.co.in/?ref=42023ED90AE7 http://moondoge.co.in/?ref=04d0c7b75dc7 http://bitfun.co/?ref=9135AA553699 http://bonusbitcoin.co/?ref=BB82A0920018 The faucethub faucets are to time consumping are not recommened for using with a mobile phone. ETNFaucet is also a great app for faucet. You can find the app in the play store: https://play.google.com/store/apps/details?id=com.etnFaucetApp.starter. It is possible to earn 0.2 - 0.6 ETN every 30 minutes.You need an ETN wallet adress (https://my.electroneum.com/). Minimum withdrawel is 200 ETN (Visit http://www.etnfaucet.com/ for withdrawel). This page is synchronized from the post: ‘Best faucets for mobile phone (android)’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/best-faucets-for-mobile-phone-android/"},{"title":"Protect your Windows PC against Meldown and Spectre","text":"Meltdown (CVE-2017-5754)Meltdown breaks the fundamental isolation between user applications and the operating system. Spectre (CVE-2017-5753 and CVE-2017-5715)Spectre breaks the isolation between different applications. An attacker can use both vulnerabilities for stealing passworts and sensitive data. More information can be found at https://meltdownattack.com/. How to check if your pc is vulnerableVisit the official microsoft site for more information https://support.microsoft.com/en-us/help/4073119/protect-against-speculative-execution-side-channel-vulnerabilities-in. Open powershell as adminOpen the start-menu and write powershell. Right click and select “Run as Administrator”. Click yes on the dialog for running as admin. Install the PowerShell ModuleTyp the following into the powershell.1Install-Module SpeculationControl Press two times ‘y’ for installing the module. Run the PowerShell module to validate the protections are enabledEnter the following commands (You can also copy the commands from the official microsoft site)12$SaveExecutionPolicy = Get-ExecutionPolicySet-ExecutionPolicy RemoteSigned -Scope Currentuser Press ‘y’ for changing the Execution Policy12Import-Module SpeculationControlGet-SpeculationControlSettings After this enter1Set-ExecutionPolicy $SaveExecutionPolicy -Scope Currentuser Press ‘y’ for changing the Execution Policy to the original state Your are protected against meldown and spectre when you seeing only green-colored True’s.If you have an old motherboard as i have and not getting any bios or firmware upgrade, then it will look like this:This means that i am protected against meltdown but not against spectre. You can see Spectre in action using this small program from github https://github.com/stephanvandekerkhof/cpp-spectre-meltdown-vulnerability-windows-testDownload spectre-meltdown-vulnerability-windows-test.exe and excecute it:If you see the following output (as i see on my PC)then your are vulnerable against Spectre. This program creates a variable1char *secret = &quot;MELTDOWN/SPECTRE-POC by Stephan of EHVSN&quot;; and uses Spectre to read its content. What to do, if you are not protected against Spectre (like me) Update your Browser and maybe use chrome. If you are using chrome, activate Strict site isolation by entering 1chrome://flags/#enable-site-per-process into the address bar. Activate Strict site isolation and restart chrome. If it is activated, it should now look like this: Chrome tries to prevent attacks with javascripts, as you can read here: https://sites.google.com/a/chromium.org/dev/Home/chromium-security/ssca Buy a new PC (?) as your old one will most likely not get any new BIOS upgrade. The last update for my BIOS was 2015. But lets hope and wait. Do you have also some usefull tips for windows user which are vulnerable against Spectre? Please let me know! This page is synchronized from the post: ‘Protect your Windows PC against Meldown and Spectre’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/protect-your-windows-pc-against-meldown-and-spectre/"},{"title":"How to check if your PC is already patched against meltdown and spectre","text":"I found an easy and convinient way for checking the status of your pc. Windows PCSteps: Go to https://github.com/vrdse/MeltdownSpectreReport Download or clone the repository Download link Unzip Open powershell Drap and drop MeltdownSpectreReport.ps1 into the powershell window Or go the the directory with the ps1 script and enter .\\MeltdownSpectreReport.ps1 If you have a lot of False returns, as i have, the protection is not there. Be careful. A detailed explanation how to interpret the results can be found here https://github.com/vrdse/MeltdownSpectreReport. Linux PCSteps: Go to https://github.com/speed47/spectre-meltdown-checker Download or clone (Download link) unzip master.zip, if downloaded open terminal go into directory with spectre-meltdown-checker.sh run the script as root: sudo ./spectre-meltdown-checker.shExample output (taken from github) A detailed explanation of the results can be found here: https://github.com/speed47/spectre-meltdown-checker. This page is synchronized from the post: ‘How to check if your PC is already patched against meltdown and spectre’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-check-if-your-cp-is-already-patched-against-meltdown-and-spectre/"},{"title":"savedroid ICO ist erfolgreich gestartet","text":"Der Pre-Sale des ERC20 Token von savedroid ist um 15:00 - 12.01.2018 erfolgreich gestartet. In 1:30 h sind bereits 75% des Pre-Sales Kontingentes verkauft. savedroid ist ein deutsches Fintech Unternehmen, welches als Geschäftsmodell eine App entwickelt hat mit der man spielerisch zum Geld sparen gebracht wird. In der App gibt man seine Wünsche an und kann dann Ergeignisse bestimmen (Trump twittert, 2000 Schritte gegangen,..) bei denen ein kleiner Geldbetrag auf die Seite gelegt wird. Mit dem SVD-Token soll der Sparprozess auf Krypto-Währung erweitert werden. Es ist auch eine Kreditkarte geplant, mit deren Hilfe man seine Krypto-Währung ausgeben kann. Ich finde das ganze interessant, da es im Augenblick noch keine funktionierende Kypto-Kreditkarte gibt. savedroid ist auch nicht betroffen von dem aktuellen Vorfall, bei dem die TENX Kreditkarte gesperrt wurde. Wenn ihr mich unterstützen wollt und am Kauf interessiert seid, könnt ihr ja auf mein Refferal-Link klicken: https://ico.savedroid.com/?ref=f03f058c-9fb7-4311-b1ae-ec2efa4349ed.Ansonsten ist hier der Link zum Sale: https://ico.savedroid.com/. Bilder quelle: https://ico.savedroid.com/resources/ This page is synchronized from the post: ‘savedroid ICO ist erfolgreich gestartet’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/savedroid-ico-ist-erfolgreich-gestartet/"},{"title":"How to check if your browser is vulnerable to Spectre","text":"If your browser is not hardend against the recent discovered Spectre attack (CVE-2017-5753, CVE-2017-5715), it could be possible that a visit of an infected site could steal your secrets. Here is a tool to check your browser:http://xlab.tencent.com/special/spectre/spectre_check.html There is now also a github repository for this check:https://github.com/terjanq/meltdown-spectre-javascript I checked Firefox, chrome, brave, opera, Edge and Internet explorer. Opera ( 49.0.2725.64 ) Opera ( 49.0.2725.64 (PGO)) It is realy important, to update all your browsers now! Firefox (57.0.4 )Not vulnerable chrome (63.0.3239.132)Not vulnerable Brave (0.19.134)Not vulnerable Edge ( 41.16299.15.0)Not vulnerable Internet Explorer (11.192.16299.0)Not vulnerable This page is synchronized from the post: ‘How to check if your browser is vulnerable to Spectre’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-check-if-your-browser-is-vulnerable-to-spectre/"},{"title":"How to check if your Windows PC is protected against keylogger","text":"A keylogger running in the background could record all your keystrokes and send them away if your PC is connected to the internet. There is small program AKLT (AntiKeyLoggerTester) which can be used to check the protection of your PC against keylogger. The homepage of this tool is offline, as it was written 2010, but it can be download here:http://www.snapfiles.com/get/antikeyloggertester.html You can check that AKLT.exe will most likely pass your antivirus-software:https://www.virustotal.com/de/file/fdbb91d383615b64e6abaf327d1ec5567f3289657197faacbc57ced90f975b7f/analysis/ If you are want to check if AKLT.exe is legit, you can take look at wilderssecurity: https://www.wilderssecurity.com/threads/aklt-exe-firewall-leaktester.239170/ Start AKLT.exe, most likely your antivirus will do nothing: Now press the GetKeyState and write something somewhere else (AKLT is out of focus). If AKLT is now looking like this:then your system is unproteced against keylogger. Be carefully when entering the secret key phrase into your wallet… Comodo Free FirewallI’m using Comodo Free Firewall to protect my PC. The standard setup is not sufficient. I’m using the setup from cruelsister1, which is shown here:https://www.youtube.com/watch?v=FoIu3Z2ImO8 With this setup, all unkown programms and scripts are running automatically inside a sandbox.This is shown by a green box.After pressing GetKeyState, AKLT is not able to record my key strokes: How do you protect your Windows PC against keylogger? This page is synchronized from the post: ‘How to check if your Windows PC is protected against keylogger’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-check-if-your-windows-pc-is-protected-against-keylogger/"},{"title":"Today might be a good opportunity for buying some cryptocurrencies","text":"Today a huge correction of the cryptocurrency market happens. There is a good chance that everything will go upward again, so if you believe in steem and planned to buy some, now is a good opportunity. But wait until the correction finishes… Source Everything but NEO and EOS was going down this week:Source The main reason for the correction is the reduced total market capitalization. We are now back at a level which was achieved on the 31.12.2017.Source The market correction might be triggered again by news from south korea:https://cryptovest.com/news/crypto-market-in-free-fall-on-south-korea-news/ This page is synchronized from the post: ‘Today might be a good opportunity for buying some cryptocurrencies’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/today-might-be-a-good-opportunity-for-buying-some-cryptocurrencies/"},{"title":"Maximize your curation award by not voting boosted posts","text":"Using steemstats, I noticed that voting for boosted posts means almost no curation awards in return when your voting power is much lower. In order to maximize my curation award, I decided to vote only posts which are not boosted. On a highly boosted post, I earn only 0.001 to 0.002 Steem power: When voting a high-quality post early, which was not boosted, I can earn easily 7.5 - 15 times more SP: So if I vote 10 posts which are boosted from the first second on, I will earn 0.01 - 0.02 SP curation award per day.But if I vote only posts which are not boosted from the first second on, I can earn up to 0.15 SP a day. The reason for post creators to buy vote bots and let them vote early as possible is the reason that voting within the first 30 minutes shifts most of the curation award from the voter to the author. In the same time, your curation award is strongly reduced when you vote after the vote bots with a much lower voting power. So observe your voting reward and improve your earning by: go to steemstats.com enter your steemit user name here: go to Recent Activity and select Only display posts voted on try to vote now different kind of posts compare the author payout with your voting power and vote if it is not already to high try to vote early as possible, but know that your curation award is reduced the first 30 minutes: 0 Min after creation 100 % of the curation award to the author 10 Min after creation: 66% to the author and 33% to the voter 20 Min after creation: 33% to the author and 66% to the voter 30 Min after creation: 100% of the curation award to the voter Good helper for finding posts which are not boosted: https://sydneyitguy.github.io/understeemed/ https://steemfilter.space/ There is also a vote reward calculator https://steemcalculator.github.io/, but it is not working most of the time. This page is synchronized from the post: ‘Maximize your curation award by not voting boosted posts’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/maximize-your-curation-award-by-not-voting-boosted-posts/"},{"title":"How to install steem-python for Windows","text":"I wrote this post, as it is not easy at the moment to install steem-python on Windows using Anaconda 5 with python 3.6. 1. Install Anaconda 5 with python 3.6 Go to https://www.anaconda.com/download/ and download the installer for Python 3.6 Start the installer (I normally choose that all user can use Python and change the path to C:\\Anaconda3)2. Download the wheel for scrypt-0.8.0I forked https://bitbucket.org/mhallin/py-scrypt and added Python 3.6 to appveyor.yml after line 33:Then i added my forked repository in https://www.appveyor.com/ and started the build process. As a result, you can download the wheel for scrypt: 32 Bit - https://ci.appveyor.com/api/buildjobs/k1dr2pmqf8ltt6ov/artifacts/dist%2Fscrypt-0.8.0-cp36-cp36m-win32.whl 64 Bit - https://ci.appveyor.com/api/buildjobs/9lk03sim4m3avixp/artifacts/dist%2Fscrypt-0.8.0-cp36-cp36m-win_amd64.whl3. Start the Anaconda Prompt and install steem-python Start the Anaconda Prompt ( You find it under Anaconda3) Install either the scrypt-wheel for 64Bit - Anaconda : pip install scrypt-0.8.0-cp36-cp36m-win_amd64.whl Or install the scrypt-wheel for 32 Bit - Anaconda : pip install scrypt-0.8.0-cp36-cp36m-win_amd32.whl Install ujson: conda install ujson Install steem by: pip install steem4. Using steem-python Enter python into the Anaconda Prompt window set the node with nodes=[&apos;https://api.steemit.com&apos;] import steem: from steem import Steem create a Steem object: s = Steem(nodes) read the number of created accounts: s.get_account_count()5. Uninstall steem-pythonIn order to uninstall steem, you have to perform the following steps:123pip uninstall steem voluptuous toml pylibscrypt pipfile maya pendulum pytzdata langdetect humanize funcy ecdsa diff_match_patch dateparser regex tzlocal ruamel.yaml appdirs scrypt w3lib prettytable 6. Optional - Use environment for installing steemBy creating an environment, the steem installation is kept separated and can be easily removed.Before proceeding with step 3, apply the following:1conda create --name steemenv Activate the environment every time by:1activate steemenv You can now proceed with step 3. Uninstalling can be performed by:1conda remove --name steemenv --all Please let me know if something does not work! Thanks for reading. Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘How to install steem-python for Windows’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-install-steem-python-for-windows/"},{"title":"Replacing the $ sign by ♨ for post payout and upvote selection","text":"Emoji “hotsprings” ComponentsAt the moment, the Dollar sign ($) is used for three different things. In the Wallet, the $ is used for Steem Dollars and US Dollars. The third usage is in post-payout and upvote selection for the equivalent value converted into Steem Dollars. Contrary to the wallet, there is no explanation what the $ actually means. Using a different symbol would make the following clearer: The shown post payout value is not in US-Dollar The shown post payout and upvote value can vary depending on the Reward Pool ProposalReplacing the Dollar sign ($) by by the unicode-sign for hot springs (♨) whenever the estimated sum of STEEM and SBD converted into SBD (value may change depending on the reward pool) are used. Unicode-sign for hot springs (♨): Emoji: :hotsprings: Unicode-Number: U+2668 HTML-Code: &amp;#9832; C/C++/Java source code &quot;\\u2668&quot; Python source code u&quot;\\u2668&quot; Mockups / Examples2 days ago by test(56) ♨92.16 136 votes During upvote selection:41% 0.58♨ BenefitsIt is then clear that the Post payouts and the upvote value are not in US-$ or Steem Dollars. Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Replacing the $ sign by ♨ for post payout and upvote selection’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/replacing-the-usd-sign-by-for-post-payout-and-upvote-selection/"},{"title":"Let community projects upvote your great posts that almost nobody reads!","text":"sourceDid you start with high expectations at Steemit and were very disappointed after receiving very few upvotes for your hard work? It does not feel good when your self-vote contributes most to your author payments. Luckily, there are some amazing community projects that are there to help. Requirements are unique and high-quality posts. I want to share them here: Minnow Support Project The Minnow Support Project(MSP) is a Witness created community designed to spread the values of Peace, Abundance, and Liberty, help Steemit grow, and train and retain minnows on the platform. RegistrationInformation about the registration can be found here minnowsupportproject.org/discord. Go to the discord channel for registration. After writing $register yoursteemitusername in the #register channel, you recieve a memo and you have to send 0.001 SBD/STEEM to @msp-reg with your specific memo. BenefitEvery 24h you can upvote one post. Go to the #upvote channel and write $upvote yourposturl. ObligationFollow the rules Qurator Qurator is a service that helps users who pour their blood, sweat and tears into content creation to get noticed and rewarded for their efforts. More Information Registration To apply for approval send 2SBD/STEEM to @qurator.Memo must be your name or the name of a friend that you would like to get approved.If you get approved you will receive a wallet message.If you get denied you will be refunded. BenefitDaily upvote for newly posted content. The upvote is worth from 0.11$ to 1.72$ depending on the Tier.Each day 5 posts from members will be selected and presented in the daily post. Access to post-promotion via discord. After upvoting and commenting one post from another member, one post can be published every day. Access to the voting bot @qustodian. The maximal post age is 3.5 days and every member can use the bot once a day. ObligationWrite posts without low-quality content, plagiarism, and incorrect image sourcing. Tier systemEvery user starts at tier 0. When upvoting the daily @qurator posts with at least a vote worth of 0.01$, the Tier can be improved to tier 1 (4+ upvotes a week) or tier 2 (7+ upvotes a week). Higher tiers can be achieved by delegating SP to @qurator. STEEM Engine The STEEM Engine is a Discord community dedicated to promoting engagement among its members. Visit our Discord server to apply today! STEEM Engine introduction post Registration Get started today by joining our Discord server and following the instructions in the starthere channel!For registration you have to fill out a registration form. When approved you have to resteem and upvote the latest post from @thesteemengine. ObligationUpvote all posts from @thesteemengine with 100% voting power. BenefitDaily upvote with around 0.1$ from @thesteemengine for your post after you upvoted and commented two posts from the #baggage-car_post-promotion channel. At least two upvotes and comments from other members from the post-promotion channel for your linked post. Each day, 10 posts from members are manually selected and are presented in the daily curation post. MAKE-A-WHALE @make-a-whale is a community project to create a whale that always supports its feeders. Registration To participate you need to post good original content, have a Reputation of 50+ and 500+ Steempower.All slots currently filled! As MAW grows we will open up new slots to new members.Stay tuned for more info! BenefitUpvote every 22 hours, when a new article is posted. The upvote is worth $0.88, but can be increased by paying Steem. ObligationUpvote all posts from @make-a-whale with 50000/ (Your SP) = Voting Weight Feed Your Minnows BOT Feed Your Minnows is a great project that @oleg326756 came up with where he would feed his Minnows (his awesome followers). He would make a post once a week and all the SBD earned by the post will be paid out to the registered Minnows. This inspired me to make a Feed Your Minnows of my own, with a little twist of course! RegistrationPay 2 Steem/SBD for a lifetime membership, or upvote all posts with at least 0.01$ and leave a comment with #feedme.This has to be repeated every week if you have no lifetime membership. Follow @feedyourminnows for receiving the post every week. BenefitUpvote every 24 hours, when a new article is posted. The upvote is worth $0.10. ResteemableNo registration or rules in place. Usage: 1. Navigate to any Steemit.com Article - 2. Erase “https://“ - 3. Type “re” - 4. Get an Instant Upvote &amp; Resteem@resteemable has a curation trail, which can be found here: https://streemian.com/profile/curationtrail/trailing/943 You will be asked to spend 0.5 SBD every time you use the resteemable. MinnowsUnite The #MinnowsUnite project’s goal is to maintain 100% transparency while helping minnows band together to distribute rewards to well deserving pieces written by minnows. More information Registration To register head to our Discord and type !addminnow [username].Then head back on over to Steemit.com and send 1 SBD to the account @minnowpond. BenefitUpvote of your posts from @minnowpond and its curators with random weight percentage for 1 week.After one week, 1 SBD can be paid again to recieve upvotes for another week. ObligationPay 1 SBD each week. steembasicincomeAn introduction can be found here.@steembasicincome is operated by @josephsavage. Registration Send 1 STEEM to @steembasicincome. Include the name of who you want to sponsor in the comments. You and the person you sponsor will each receive shares in the program. You can also send 1 SBD and the extra value will be treated as a donation to the program and used for promotion or powering up. BenefitUpvote of your posts and comments. ObligationA reputation above 20. Manual Curation from @kobusu and @mariachan Whe will resteem to a 4000+ followers and upvote x2 rate (0.23+$).Especial cool posts, in my opinion, get a bit more… ;) RegistrationSend 0.1 Sbd or Steem + Url of your article in memo to @kobusu . BenefitUpvote and resteem of your post. ObligationHigh-quality post without copy/past, harassment etc.. SteemdunkSteemdunk is an automatic author curation service and can be found athttps://steemdunk.xyz/ BenefitWhen activating Allow Steemdunk to upvote your content (max once per day) in https://steemdunk.xyz, posts will be upvoted with 15% voting power (0.12$). It is not guaranteed that every post is upvoted. It also possible to pay 0.200 SBD for one 100% upvote. ObligationWhen registered, all posts from @steemdunk will be automatically upvoted with 100%.It is possible to avoid this by paying 5 SBD or 10 SBD per year. thehumanbot Let me Introduce Myself. I am a bot operated by a human who is known as sanmi in steemit.Read more in the introduction post RegistrationPost your link in the comment section of the newest post from @thehumanbot. BenefitEvery day, 10 posts which follow the guidelines are manually selected and upvoted. ObligationPlease read the guidelines for being selected by @thehumanbot. SteemFollower It is not Upvote for Upvote System!in Steemfollower, only good contents Receive Upvotes. BenefitWhen you upvote at least 5 posts through Steemfollower, your last posts will be visible for one day until it receives a certain upvote amount. If you upvote more posts trough Steemfollower, your latest post will be shown longer. You can buy more visibility at the internal market. RegistrationGo to https://steemfollower.com/ and register with your steemit account. If you want, you can also register through my referral link . Security:You will Login with Steemconnect, we never store your information on server or on your browser.So, Hacking your account by this site is impossible. Do you know more community projects which supports minnows? Please write a comment. This page is synchronized from the post: ‘Let community projects upvote your great posts that almost nobody reads!’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/let-community-projects-upvote-your-great-posts-that-almost-nobody-reads/"},{"title":"Review of the Enjin digital smart wallet","text":"sourceAs the Ledger Nano S is currently not available for a reasonable price, I was searching for a good alternative wallet for storing my ERC20 token and ETH. After testing MEW and MetaMask, I finally found the Enjin wallet. After getting familiar with the wallet, I decided to send some ETH to it. It worked! As the Enjin wallet is not widely known, I decided to write a small review about it. Security The Enjin wallet has an own keyboard which appears for entering the password. This prevents leaking through third-party keyboards. The own keyboard is also used for restoring. When creating a new wallet address, the 12-word seed is not copyable. This prevents leaking through the clipboard and the seed is not temporally stored in the RAM. It is also not possible to save the seed. It is only shown on the screen. The 12-word seed is encrypted by a password which the user sets. The password field is protected against copy and paste. The wallet blocks screenshots and video recording. I verified this by using Screenshot Pro. After taking a screenshot, the recorded image is just black. The wallet claims to have Ram encryption. This is an important feature, due to Meltdown and Spectre. The Ejin company has also its own ERC20 coin. This means that security of the Enjin wallet has their highest priority. In case of a bug which leads to money lost, their coin would crash. Save against fishing sites (a problem of MEW when not using an hardware wallet) The encrypted seed is not stored in a file and cannot be accidentially uploaded into the cloud. What do I like Very good security features (the best security that I have seen on a mobile wallet) When losing my phone, restoring the wallet is easily possible. At the same time, the wallet on the phone is protected by my password until I removed all tokens. All ERC20 tokens are supported. Possible to add custom ERC20 with custom abbreviation when their contract adress is known. Advanced transaction mode, it is possible to set a Gas limit and the transaction cost (Gwei is selectable between 0.1 and 160). The value of all stored coins is shown in fiat. Free and without ads What do I not like Closed source Audit-report is not finished yet No transaction time estimation The Enjin wallet is only available for Android at the moment. It can be downloaded from the Play store or as APK from their website. A version for IOS is planned. This page is synchronized from the post: ‘Review of the Enjin digital smart wallet’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/review-of-the-enjin-digital-smart-wallet/"},{"title":"How to estimate historic steem_per_mvests values for converting old rewards from vest to steem.","text":"I tried to calculate old rewards using https://steemdata.com/. I noticed then that old steem_per_mvests values are not included in the database. As all rewards are saved in Vests, the steem_per_mvests value from the payout date must be known for calculating the amount of claimed rewards in Steem power. Small exampleReward payout for old posts is stored in vests: https://steemdb.com/deutsch/@holger80/virtuelle-cloud-mining-ponzi-schemen-auch-bekannt-als-hypt/data12345678910111213141516 { &quot;author&quot;: &quot;holger80&quot;, &quot;permlink&quot;: &quot;virtuelle-cloud-mining-ponzi-schemen-auch-bekannt-als-hypt&quot;, &quot;sbd_payout&quot;: 0.558, &quot;steem_payout&quot;: 0, &quot;vesting_payout&quot;: 167.986184, &quot;app_name&quot;: &quot;steemit&quot;, &quot;app_version&quot;: &quot;0.1&quot;, &quot;_id&quot;: &quot;18745605\\/holger80\\/virtuelle-cloud-mining-ponzi-schemen-auch-bekannt-als-hypt&quot;, &quot;_ts&quot;: { &quot;$date&quot;: { &quot;$numberLong&quot;: &quot;1515257697000&quot; } }} In order to calculate the recieved Steem Power, I need the steem_per_mvests value from the 06.01.2018 (calculated from “$numberLong”: “1515257697000”). For the example, the error is only small when instead of the correct value the newest steem_per_mvests value is used. In mosts example scripts, Converter().vests_to_sp( ) is used for this:12Converter(steemd_instance=steem).vests_to_sp(167.986184)0.08208576818168924 # recieved Steem Power But this value is only an estimation, as the steem_per_mvests value from the 27.01.2018 and not from the 06.01.2018 is used. The error for this example is only very small, but when the error would increase for older posts with high payouts. Getting old steem_per_mvests valuesAfter some research, I found out that old values can be downloaded as a JSON-file from https://steemdb.com/api/props. The oldest data that can be downloaded is from 19.01.2017. The result is plotted here:Data from https://steemdb.com/api/props are used to generate this plot.As can be seen that steem_per_mvests is changing linearly over time. Searching for old data Luckily, I found old posts, in which steem_per_mvests values as mentioned:steem_per_mvests | Date— | —129.229 | 2016-5-31196.001 | 2016-7-6229.8 | 2016-7-19236.342 | 2016-7-22275.51502255278 | 2016-8-14448.195 | 2016-11-19 I added the data to the plot:It seems that using two linear approximations can be used to estimate the complete steem_per_mvests data.There is only one change due to the 16th hard fork from December 2016, in which the yearly inflation rate was reduced to 9.5%.After applying np.polyfit(x, y, 1)on the https://steemdb.com/api/props dataset and saving the parameter to a2 and b2, I applyed np.polyfit(x, y, 1) to the older data (which is shown in the table) and saved the parameter to a and b. The result estimation function is shown here:1234567891011def est_steem_per_mvests(timeStamp): a = 2.1325476281078992e-05 b = -31099.685481490847# Parameter a2 and b2 apply after the 16th hard fork in December 2016. a2 = 2.9019227739473682e-07 b2 = 48.41432402074669 if (timeStamp &lt; (b2-b)/(a-a2)): return a * timeStamp + b else: return a2 * timeStamp + b2 12345def est_vests_to_sp(vests, timeStamp): return calcMVestSteem(timeStamp) * (vests/1e6)def est_vests_to_sp_numberlong(vests, numberLong): return calcMVestSteem(float(numberLong)/1000) * (vests/1e6) The estimated steem_per_mvests is shown in the following two plots. The root mean square error of the estimated data to the real data which are shown in the first plot is 0.0351 Steem per MVests (1e6 vests). Estimation of future steem_per_mvests valuesMy prediction of future values (not accurate as the in inflation is reduced every year):Date | steem_per_mvests— | —2019-01-01 | 497.132020-01-01 | 506.22025-01-01 | 552.12030-01-01 | 597.9 This page is synchronized from the post: ‘How to estimate historic steem_per_mvests values for converting old rewards from vest to steem.’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-estimate-historic-steempermvests-values-for-converting-old-rewards-from-vest-to-steem/"},{"title":"Every steemit user has its own filter bubble","text":"source In my first week on steemit, I was checking different tags for finding good content to read. There are posts in different languages, subcategories that are not interesting for me, a lot of spam, and a lot of repetition. When going through the long list of posts, the following thoughts are in my head: News are only news for me when reading them the first time, I already know the basics of steemit and I bookmarked all imported sites around steemit, Sorry, I can only understand German and English, At the moment, I don’t want to invest my money in new coins / ICO, I do not want to read your recipe now, Thank you, I’m able to check the price of Steem by myself, Cute cat, but too lazy to click on the post link. sourceSo, I built my personal filter bubble on steemit. I found good authors and followed them. Now, I mainly visit my feed section, when I want to read and upvote something. When an author which I’m following resteems a post of a new steemian, When participating in post-promotion in which upvotes of other posts is necessary, When I use the search function and found something good, When I read curation posts from community projects, When checking who my favorite authors are following,I widen eventually my filter bubble and add a new author to my following list. By the way, by going to https://steemit.com/@user123/feed (replace user123 with any username) the feed of any user on steemit can be viewed. Everyone has some kind of filter bubbleI want my posts are read by many steemit user. So I have to intrude into the filter bubble of steemit users. The number of my followers is an important indicator of my progress in this. My followers expecting from my post that they are unique (i cannot write every week an introduction to steemit) my opinion on matters keeps consistent its topic is somehow connected to previous posts. At the same time, I’m trying to enter the filter bubble of other steemit users. I’m trying to do this by participating in post-promotion channels embed always a meaningful image participating in community projects with daily curation post that reaches many users. I’m convinced that consistency and continuous posting of good content is the key to success. There is no shortcut, followers have to be gained starting at zero. What are your strategies for entering other users filter bubble? Or do you think that there is no filter bubble on steemit?I really like that the filter bubble is not determined by people that were in my school or university as in facebook. On steemit, I really starting from ground without knowing anyone. This page is synchronized from the post: ‘Every steemit user has its own filter bubble’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/every-steemit-user-has-its-own-filter-bubble/"},{"title":"How to estimate your author reward payout with a calculator","text":"I was really wondering about the author reward payout of my last article.I already know that 75% of the payment is the guaranteed reward for the author. So this would be 7.3125 SBD.I did then found a great website: http://steem.supply from the witness @dragosroua on which the payout can be estimated. I checked then the payment one minute before payout time:I entered my steemit-username and toggled the display from USD to SBD and Steem Power by pressing this button:.One minute later, I receivedSo the results are not 100% accurate. Lets first understand how the author reward can easily be calculated: Estimate your rewards with a calculatorWe need to know the averaged steem / USD conversion rate which is called feed price.The current feed price can get from steemd.com:The feed price for my article at payout time was:1feed_price = 5.9628 Then we need to know the pending payout value.The $-sign means SBD in this case. So my pending payout value (value with more decimal places is taken from steemd.com):1pending_payout_value = 9.7533 The next information that I need is my selected Rewards setting: Default (50% / 50%) or Power up (100%)? Default Payout in SBD Payout in SteemPower pending_payout_value * 0.375 pending_payout_value * 0.375 / feed_price 9.7533 * 0.375 SBD 9.7533 * 0.375 / 5.9628 SP 3.657 SBD 0.613 SP The factor 0.375 is the multiplication of author reward percentage and 50 % SBD/SteemPower (0.75 * 0.5) Power up Payout in SBD Payout in SteemPower pending_payout_value *0 pending_payout_value * 0.75 / feed_price 9.7533 * 0 SBD 9.7533 * 0.75 / 5.9628 SP 0 SBD 1.227 SP So I could understand the numbers which are shown from steem.supply. But, these numbers are only correct if you do not upvote your own article during posting. Estimate your rewards with a calculator when using self-upvoteWhy did I receive more? Because I upvoted my own article by selecting upvote post. By this, a certain percentage of the curation reward is transferred to the author. This information can be found on steemd.com.Take a steemit url and replace steemit by steemd. Then click on advanced and look for author_curate_reward.In my case:1author_curate_reward = 28.67 % Lets recalculate (28.67% -&gt; 0.2867): Default Payout in SBD Payout in SteemPower pending_payout_value 0.5 (0.75 + (0.25*author_curate_reward)) pending_payout_value 0.5 (0.75 + (0.25*author_curate_reward)) / feed_price 9.7533 * 0.4108 SBD 9.7533 * 0.4108 / 5.9628 SP 4.007 SBD 0.672 SP Power up Payout in SBD Payout in SteemPower pending_payout_value *0 pending_payout_value (0.75 + (0.25author_curate_reward)) / feed_price 9.7533 * 0 SBD 9.7533 * 0.82168 / 5.9628 SP 0 SBD 1.344 SP Finally, I was able to understand why I recieved more than predicted. Self-upvoteI follow the rule that I upvote my own posts (I write only 2-3 per week) but never my own comments. I normally work 1-2 hours (or more sometimes) on each single posts, so I think it is fair to reward myself with my small upvote. Do you have questions or comments? Please let me know. All images are screenshots from steemit.com, steem.supply and steemd.com. This page is synchronized from the post: ‘How to estimate your author reward payout with a calculator’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-estimate-your-author-reward-payout-with-a-calculator/"},{"title":"Zero-sum game or buying votes","text":"Unfortunately or luckily, I have to try new things. So, I bought votes for my last Posts.My idea was, that I could increase the curation rewards for my readers and also my author rewards. A win-win situation.After one day, there are almost no visitors on my posts. Can I push the posts by buying votes? source The advertising seems quite tempting: you are getting 250 - 300% more than you pay. Here is a small list of sites: https://www.minnowbooster.net/ https://smartsteem.com/ https://steembottracker.com/#free I read also about @grumpycat’s 3.5 max post-age campaign and decided to use only bots that fulfill this.So, I bought some SBD and paid bots to vote for my post. Has it paid off? Some mathLet’s assume that we use Default (50/50) Reward and Upvote our own posts.We pay the bots with SBD and calculate also the SBD payout.The author_curate_reward increases the payout for the author due to self-vote.pending_payout_vote is the recieved vote value due to the bought vote. feed_price is the Steem price in dollar and steem_to_sbdis the current market price for SBD (paying with Steem). 12pending_payout_SBD = (pending_payout_vote * 0.5 * (0.75 + (0.25*author_curate_reward))) * (1 + steem_to_sbd/ feed_price) Let’s use some actual values Variable Value author_curate_reward 9% steem_to_sbd 1.123 feed_price 5.00 $ Using this values:12pending_payout_SBD = (pending_payout_vote * 0.38625) * 1.2246pending_payout_SBD = pending_payout_vote / 2.11 So, paying for a vote is a zero-sum game when the vote is 211% higher than the price in SBD. Let’s assume the vote costs 1 SBD, the reward for the author is 1 SBD (Steempower reward also converted into SBD), when the bought voter votes for 2.11 $. When paying 1 SBD and the pending_payout_vote is 250% more (2.5$) the resulting payout is 1.16 SBD. What happens when we change the value of the variables? feed_price zero-sum percentage investment return for a 250% vote 4 $ 202% 1.24 5 $ 211 % 1.18 6 $ 218 % 1.15 7 $ 223 % 1.12 Higher feed_price reduces the SteemPower reward for the author. steem_to_sbd zero-sum percentage investment return for a 250% vote 0.2 249 % 1.00 0.5 235% 1.06 1 215 % 1.16 5 129 % 1.93 When 1 SBD is equal to 1 US-$ (steem_to_sbd = 5), gained SteemPower can be exchanged for a higher amount of SBD and the vote value can be lower. author_curate_reward zero-sum percentage investment return for a 250% vote 0 % 218% 1.15 5 % 214% 1.17 10 % 211 % 1.19 The resulting vote must be higher, when not perfoming a self-upvote. What happens when the feed price changes?When buying votes, the invested SBD are received at post-payout. When the feed-price changes, it affects the result.Let’s assume we buy 1 SBD at post creation and during the 7 days, the feed price changes. feed price change zero-sum percentage investment return for a 250% vote -20 % 245 % 1.02 -10 % 228 % 1.09 0 % 211 % 1.18 10 % 194 % 1.29 20 % 175 % 1.42 DiscussionThe gain is only small and may fast go to zero. When vote seller say that they return 250 % more than you pay, it may true seeing only the vote amount. The resulting payment return in SBD is only slightly higher than one.When the zero-sum percentage is 211% and the vote seller promises 250%, you gain for each 1 SBD 1.16 SBD after 3.5 to 7 days. Small amounts did also not push your posts in the trending zone of steemit. Buying votes are not worth the effort. I have gained nothing by buying votes. There were also no more visitors. No post reached the trending page. The only ones that earn a lot are the vote seller itself. What do you think, did you bought votes? This page is synchronized from the post: ‘Zero-sum game or buying votes’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/zero-sum-game-or-buying-votes/"},{"title":"How to estimate the real pending post payout by subtracting bought votes","text":"I wrote in my last post that I bought votes for my last post. I was asking me then: What is the real value of my post?For answering this question, the pending post-payout and the wallet history must be known. I wrote a small python script, that analyzes the transfer history and is able to calculate the resulting value. In order to run the script, steem python must be installed. I wrote a small tutorial how to install steem on a windows pc.The script can also be downloaded from Gist.In the script, the author variable author = &quot;holger80&quot; and the postURL postURL = &quot;https://steemit.com/steemdev/@holger80/how-to-estimate-historic-steempermvests-values-for-converting-old-rewards-from-vest-to-steem&quot;must be adapted. author_curate_rewardcan set to a value higher than zero, when the author did a self-upvote. The value can be extracted from steemd.com, as explained here. Script output1234567891011121314Bought vote with 0.400000 SBD from qustodianBought vote with 0.100000 SBD from kobusuBought vote with 0.150000 SBD from minnowbooster0.001000 SBD send back from minnowbooster with memo: You got an upgoat worth roughly 0.4$ in post rewards that will be done by sozdemir. We detected an open value of 0.003 SBD, worth 0.001 SBD in send and refunded that. Bought vote with 0.939000 SBD from smartmarketBought vote with 0.500000 SBD from minnowbooster0.002000 SBD send back from minnowbooster with memo: You got an upgoat worth roughly 1.34$ in post rewards that will be done by simnrodrguez. We detected an open value of 0.006 SBD, worth 0.002 SBD in send and refunded that. Bought vote with 3.000000 SBD from buildawhaleBought vote with 2.000000 SBD from smartsteemBought vote with 2.000000 SBD from ipromote---------------Results for https://steemit.com/steemdev/@holger80/how-to-estimate-historic-steempermvests-values-for-converting-old-rewards-from-vest-to-steemEstimated payout: 7.963875 SBD and 1.622301 SP9.086000 SBD used for buying votes, the estimated real post value in SBD (including SP) is 0.803388 So I can see that I used 9.08 SBD to buy votes and that the real estimated payout value is only 0.8 SBD.I converted the Steem Power author reward to SBD. Let me know if you tried my script and if it’s worked or not. Script1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from steem import Steemfrom steem.amount import Amountfrom steem.account import Accountfrom steem.post import Postfrom steem.dex import Dexif __name__ == &quot;__main__&quot;: nodes = [&apos;https://api.steemit.com&apos;,&apos;https://steemd.privex.io&apos;,&apos;https://steemd.pevo.science&apos;,&apos;https://rpc.steemliberator.com&apos;, &apos;https://rpc.buildteam.io&apos;,&apos;https://steemd.minnowsupportproject.org&apos;,&apos;https://gtg.steem.house:8090&apos;,&apos;https://seed.bitcoiner.me&apos;] steem_instance = Steem(nodes=nodes) # set the Author name author = &quot;holger80&quot; acc = Account(author, steemd_instance=steem_instance) # Set the PostURL here postURL = &quot;https://steemit.com/steemdev/@holger80/how-to-estimate-historic-steempermvests-values-for-converting-old-rewards-from-vest-to-steem&quot; author_curate_reward = 0.00 # You can get this value fomr steemd.com history = acc.get_account_history(-1,4000,order=1,filter_by=&quot;transfer&quot;) buy_vote_amount = 0 last_vote_buy = &quot;&quot; vote_bought = False for h in history: if h[&apos;memo&apos;] == postURL: buy_vote_amount += Amount(h[&apos;amount&apos;]).amount last_vote_buy = h[&apos;to&apos;] vote_bought = True print(&quot;Bought vote with %f SBD from %s&quot;%(Amount(h[&apos;amount&apos;]).amount, h[&apos;to&apos;])) elif vote_bought: if h[&apos;from&apos;] == last_vote_buy and h[&apos;to&apos;] == author and h[&apos;memo&apos;].find(&quot;http&quot;) != 0: buy_vote_amount -= Amount(h[&apos;amount&apos;]).amount vote_bought = False print(&quot;%f SBD send back from %s with memo: %s&quot;%(Amount(h[&apos;amount&apos;]).amount, h[&apos;from&apos;], h[&apos;memo&apos;])) p = Post(postURL,steemd_instance=steem_instance) pending_payout = Amount(p.pending_payout_value).amount feed_price = Amount(steem_instance.get_current_median_history_price()[&apos;base&apos;]).amount dex = Dex(steemd_instance = steem_instance) market_ticker = dex.get_ticker() steem_to_sbd = market_ticker[&apos;latest&apos;] payoutSBD = pending_payout * 0.5 * (0.75 + (0.25*author_curate_reward)) payoutSP = pending_payout * 0.5 * (0.75 + (0.25*author_curate_reward)) / feed_price realPostValue = payoutSBD + payoutSP * steem_to_sbd - buy_vote_amount print(&quot;---------------&quot;) print(&quot;Results for %s&quot; %(postURL)) print(&quot;Estimated payout: %f SBD and %f SP&quot;%(payoutSBD,payoutSP)) print(&quot;%f SBD used for buying votes, the estimated real post value in SBD (including SP) is %f&quot;%(buy_vote_amount,realPostValue)) This page is synchronized from the post: ‘How to estimate the real pending post payout by subtracting bought votes’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-estimate-the-real-pending-post-payout-by-subtracting-bought-votes/"},{"title":"py-scrypt updated to scrypt-1.2.1 and python 3.6 support added","text":"py-scrypt is a Python binding for the scrypt library and needed for installing steem-python. However, the package is outdated and did not use the newest version of scrypt. The second problem is that no wheels for python 3.6 are created. I decided to fix py-scrypt by updating scrypt to 1.2.1 and add wheels for python 3.6. All tests from py-scrypt are passed and the wheels can now be downloaded from: https://github.com/holgern/py-scrypt/releases/tag/v0.8.2. The downloaded wheel can then be installed by:1pip install scrypt-0.8.2-cp36-cp36m-win_amd64.whl Bug Fixes py-scrypt 0.8.0 uses the old scrypt 1.2.0 and there was not updated since 2016. There are 17 open issues. py-scrypt builds no wheel for python 3.6 for windows. I cloned py-scrypt from https://bitbucket.org/mhallin/py-scrypt/ and uploaded my changes to github New Features Newest scrypt 1.2.1 used Wheel for python 3.6 for Windows are build and can be downloaded here I asked the original author for permission to upload the new created wheels to https://pypi.python.org/pypi/scrypt travis build added Next steps When I recieve permission, I will upload my version 0.8.2 to pypi. When I do not recieve an answer, should I upload 0.8.2 under a new Name to pypi? This has to be discussed now. I will try to add py-scrypt to conda-forge Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘py-scrypt updated to scrypt-1.2.1 and python 3.6 support added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/py-scrypt-updated-to-scrypt-1-2-1-and-python-3-6-support-added/"},{"title":"Let community projects upvote your great posts -  update 02-2018","text":"I wrote in great detail about different community projects in my last post. This post is the summarized version, as I found the original post slightly too long and confusing. Community project without any or only one-time payment for lifetime membership Project Name Register/Discord/Obligation Supported by Benefit Minnow Support Project Send 0.001 SBD/STEEM with memo / Discord / Follow the rules @minnowsupport 95,827 SP ($32.05) Upvote every 24h with 0.5% ($0.160) Qurator 927 members Send 2 Steem to @qurator (lifetime) / Discord / High quality posts @qurator 102,933 SP ($34.42) Daily upvote with $0.17 - $1.56 STEEM Engine Resteem and upvote of the latest post / Discord / 100% upvote of all posts @thesteemengine 3,376 SP ($ 1.13) @ethandsmith 10,408 SP ($ 3.44) Daily upvote after participating in post-promotion MAKE-A-WHALE 71 members Not possible now / / Upvote all posts @make-a-whale 22,849 SP ($ 7.63) Upvote every 22 h of new posts Feed Your Minnows BOT 219 members Pay 2 Steem/SBD for a lifetime membership, or upvote all posts with at least 0.01$ and leave a comment with #feedme. @feedyourminnows 5,154 SP ($ 1.72) Upvote every 24 hours for $0.08 steem basic income 645 members Pay shares / / reputation above 20 @steembasicincome 6,733 SP ($ 2.23) @sbi2 856 ($ 0.28) Upvote of Posts and comments Steemdunk Register / Discord / Upvote of all posts with 100 % @steemdunk 3,400 SP ($ 1.13) Upvote of posts the human bot Post your link in the comment section of the newest post / / post guidelines @thehumanbot 23 SP ($0.01) manually selected posts will resteemted and upvoted Resteemable 1. Navigate to any Steemit.com Article - 2. Erase “https://“ - 3. Type “re” - 4. Get an Instant Upvote &amp; Resteem @resteemable 5,419 SP ($ 1.79) Upvote &amp; Resteem &amp; Leaves a comment Community project on which each vote has to be paid Name How to Use / Notes Supported by Vote in Return Manual Curation from @kobusu and @mariachan 0.1 Sbd/Steem to @kobusu / High-quality post @kobusu 925 SP ($ 0.31) @mariachan 136 SP ($ 0.05) Upvote and resteem of your post with 0.23+$. Steemdunk 0.2 SBD to @steemdunk / Upvotes when Voting power is at least 70 % @steemdunk 3,400 SP ($ 1.13) $0.55 - 275%, leaves a comment qustodian SBD to @qustodian / Membership at Qurator @qustodian 10,393 SP ($3.47) 265%, up to $2.00 randowhale 1 SBD to @randowhale / Upvotes when Voting power is at least 99 % @randowhale 635,208 SP ($ 209.44) Random vote power bumper 0.1 - 0.5 SBD to @bumper / Votes with 3 days delay @bumper 28,132 SP ($ 9.28) $0.3 - $1.5 (300%) minnowbooster 0.001 - 90 SBD to @minnowbooster @minnowbooster 1,009,033 SP ($ 270.75) 275% vote in return smartsteem Send SBD/STEEM to @smartmarket @smartsteem 145,641 SP ($ 37.35) 255% vote in return image source Do you know other great projects? Please let me know. This page is synchronized from the post: ‘Let community projects upvote your great posts - update 02-2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/let-community-projects-upvote-your-great-posts-update-02-2018/"},{"title":"Can manual curation be more rewarding than self-voting?","text":"Assuming that you have 500 SP with a 100% vote worth $ 0.14. This results in 9.8 $ per week, when voting 10 times a day. You could then receive: 4.9 SBD and 1.26 SP (20.60 US$) each week, if you upvote every 2.4h your own comment, 3.7 SBD (12.12 US$) each week, if you sell your vote at https://smartsteem.com/, 3.84 SBD (12.57 US$) each week, if you sell your vote at https://www.minnowbooster.net/, 3 Steem (11.64 US$) each week, if you delegate your SP on the market at https://www.minnowbooster.net/, up to 1 Steem (3.88 US$) if you vote for maximum curation award per week. 1 Steem is already hard to reach. When is active curation more worth than self voting?S1 is the Steem price in US$ and S2 is the SBD price in US$.14.9 * S2 + 1.26 S1 = 4.9*3.27 + 1.26*3.88 US$ = 20.60 US$ The 4.9 SBD for self-voting is scaled with S1/3.88*S2, where 3.88 is the current Steem price. The 1.26 SP is not scaled. Curation is more worth than self-voting when the inequality is true:123S1 &gt; 4.9 * (S1/3.88)*S2 + 1.26*S11 &gt; 4.9/3.88*S2 + 1.261 &gt; 1.26 *S2 + 1.26 As this inequality is never true, self-voting will always win. This is not good for the platform. It is not a solution to forbid or punish self-voting, as such measures can be passed over by cross-voting with two accounts. What to changeSo I think that the reward split should be changed, such that curation can be more worth than self-voting.For example, when the reward split is fixed to 66% SBD and 33% SP payout:123S1 &gt; 6.53 * (S1/3.88)*S2 + 0.84*S11 &gt; 0.84 * S2 + 0.841.19 &gt; S2 and the SBD price is below 1.19 US$, manual curation can be more rewarding than self-voting. What do you think? image source This page is synchronized from the post: ‘Can manual curation be more rewarding than self-voting?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/can-manual-curation-be-more-rewarding-then-self-voting/"},{"title":"py-scrypt 0.8.6 released","text":"I received write permission forthe py-scrypt repository and pypi. I will maintain py-scrypt and fix issues now. I submitted https://bitbucket.org/mhallin/py-scrypt/commits/abb8e09326404b8fc24420be5187abf4165a13ae https://bitbucket.org/mhallin/py-scrypt/commits/471d081ac562e03ed155d7a4f0de148c9bc1c62a https://bitbucket.org/mhallin/py-scrypt/commits/d142549dedf982c230db508ec14d124806d52e0e to https://bitbucket.org/mhallin/py-scrypt and published version 0.8.3 to pypi.The new version can be updated with1pip install --upgrade scrypt AdditionAs the current steem depends on scrypt 0.8.0, I uploade wheels for python 3.6 under Windows to pypi. It is now possible to easily install steem also under windows. Do the following to install steem with pipunder windows using python 3.6:12pip install --upgrade scrypt==0.8.0pip install steem Addition 2I released three more bug fixes, 0.8.4, 0.8.5 and 0.8.6. The following issues could be fixed by release 0.8.3 #29: Build issue? #21: Test breaks: “ImportError: No module named test_scrypt_c_module” #31: Please include license file in source distribution #32: Cannot install on Windows due to it looking for unix file #33: Scrypt Still not pip installable The following issues could be fixed by release 0.8.4 #27: please add version attribute to scrypt module missing void in sha256.c fixed The following issues could be fixed by release 0.8.5 MANIFEST.in fixed scrypt.py moved into own scrypt directory with init.py openssl library path for osx wheel repaired The following issues could be fixed by release 0.8.6 setup.py fixed The status of the issues can be seen here https://bitbucket.org/mhallin/py-scrypt/issues. New Features Scrypt was updated to 1.2.1 wheels for python 3.6 for windows are added to pypi. pip install scrypt is now easily possible under windows when using anaconda with python 3.6. wheel for windows and osx are generated in https://github.com/holgern/py-scrypt/ conda feedstock repo Update - scrypt on conda-forge nowI did it, scrypt 0.8.0 can be installed via conda-forge!conda install -c conda-forge scryptYou can find the feedstock here:https://github.com/conda-forge/scrypt-feedstock Please test and let me know if the conda-forge packages work. I already posted here https://steemit.com/utopian-io/@holger80/py-scrypt-updated-to-scrypt-1-2-1-and-python-3-6-support-added. I hope that I follow the Utopian Rules this time. I spend 24 hours for everything. Here is the quote from my last review: Since you saying that there are quite a bug fixes, what you can do it to fork the original repo and add it as a Pull Request, if the pull request is merged we can accept it as a Valid Contribution. Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘py-scrypt 0.8.6 released’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/py-scrypt-0-8-3-released/"},{"title":"How to get the number of accounts per level using Robo 3T and steemdata","text":"Do you want to calculate by yourself how many whales are currently in steem? You can do this by using steemdata by @furion. Please do not forget to vote for @furion as one of your witnesses, if you want to use steemdata (server are costly). The steem data are provided as a MongoDB service. In order to get familiar with MongoDB you can use Robo 3T. Download it and install it. Create a new connection and enter the following data:and The following collections are available: AccountOperations - Same as Operations but with account ownership, Accounts - All steem accounts can be found here, Comments - contains all comments, Operations - contains all blockchain operations, Posts - contains all posts, PriceHistory - contains the Steem, SBD, BTC and USD price, stats - contains information about the database.You can find more information in this guide. Number of inactive usersDouble-click on Accounts, to open a new tab in Robo 3T. You can now enter your own commands in the darkterminal at the top. Let’s find out how many inactive fishes are currently in steemit. Inactive means: no post within the last 30 days or no comment within the last 30 days or no vote within the last 30 days. At first, we need a time constraints: 123 time_constraints = { &apos;$gte&apos;: ISODate(&apos;2018-01-11 00:00:00.000Z&apos;),} $gte is a comparison query operator and stands for greater than or equal. ISODate is a date datatype. In the next step, we build a condition using the logical query operator $or:1234567conditions = { $or: [ {&apos;last_post&apos;: time_constraints}, {&apos;last_root_post&apos;: time_constraints}, {&apos;last_root_post&apos;: time_constraints} ]} We will now substract the number of all account by the number of account that fullfill the condition:1db.getCollection(&apos;Accounts&apos;).find().count() - db.getCollection(&apos;Accounts&apos;).find(conditions).count() It should look now like this: Number of red fishesWe need now a condition for vesting_shares:123vesting_condition = { &apos;vesting_shares.amount&apos;: {&apos;$lte&apos;: 999999}} The find condition can then be extended by1db.getCollection(&apos;Accounts&apos;).find({$and: [conditions,vesting_condition]}).count() Number of MinnowsThe vesting_conditionchanges to123456vesting_condition = { $and: [ {&apos;vesting_shares.amount&apos;: {&apos;$lte&apos;: 9999999 }}, {&apos;vesting_shares.amount&apos;: {&apos;$gte&apos;: 1000000 }}, ]} Number of DolphinsThe vesting_conditionchanges to123456vesting_condition = { $and: [ {&apos;vesting_shares.amount&apos;: {&apos;$lte&apos;: 99999999 }}, {&apos;vesting_shares.amount&apos;: {&apos;$gte&apos;: 10000000 }}, ]} Number of OrcasThe vesting_conditionchanges to123456vesting_condition = { $and: [ {&apos;vesting_shares.amount&apos;: {&apos;$lte&apos;: 999999999 }}, {&apos;vesting_shares.amount&apos;: {&apos;$gte&apos;: 100000000 }}, ]} Number of WhalesThe vesting_conditionchanges to123vesting_condition = { &apos;vesting_shares.amount&apos;: {&apos;$gte&apos;: 1000000000 }} Results Type Vests Number of account Inactive - 604089 Red fish between 0 and 999999 VESTS 146109 Minnow between 1000000 and 9999999 VESTS 4026 Dolphin between 10000000 and 99999999 VESTS 919 Orca between 100000000 and 999999999 VESTS 141 Whale more than 1000000000 VESTS 12 Do you have questions or comments? Please let me know. This page is synchronized from the post: ‘How to get the number of accounts per level using Robo 3T and steemdata’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-get-the-number-of-accounts-per-level-using-robo-3t-and-steemdata/"},{"title":"Review about sola.ai - the next-gen decentralized social network","text":"They advertise themselves as next-gen decentralized social network. But they write in their Terms of Service: The Sola project (or Sola), available in the Internet via https://sola.ai/, owned and operated by PLAG Limited, a company incorporated at Drake Chambers, Road town, Tortola, P.O.BOX 3321, British Virgin Islands is a social platform for virtual interaction between users. “Services” refers to your use of Sola project for any purpose whatsoever. You got banned from sola.ai when (Terms of Service): — Serial Accounts: You may not create multiple accounts for disruptive or abusive purposes or with overlapping use cases. Mass account creation may result in suspension of all related accounts. Please note that any violation of the Sola project rules is cause for permanent suspension of all accounts.— Targeted Abuse: You may not engage in targeted abuse or harassment. If the reported behavior is one-sided or includes threats it is considered as targeted abuse or harassment.— Selling Accounts: You may not buy or sell Sola project accounts.— Malware/Phishing: You may not publish or link to malicious Content intended to damage or disrupt another user’s browser or phone or to compromise a user’s privacy.— Sensitive Content: You may not use the Sola project to spread sensitive content. Some of the factors that we take into account when determining what content is considered sensitive are:— Content which includes an excessive consumption of alcohol or illegal substances, or encourages minors to consume alcohol or smoke cigarettes;— Content which is portraying realistic images of people or animals being killed or maimed, shot, stabbed, tortured or injured, or links to such content;— Content or comments that depict violence against or abuse of children;— Content that includes realistic depictions of weapons in such a way as to encourage illegal or reckless use of such weapons;— Content that present excessively objectionable or crude content;— Content that promotes or contains pornographic material; this includes sexually explicit or erotic content, icons, titles, comments or descriptions and/or can be deemed as pornographic and/or obscene by the Sola project; the Sola project has a zero-tolerance policy against child sexual abuse imagery.— Posts and comments may contain or quote-religious text provided the quotes or translations are accurate and not misleading. Commentary should be educational or informative rather than inflammatory;— Content or comments that contain references or commentary about a religious, cultural or ethnic group that are defamatory, offensive, mean-spirited or likely to expose the targeted group to harm or violence;— Spam: You may not use the Sola project for the purpose of spamming anyone. The exact definition of “spamming” will evolve as we respond to new tricks and tactics by spammers. Some of the factors that we take into account when determining what conduct is considered to be spamming are:— If a large number of complaints have been filed against you;— If you post multiple duplicate updates (text, links, images, videos);— If you send large numbers of duplicate comments;— If you repeatedly create false or misleading content;— If you repeatedly post other users’ account information as your own (bio, cards, etc.);— If you post misleading links (e.g. affiliate links, links to malware/click jacking pages, etc.);— Creating misleading accounts or account interactions;— Graphic Content: You may not use pornographic or excessively violent media in your profile image, header image, or background image. Looks very centralized to me. You can only post, if you allow access to your position. The position is shown for each user. The whitepaper contains nothing substantial regarding the technical background. Timeline Q1 2018 Public API Q2 2018 Decentralized operations on a blockchain Q3 2018 Direct advertising self-service platform AI spread algorithm AI parsing of any external content into a card format Q4 2018 Decentralized media storage 2019 Connectors platform for “pay per engagement” model Completely distributed immutable service Sola token 24hr Volume: 747.580299 SOL / 0.00693672 BTC (https://tidex.com) 24hr Volume:0.012 open.BTC / 1,039.243 open.SOL (https://openledger.io) 1 SOL - 801 Satoshi How does it workYou have Action Points (AP) which refill each day if you login and if you post content which is endorsed by others.You can use your AP for posting and for endorsing others. You earn also Sola (SOL) when your post is iendorced by others.Endorsing is like upvote in steemit. By endorsing a post, you are losing 1-100 AP. You can do this, until your AP are zero.By skipping, the next post is shown. Endorsing and skipping is done by swiping or pressing a key. You can prioritize and hide users. Comparison with steemit sola.ai steemit User 807000 758000 Loginbonus yes no self-vote no yes Search no yes Tags no yes Posting costs AP Bandwidth Comments yes yes Comments can be upvoted yes yes Time limit for voting 7 days 7 days Downvote no (only flagging and manual banning) yes Public blockchain not yet yes API not yet yes referral program 10 % for 1 year no Editor WYSIWYG markdown Readable Post-URL no yes Feed determined by AI which uses geo-location followers Ads yes no What can you earnGood posts earn around 1000 AP and 9 Sola -&gt; 7000 Satoshi -&gt; 0.6 $, but consists only of one image or a few words. What can you do with SolaNot much at the moment, holding or selling are the only choice. At the moment, I do not think that sola.ai is a serious competition to steem / steemit. I will take a second look, when their api and blockchain is finished. They working also on a search function and on including topics. At the moment, there are more user on sola.ai, but the 24 h BTC trading volume of Sola is 260x lower than Steem. What do you think about https://sola.ai? This page is synchronized from the post: ‘Review about sola.ai - the next-gen decentralized social network’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/review-about-sola-ai-the-next-gen-decentralized-social-network/"},{"title":"Install steem-python easily by conda-forge","text":"Installing steem-python is very frustrating: At the moment, it is not easily possible to install steem-python on windows The steem python version from pypi cannot be compiled, as it requires a wrong toml version which does not exists the cli programms do not run, as the node cannot be changed and the default node is offlineBug fixesInstalling steem-python by conda-forge fixes: https://github.com/steemit/steem-python/issues/90 https://github.com/steemit/steem-python/issues/92 https://github.com/steemit/steem-python/issues/96 https://github.com/steemit/steem-python/issues/97 https://github.com/steemit/steem-python/issues/106 https://github.com/steemit/steem-python/issues/111 https://github.com/steemit/steem-python/issues/112 https://github.com/steemit/steem-python/issues/114 https://github.com/steemit/steem-python/issues/144 These open issues have been fixed by patching the source code of the release source from pypi and by using only conda packages for installing steem. The patches to fix the broken node can be found in this commit.I pushed them here https://github.com/conda-forge/steem-feedstock/commit/751b620e91d60a5a9152e684aa5f8de968362949.In order to install steem with conda, I also pushed the following PR: https://github.com/conda-forge/staged-recipes/pull/5109 https://github.com/conda-forge/staged-recipes/pull/5107 https://github.com/conda-forge/staged-recipes/pull/5106 Installing steem-pythonAfter installing Miniconda / Anaconda on either Linux, OSX or Windows just do:12conda config --add channels conda-forgeconda install steem You can use the three cli-programs (steempy and piston are doing the same): steempy / piston steemtail and the python classes import steem import steembase Please test this and report bugs regarding installation steem in the steem-feedstock: https://github.com/conda-forge/steem-feedstock I patched the released source code less as possible. You can see the patches here: https://github.com/conda-forge/steem-feedstock/blob/master/recipe/Pipfile.lock.patch https://github.com/conda-forge/steem-feedstock/blob/master/recipe/cli.py.patch https://github.com/conda-forge/steem-feedstock/blob/master/recipe/steemd.py.patch In order to be able to add steem to conda-forge, I added the following feedstocks: https://github.com/conda-forge/scrypt-feedstock/ https://github.com/conda-forge/sphinxcontrib-programoutput-feedstock/ https://github.com/conda-forge/sphinxcontrib-restbuilder-feedstock/ https://github.com/conda-forge/pytest-pylint-feedstock/ https://github.com/conda-forge/pylibscrypt-feedstock/ https://github.com/conda-forge/pipfile-feedstock/ If you have issues, please report them in the specific repository. Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Install steem-python easily by conda-forge’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/install-steem-python-easily-by-conda-forge/"},{"title":"steempy - a new python library for steem","text":"We all know the official python library for steem. I decided to write a new python library for steem, as steem-python do not uses synergies with the BitShares network. Furthermore, the source code of steem-python is in a bad shape and there are almost no unit-tests. In meantime, python-graphenelib is actively developed and it is a obvious step to use this library for any Graphene 2.0 blockchain. So I present today a new python library for steem called steempy. This new library is at the beginning of its developement. steempy is based on python-bitshares and python-graphenelib. steempy can be installed besides the official steem-python library. At the moment, steempy has a different API than steem-python. Unlike steem-python, steempy uses a RPC-Websockt for connection with the steem nodes. So the node-address must start with wss, e.g. wss://gtg.steem.house:8090. Important links https://github.com/holgern/steempy http://steempy.readthedocs.io/en/latest/ https://pypi.python.org/pypi/steempyInstallation1pip install steempy or 1234git clone https://github.com/holgern/steempy.gitcd steempypython setup.py buildpython setup.py install --user Python files inside steempyAccount Is a BlockchainObject class Contains information about one account history and balances functionsAmount dict class with amount, symbol and asset regular mathematical expression possibleBlock Is a BlockchainObject class Contains information about one blockBlockchain Is a BlockchainObject class Contains information about the blockchain Stream function get_all_accounts, feed_history, current_median_history_price, get_current_block, block_time and more functionsBlockchainObject dict class cache functionMemo uses the wallet class for message encryption/decryptionNotify Is a Events class and uses Websocket Can be used to stream all blocksPrice Is a dict class Can be used for things like Price(&quot;0.315 SBD/STEEM&quot;)Steem Connect to the Steem network. Uses the SteemNodeRPC class to send calls to the Steem network Functions for finalizes transaction and key managementStorage Uses a sql3-database to store user keysTransactionbuilder dict class Simplifies the creation of transactionsVote Represents a vote Is used by ActiveVotes (all votes from a post) and AccountVotes (all votes from an account)Wallet Manages private keys for an accountWitness Read data about a witness Python files inside steempybaseaccount Wrapper for graphenebase.account bip38 Wrapper for graphenebase.bip38memo Function for encryption/decryption of a memoobjects Containts classes which represents objects, which are used in operations in the steem blockchain, as Account, Amount, Operation, Permission, … Used for signing a transactionoperations Contains classes which represents operations on the blockchain as Transfer, Vote, Account_create,… Used for signing a transactionsignedtransaction Wrapper for graphenebase.signedtransactionsPython files/classes inside steempyapiSteemNodeRPC Wrapper for grapheneapi.graphenewsrpcSteemWebsocket Event class Create a websocket connection and request push notifications Can be used to stream each Block How does steempy workRead a account 1234from steempy.account import Accountaccount = Account(&quot;holger80&quot;)print(account)&lt;Account holger80&gt; Access the Blockchain 123456from steempy.blockchain import Blockchainb = Blockchain()b.get_all_accounts()b.get_current_block()b.current_median_history_price()b.feed_history() Votes 12from steempy.vote import AccountVotesallVotes = AccountVotes(&quot;holger80&quot;) Stream all blocks 12345 from pprint import pprint from steempy.notify import Notifynotify = Notify( on_block=print )notify.listen() Current state The current version is 0.19.2 Account, Amount, Asset, Block, Blockchain, Instance, Memo, Message, Notify, Price, Steem, Transactionbuilder, Vote, Witness are working Signed transactions are working At the moment, only transfer-transaction is implemented 67 % coverage by unit tests Used CI-tools: travis, appveyor, circeci and codecov published to pypi documentation available Roadmap Add all missing transactions, as posts,comments, votes, … Add more function regarding the account Add Post and Comment class Add CLI-programms Rename the library to beem, steempy is the name of the CLI tool from python-steem. How to contribute You are invited to fork my repo and submit pull requests If you have an issue, please let me know What do you think? Do you have suggestions? What do think about the name of my library? Is steempy a good name or should I change it? Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘steempy - a new python library for steem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steempy-a-new-python-library-for-steem/"},{"title":"How to keep your steemit account safe","text":"Today, I read a post people-still-post-their-private-keys-on-memos that private keys can be found in memos inside the blockchain. So I will describe my security setup for preventing such things. As you might know, there are 4 different key types: posting key for posting and voting, active key for transfers and market orders, owner key for changing the private keys, memo key for creating and reading encrypted memos. Each key type consists of a public and a private key. The public key is known to each user and starts always with STM. The private owner key starts always with a P, and the other private keys have no prefix. source Once logged into steemit, the user credentials are stored for a while. So it is not a good idea to use the active or owner key for login. If you do so, everyone who has short access to your PC can go to the steemit site and move your STEEM/SBD (If you not have pressing the logout button). The second and bigger problem is the following scene:You are logged in with your posting key, and want to transfer some SBD to different accounts. You are in hurry.You are copying your post-url into the memo field and press submit.Then you are copying your active key and pasting it into the dialog. Then you want to transfer some more SBD to a second account. So writing down the recipient, the SBD amount and then pasting again into the memo field and finally press submit. … ups .. your have sent your active key into the blockchain … You are not fast enough to save your remaining fluid SBD/STEEM but your SP are save. Monitoring every memo for pasted keys and automatically withdraw all founds is easy to implement and fast. What to do?Never, never use your private owner key for posting or transfers! Never store any key in the internal password manager of your browser, as this is not secure. Use a password manager which automatically clears the clipboard after 10 seconds when copying the active key. Use only a password manager which do not use autofill!By doing this its more unlikely that you copying your active key accidientially into the memo field. I’m using 1password 6 with the following settings: Keepass 2 is also a good and free password manager. enpass has also a clear clipboard feature and is free. What are your security measures for preventing that you accidientially pasting your active/owner key into a transfer memo? This page is synchronized from the post: ‘How to keep your steemit account safe’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-keep-your-steemit-account-safe/"},{"title":"Update for beem (former steempy) - the new python library for steem","text":"steempy is a CLI tool from steem-python, in order to prevent confusion, I renamed my python library to beem. A beam maschine is a special steam engine which utilizes a metal beam. Therefore, beem is a good name for a python library for Steem. beem is a python library for Steem and uses python-graphenelib from @xeroc. python-graphenelib has a dependency to pcrytodome, which is incompatible to the old and un-maintained pycryto which is used by steem-python. Therefore,pip install beem will break some functions of steem-python, as pycryto is replaced by pycrytodome. beem is compatible to python 3.5 and upwards. At the moments, all unit tests passed for python 3.5 and 3.6 for linux, OSX and windows. As soon as python-graphenelib is compatible to python 2.7, I will add compatiblity for python 2.7. You cannot install beem and steem on the same maschine!I commited a PR to python-steem: https://github.com/steemit/steem-python/pull/146 in order to fix this. New links for the project https://github.com/holgern/beem http://beem.readthedocs.io/en/latest/ https://pypi.python.org/pypi/beem You can install beem on an Android mobile using Termux. You can learn here how to setup termux.12pkg install clang openssl-dev python python-devpip install-U beem New Features Coverage could improved to 73%! Improved Doku Missing features added More unit tests Library renamed to beemAdded missing transaction objects and more unit tests https://github.com/holgern/beem/commit/761a3a607201bd7fa87ae76bebe9427e6f2a9cda ExchangeRate, Beneficiary, Beneficiaries, CommentOptionExtensions, Transfer_to_vesting, Withdraw_vesting, Account_witness_vote, Comment, Custom_json, Comment_options, Feed_publish, Convert, Set_withdraw_vesting_route, Limit_order_cancel, Delegate_vesting_shares, Limit_order_create, Transfer_from_savings, Cancel_transfer_from_savings, Claim_reward_balance, Transfer_to_savings added Unit tests addedAdded missing functions and objects https://github.com/holgern/beem/commit/47cf2b4ceeeef87532722d8197400ded7e59fc16account: reputation added history improved and fixedblock: ops and ops_statistics addedblockchain: function-names improved ops_statistics addedblockchainobject json export addedComment class addedDiscussion class addedsteem: follow and account by key api added and fixedstorage: more nodes addedutils Helpfunctions addedvote blockchainobject refresh fixedwallet purgeWallet addedWitness printAsTable function added WitnessesVotedByAccount added WitnessesRankedByVote added WitnessesByIds added LookupWitnesses addedSteemnoderpc register_apis fixedtest_wallet unit tests addedtest_utils unittests addedRename library from steempy to beem https://github.com/holgern/beem/commit/f166f7fc857c0270f4a684d655a9386c65e49274 Improve doc and upstream fixes from python-bitshares included https://github.com/holgern/beem/commit/6637f5ca7d0adef333706479c67ceacdec7465e9 Did you try my new library yet? Please give me feedback! Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem (former steempy) - the new python library for steem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-former-steempy-the-new-a-python-library-for-steem/"},{"title":"Next update for beem - a python library for steem","text":"In this update, I added more functionality to the account, comment, market, steem and witness class.The beem library can also be used with python 3.4, as all unit tests are passing. The current coverage is 69%. You can find my library on github and pypi. You can also take a look in the documentation. New Features https://github.com/holgern/beem/commit/acbb397571ca2ead503a4adabab5259cbd2c1223Acount print_info() shows import information about the account voting_power, steem_power, get_voting_value_SBD, get_followers, get_following, get_bandwidth unfollow, follow, update_account_profile, transfer_to_vesting, convert, transfer_to_savings, transfer_from_savings, cancel_transfer_from_savings, claim_reward_balance, delegate_vesting_shares, withdraw_vesting added to the account class transfer, approvewitness, dissapprovewitness and update_memo_key moved from the steem-class to the account classComment upvote, downvote, vote, edit, reply, post, resteem, comment_options addedDiscussions Comment_discussions_by_payout, Post_discussions_by_payout, Discussions_by_created, Discussions_by_active, Discussions_by_cashout, Discussions_by_payout, Discussions_by_votes, Discussions_by_children, Discussions_by_hot, Discussions_by_feed, Discussions_by_blog, Discussions_by_comments, Discussions_by_promoted addedMarket Is now fully functional ticker, volume24h, orderbook, recent_trades, trades, market_history and accountopenorders added buy, sell and cancel addedSteem register apis fixed dynamic_global_properties, feed_history, current_median_history_price, next_scheduled_hardfork, hardfork_version, network, chain_properties, config and reward_fund are stored in self.data. It can be refreshed by refresh_data(True). All functions to read these variables were moved from blockchain to steem. get_median_price, get_payout_from_rshares, get_steem_per_mvest, vests_to_sp, sp_to_vests, sp_to_sbd, sp_to_rshares added custom_json addedutils make_patch addedWallet small fixWitness feed_publish and update added Several Unit tests were also added https://github.com/holgern/beem/commit/27e41802d2bf883ba52953e8e2c851d02c00c1da https://github.com/holgern/beem/commit/f5bfccbf6caffaf05e88a83d33f8abf14da66aad https://github.com/holgern/beem/commit/809b7b23b9b152dc1a336e027e421b4e7daf8de5Small bugfix and relase of version 0.19.6 https://github.com/holgern/beem/commit/63c5381107670d65fa23ff3dd37846916993f3d2 For the next update, I will try to add missing functions and i will improve the documentation.Did you try my new library yet? Please give me feedback! Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Next update for beem - a python library for steem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/next-update-for-beem-a-python-library-for-steem/"},{"title":"Update for beem - now compatible with python 2.7","text":"beem is now the first (as far as I know) python library for steem which supports python 2.7, 3.4, 3.5 and 3.6. By supporting, I mean that 130 unit tests have passed with the specific python version. New Features beem is now compatible with the official steem-python library. Both can be installed in parallel! beem works now also for python 2. Be careful there might be some bugs. Please report! Code coverage is 75% The newest version 0.19.7 can be installed with pip install beem Changes https://github.com/holgern/beem/commit/7356a5130d529bd7e5eb28767cfd75474511e639Account docu improved get_feed, get_blog, get_blog_entries added get_account_votes added fix timezoneAmount export to json and str fixedBlock change_block_number addedBlockchain get_estimated_block_num addedComment dates and Amounts are now converted json_export adapted get_reblogged_by added delete_comment addedStorage 2 nodes removed from defaultUtils timezone information added to formatTimeStringUnit tests more tests added for account, amount, comment, price and transactionMore Changes https://github.com/holgern/beem/commit/3f6cee8cce8d1034d9955185e1e9df3bc96a588a The graphenelib was moved into beem, in order to prepare support for python 2.7 pycryptodome was replaced by pycryptodomex, which allows to install steem-python in parallel.Changes to make beem compatible with python 2.7 https://github.com/holgern/beem/commit/20f306fc7c612531a229c29de85a3d6e432c8db0 https://github.com/holgern/beem/commit/9e65837c1e14e9fad95b6786fe1852a43abc23a0 https://github.com/holgern/beem/commit/9c0d7e9a4fe94bef4c113b8ef7f4a8303bebb1d2 https://github.com/holgern/beem/commit/026ad2837fcc94b9cbebd971b40632d5db7937a5 https://github.com/holgern/beem/commit/57dec972ecf67397ba57fc1d61c1e6a41d5155f5 https://github.com/holgern/beem/commit/c1a0949c53d3d5c88ee83f6c2c05818c9eabe5c3 And all small commits between Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem - now compatible with python 2.7’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-now-compatible-with-python-2-7/"},{"title":"Update for beem - a steem python lib - CLI and conda-forge added","text":"beem has now a first and simple version for a CLI script, called beempy. I pushed beem to conda-forge. The coverage could be increased to 79.4%. The current version is 0.19.9. You can find the github here: https://github.com/holgern/beem. Conda-forgebeem has now its own feedstock: https://github.com/conda-forge/beem-feedstock. I successfully pushed a pull request.It can now be installed by conda install beem on every miniconda/anaconda environment. You only need to enable the conda-forge channel first:1conda config --add channels conda-forge CLII started to work on a cli tool for beem. I’m using click. I will try to add all commands which are available withing steempy from steem-python. Unit testsI worked also on the unit tests. At the moment, 178 unit tests are available. Changes https://github.com/holgern/beem/commit/3c4d42a46e681688aa9e5746b84f53c906450355Python2/3 Compatibilty to_bytes() is reverted back to __bytes__ py23_bytes added isinstance for strings and integer corrected super() made compatible with python 2 Account allow and disallow moved from the steem to the account class small improvements Comment get_votes addedSteem Doku improvedVote bug fixes printAsTable addedWallet getPostingKeyForAccount addedUnit tests test_vote added test_testnet added test_py23 added Fix unit tests for python 3 https://github.com/holgern/beem/commit/fde33e6fc63af0b8d0d5331c067652d15bbdbdcc CLI added https://github.com/holgern/beem/commit/d1c216f0e8951c5cb8481db9f500cf2b4b37e0ca CLI added with following commands: balance info Unit tests for CLI added CLI and Account improved https://github.com/holgern/beem/commit/d3291ec480590dcadf5af230eac542bd5abc9101Account: sp vp properties added print_info improved reputation -&gt; get_reputation voting_power -&gt; get_voting_power steem_power -&gt; get_steem_power precision option removed balance -&gt; get_balanceCLI set, config createwallet, walletinfo, addkey, listkeys, listaccounts and changewalletpasswordphrase addedSteem create_account_with_delegate addedUnittestsUnit tests fixed and added Fix Memo in Transfer https://github.com/holgern/beem/commit/87baf3f962d87a0edee22967d63d080c1d835d4b Unit tests fixed for STEEM-style encrypted memos Memo encryption and decryption fixed Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem - a steem python lib - CLI and conda-forge added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-a-steem-python-lib-cli-and-conda-forge-added/"},{"title":"API methods list for AppBase","text":"source As you might know, testing of AppBase has started on a large scale. The node https://api.steemitstage.com runs version v0.19.4 and is ready for testing. You can read more in this post AppBase: The next step forward for the Steem blockchain (let the testing begin). There is backward compatibility api which is called condenser_api. Using this api you can use all old api calls. In the following, I show you a complete list of the new API calls (the list is generated with jsonrpc.get_methods and jsonrpc.get_signature). Assets asset precision symbol “@@000000013” 3 “SBD” “@@000000021” 3 “STEEM” “@@000000037” 6 “VESTS” Amounts are stored as list, e.g.: [‘1000’, 3, ‘@@000000021’]. The float value can be calculated by:1int(amount[0]) / (10 ** amount[1]) Possible values for the ‘order’ argument in the database_apiI wrote all possible ‘order’ combination in the table. account_by_key_api method args return get_key_reference {‘keys’: []} {‘accounts’: []} account_history_api method args return get_account_history {‘account’: ‘’, ‘start’: ‘18446744073709551615’, ‘limit’: 1000} {‘history’: []} get_ops_in_block {‘block_num’: 0, ‘only_virtual’: False} {‘ops’: []} account_history_api.get_transaction args {‘id’: ‘0000000000000000000000000000000000000000’} return {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: [], ‘transaction_id’: ‘0000000000000000000000000000000000000000’, ‘block_num’: 0, ‘transaction_num’: 0} block_api method args return get_block {‘block_num’: 0} {} get_block_header {‘block_num’: 0} {} database_api method args return find_account_recovery_requests {‘accounts’: []} {‘requests’: []} find_accounts {‘accounts’: []} {‘accounts’: []} find_change_recovery_account_requests {‘accounts’: []} {‘requests’: []} find_comments {‘comments’: []} {‘comments’: []} find_decline_voting_rights_requests {‘accounts’: []} {‘requests’: []} find_escrows {‘from’: ‘’} {‘escrows’: []} find_limit_orders {‘account’: ‘’} {‘orders’: []} find_owner_histories {‘owner’: ‘’} {‘owner_auths’: []} find_savings_withdrawals {‘account’: ‘’} {‘withdrawals’: []} find_sbd_conversion_requests {‘account’: ‘’} {‘requests’: []} find_vesting_delegation_expirations {‘account’: ‘’} {‘delegations’: []} find_vesting_delegations {‘account’: ‘’} {‘delegations’: []} find_votes {‘author’: ‘’, ‘permlink’: ‘’} {‘votes’: []} database_api.find_withdraw_vesting_routes args return {‘account’: ‘’, ‘order’: ‘by_withdraw_route’} {‘routes’: []} {‘account’: ‘’, ‘order’: ‘by_destination’} {‘routes’: []} database_api method args return find_witnesses {‘owners’: []} {‘witnesses’: []} get_active_witnesses {} {‘witnesses’: []} get_config {} {} get_current_price_feed {} {‘base’: [‘0’, 3, ‘@@000000021’], ‘quote’: [‘0’, 3, ‘@@000000021’]} database_api.get_dynamic_global_properties args return {} {‘id’: 0, ‘head_block_number’: 0, ‘head_block_id’: ‘0000000000000000000000000000000000000000’, ‘time’: ‘1970-01-01T00:00:00’, ‘current_witness’: ‘’, ‘total_pow’: ‘18446744073709551615’, ‘num_pow_witnesses’: 0, ‘virtual_supply’: [‘0’, 3, ‘@@000000021’], ‘current_supply’: [‘0’, 3, ‘@@000000021’], ‘confidential_supply’: [‘0’, 3, ‘@@000000021’], ‘current_sbd_supply’: [‘0’, 3, ‘@@000000013’], ‘confidential_sbd_supply’: [‘0’, 3, ‘@@000000013’], ‘total_vesting_fund_steem’: [‘0’, 3, ‘@@000000021’], ‘total_vesting_shares’: [‘0’, 6, ‘@@000000037’], ‘total_reward_fund_steem’: [‘0’, 3, ‘@@000000021’], ‘total_reward_shares2’: ‘0’, ‘pending_rewarded_vesting_shares’: [‘0’, 6, ‘@@000000037’], ‘pending_rewarded_vesting_steem’: [‘0’, 3, ‘@@000000021’], ‘sbd_interest_rate’: 0, ‘sbd_print_rate’: 10000, ‘maximum_block_size’: 0, ‘current_aslot’: 0, ‘recent_slots_filled’: ‘0’, ‘participation_count’: 0, ‘last_irreversible_block_num’: 0, ‘vote_power_reserve_rate’: 40} database_api.get_feed_history args return {} {‘id’: 0, ‘current_median_history’: {‘base’: [‘0’, 3, ‘@@000000021’], ‘quote’: [‘0’, 3, ‘@@000000021’]}, ‘price_history’: []} database_api.get_hardfork_properties args return {} {‘id’: 0, ‘processed_hardforks’: [], ‘last_hardfork’: 0, ‘current_hardfork_version’: ‘0.0.0’, ‘next_hardfork’: ‘0.0.0’, ‘next_hardfork_time’: ‘1970-01-01T00:00:00’} database_api method args return get_order_book {‘limit’: 0} {‘asks’: [], ‘bids’: []} get_potential_signatures {‘trx’: {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: []}} {‘keys’: []} get_required_signatures {‘trx’: {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: []}, ‘available_keys’: []} {‘keys’: []} get_reward_funds {} {‘funds’: []} get_transaction_hex {‘trx’: {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: []}} {‘hex’: ‘’} database_api.get_witness_schedule args return {} {‘id’: 0, ‘current_virtual_time’: ‘0’, ‘next_shuffle_block_num’: 0, ‘current_shuffled_witnesses’: [], ‘num_scheduled_witnesses’: 240, ‘top19_weight’: 189, ‘timeshare_weight’: 31, ‘miner_weight’: 3, ‘witness_pay_normalization_factor’: 0, ‘median_props’: {‘account_creation_fee’: [‘1’, 3, ‘@@000000021’], ‘maximum_block_size’: 131072, ‘sbd_interest_rate’: 1000, ‘account_subsidy_limit’: 0}, ‘majority_version’: ‘0.0.0’, ‘max_voted_witnesses’: 240, ‘max_miner_witnesses’: 189, ‘max_runner_witnesses’: 31, ‘hardfork_required_witnesses’: 3} database_api.list_account_recovery_requests args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account’} {‘requests’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_expiration’} {‘requests’: []} database_api.list_accounts args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_name’} {‘accounts’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_proxy’} {‘accounts’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_next_vesting_withdrawal’} {‘accounts’: []} database_api.list_change_recovery_account_requests args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account’} {‘requests’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_effective_date’} {‘requests’: []} database_api.list_comments args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_cashout_time’} {‘comments’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_permlink’} {‘comments’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_root’} {‘comments’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_parent’} {‘comments’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_last_update’} {‘comments’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_author_last_update’} {‘comments’: []} database_api.list_decline_voting_rights_requests args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account’} {‘requests’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_effective_date’} {‘requests’: []} database_api.list_escrows args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_from_id’} {‘escrows’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_ratification_deadline’} {‘escrows’: []} database_api.list_limit_orders args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_price’} {‘orders’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account’} {‘orders’: []} database_api.list_owner_histories args return {‘start’: None, ‘limit’: 0} {‘owner_auths’: []} database_api.list_savings_withdrawals args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_from_id’} {‘withdrawals’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_complete_from_id’} {‘withdrawals’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_to_complete’} {‘withdrawals’: []} database_api.list_sbd_conversion_requests args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_conversion_date’} {‘requests’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account’} {‘requests’: []} database_api.list_vesting_delegation_expirations args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_expiration’} {‘delegations’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account_expiration’} {‘delegations’: []} database_api.list_vesting_delegations args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_delegation’} {‘delegations’: []} database_api.list_votes args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_comment_voter’} {‘votes’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_voter_comment’} {‘votes’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_voter_last_update’} {‘votes’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_comment_weight_voter’} {‘votes’: []} database_api.list_withdraw_vesting_routes args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_withdraw_route’} {‘routes’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_destination’} {‘routes’: []} database_api.list_witness_votes args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_account_witness’} {‘votes’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_witness_account’} {‘votes’: []} database_api.list_witnesses args return {‘start’: None, ‘limit’: 0, ‘order’: ‘by_name’} {‘witnesses’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_vote_name’} {‘witnesses’: []} {‘start’: None, ‘limit’: 0, ‘order’: ‘by_schedule_time’} {‘witnesses’: []} database_api.verify_account_authority args return {‘account’: ‘’, ‘signers’: []} {‘valid’: False} database_api.verify_authority args {‘trx’: {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: []}} return {‘valid’: False} database_api.verify_signatures args {‘hash’: ‘0000000000000000000000000000000000000000000000000000000000000000’, ‘signatures’: [], ‘required_owner’: [], ‘required_active’: [], ‘required_posting’: [], ‘required_other’: []} return {‘valid’: False} follow_api method args return get_account_reputations {‘account_lower_bound’: ‘’, ‘limit’: 1000} {‘reputations’: []} get_blog {‘account’: ‘’, ‘start_entry_id’: 0, ‘limit’: 500} {‘blog’: []} get_blog_authors {‘blog_account’: ‘’} {‘blog_authors’: []} get_blog_entries {‘account’: ‘’, ‘start_entry_id’: 0, ‘limit’: 500} {‘blog’: []} get_feed {‘account’: ‘’, ‘start_entry_id’: 0, ‘limit’: 500} {‘feed’: []} get_feed_entries {‘account’: ‘’, ‘start_entry_id’: 0, ‘limit’: 500} {‘feed’: []} get_follow_count {‘account’: ‘’} {‘account’: ‘’, ‘follower_count’: 0, ‘following_count’: 0} get_followers {‘account’: ‘’, ‘start’: ‘’, ‘type’: ‘undefined’, ‘limit’: 1000} {‘followers’: []} get_following {‘account’: ‘’, ‘start’: ‘’, ‘type’: ‘undefined’, ‘limit’: 1000} {‘following’: []} get_reblogged_by {‘author’: ‘’, ‘permlink’: ‘’} {‘accounts’: []} jsonrpc method args return get_methods {} [] get_signature {‘method’: ‘’} {‘args’: None, ‘ret’: None} market_history_api method args return get_market_history {‘bucket_seconds’: 0, ‘start’: ‘1970-01-01T00:00:00’, ‘end’: ‘1970-01-01T00:00:00’} {‘buckets’: []} get_market_history_buckets {} {‘bucket_sizes’: []} get_order_book {‘limit’: 500} {‘bids’: [], ‘asks’: []} get_recent_trades {‘limit’: 1000} {‘trades’: []} market_history_api.get_ticker args {} return {‘latest’: ‘0.00000000000000000’, ‘lowest_ask’: ‘0.00000000000000000’, ‘highest_bid’: ‘0.00000000000000000’, ‘percent_change’: ‘0.00000000000000000’, ‘steem_volume’: [‘0’, 3, ‘@@000000021’], ‘sbd_volume’: [‘0’, 3, ‘@@000000013’]} market_history_api method args return get_trade_history {‘start’: ‘1970-01-01T00:00:00’, ‘end’: ‘1970-01-01T00:00:00’, ‘limit’: 1000} {‘trades’: []} get_volume {} {‘steem_volume’: [‘0’, 3, ‘@@000000021’], ‘sbd_volume’: [‘0’, 3, ‘@@000000013’]} network_broadcast_apinetwork_broadcast_api.broadcast_block args {‘block’: {‘previous’: ‘0000000000000000000000000000000000000000’, ‘timestamp’: ‘1970-01-01T00:00:00’, ‘witness’: ‘’, ‘transaction_merkle_root’: ‘0000000000000000000000000000000000000000’, ‘extensions’: [], ‘witness_signature’: ‘000000000000000000000 000000000000000000000000000000 00000000000000000000000000000000 00000000000000000000000000000000000000000000000’, ‘transactions’: []}} return {} network_broadcast_api.broadcast_transaction args {‘trx’: {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: []}, ‘max_block_age’: -1} return {} network_broadcast_api.broadcast_transaction_synchronous args {‘trx’: {‘ref_block_num’: 0, ‘ref_block_prefix’: 0, ‘expiration’: ‘1970-01-01T00:00:00’, ‘operations’: [], ‘extensions’: [], ‘signatures’: []}, ‘max_block_age’: -1} return {‘id’: ‘0000000000000000000000000000000000000000’, ‘block_num’: 0, ‘trx_num’: 0, ‘expired’: False} tags_api method args return get_active_votes {‘author’: ‘’, ‘permlink’: ‘’} {‘votes’: []} get_comment_discussions_by_payout {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_content_replies {‘author’: ‘’, ‘permlink’: ‘’} {‘discussions’: []} tags_api.get_discussion args {‘author’: ‘’, ‘permlink’: ‘’} return {‘id’: 0, ‘author’: ‘’, ‘permlink’: ‘’, ‘category’: ‘’, ‘parent_author’: ‘’, ‘parent_permlink’: ‘’, ‘title’: ‘’, ‘body’: ‘’, ‘json_metadata’: ‘’, ‘last_update’: ‘1970-01-01T00:00:00’, ‘created’: ‘1970-01-01T00:00:00’, ‘active’: ‘1970-01-01T00:00:00’, ‘last_payout’: ‘1970-01-01T00:00:00’, ‘depth’: 0, ‘children’: 0, ‘net_rshares’: 0, ‘abs_rshares’: 0, ‘vote_rshares’: 0, ‘children_abs_rshares’: 0, ‘cashout_time’: ‘1970-01-01T00:00:00’, ‘max_cashout_time’: ‘1970-01-01T00:00:00’, ‘total_vote_weight’: 0, ‘reward_weight’: 0, ‘total_payout_value’: [‘0’, 3, ‘@@000000021’], ‘curator_payout_value’: [‘0’, 3, ‘@@000000021’], ‘author_rewards’: 0, ‘net_votes’: 0, ‘root_author’: ‘’, ‘root_permlink’: ‘’, ‘max_accepted_payout’: [‘0’, 3, ‘@@000000021’], ‘percent_steem_dollars’: 0, ‘allow_replies’: False, ‘allow_votes’: False, ‘allow_curation_rewards’: False, ‘beneficiaries’: [], ‘url’: ‘’, ‘root_title’: ‘’, ‘pending_payout_value’: [‘0’, 3, ‘@@000000021’], ‘total_pending_payout_value’: [‘0’, 3, ‘@@000000021’], ‘active_votes’: [], ‘replies’: [], ‘author_reputation’: 0, ‘promoted’: [‘0’, 3, ‘@@000000013’], ‘body_length’: 0, ‘reblogged_by’: []} tags_api method args return get_discussions_by_active {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} tags_api.get_discussions_by_author_before_date args {‘author’: ‘’, ‘start_permlink’: ‘’, ‘before_date’: ‘1970-01-01T00:00:00’, ‘limit’: 100} return {‘discussions’: []} tags_api method args return get_discussions_by_blog {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_cashout {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_children {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_comments {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_created {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_feed {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_hot {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_promoted {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_trending {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_discussions_by_votes {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_post_discussions_by_payout {‘tag’: ‘’, ‘limit’: 0, ‘filter_tags’: [], ‘select_authors’: [], ‘select_tags’: [], ‘truncate_body’: 0} {‘discussions’: []} get_replies_by_last_update {‘start_parent_author’: ‘’, ‘start_permlink’: ‘’, ‘limit’: 100} {‘discussions’: []} get_tags_used_by_author {‘author’: ‘’} {‘tags’: []} get_trending_tags {‘start_tag’: ‘’, ‘limit’: 100} {‘tags’: []} witness_api method args return get_account_bandwidth {‘account’: ‘’, ‘type’: ‘post’} {} get_reserve_ratio {} {‘id’: 0, ‘average_block_size’: 0, ‘current_reserve_ratio’: 1, ‘max_virtual_bandwidth’: ‘0’} This page is synchronized from the post: ‘API methods list for AppBase’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/api-methods-list-for-appbase/"},{"title":"beem is now AppBase ready","text":"beem has now 10,948 lines of code, 204 unit tests and a coverage of 70%. The current version is 0.19.12. beem is now ready for AppBase testing. I implemented most api calls natively (without using condenser_api). You an run the print_appbase_calls.py from the example directory of beem. You can find it on github. beem can now handle websocket and https node addresses simultanously. You can mix both type of addresses in the node list. AppBase123456from beem.steem import Steemstm = Steem(node=&quot;https://api.steemitstage.com&quot;)stm.rpc.get_signature({&quot;method&quot;: &quot;block_api.get_block&quot;}, api=&quot;jsonrpc&quot;){&apos;args&apos;: {&apos;block_num&apos;: 0}, &apos;ret&apos;: {}}stm.rpc.get_block({&quot;block_num&quot;: 1}, api=&quot;block&quot;){&apos;block&apos;: {&apos;previous&apos;: &apos;0000000000000000000000000000000000000000&apos;, &apos;timestamp&apos;: &apos;2016-03-24T16:05:00&apos;, &apos;witness&apos;: &apos;initminer&apos;, &apos;transaction_merkle_root&apos;: &apos;0000000000000000000000000000000000000000&apos;, &apos;extensions&apos;: [], &apos;witness_signature&apos;: &apos;204f8ad56a8f5cf722a02b035a61b500aa59b9519b2c33c77a80c0a714680a5a5a7a340d909d19996613c5e4ae92146b9add8a7a663eef37d837ef881477313043&apos;, &apos;transactions&apos;: [], &apos;block_id&apos;: &apos;0000000109833ce528d5bbfb3f6225b39ee10086&apos;, &apos;signing_key&apos;: &apos;STM8GC13uCZbP44HzMLV6zPZGwVQ8Nt4Kji8PapsPiNq1BK153XTX&apos;, &apos;transaction_ids&apos;: []}} You can also use the node from timcliff (this node has no block_api):1234from beem.steem import Steemstm = Steem(node=&quot;wss://appbasetest.timcliff.com&quot;)stm.get_config()[&quot;STEEM_BLOCKCHAIN_VERSION&quot;]&apos;0.19.4&apos; You can use the condenser api to be compatible with calls before 0.19.4. In order to enable this, set appbase to False in Steem.12stm = Steem(node=&quot;wss://appbasetest.timcliff.com&quot;, appbase=False)stm.rpc.get_accounts([&quot;holger80&quot;]) The rpc calls are handled in the background in all classes. New AppBase-calls are used when, the node version is 0.19.4 and when steem.appbase is set to True (default). The new assets are also handled:123456789from beem.steem import Steemfrom beem.amount import Amountstm = Steem(node=&quot;https://api.steemitstage.com&quot;)stm.get_current_median_history(){&apos;base&apos;: [&apos;3424&apos;, 3, &apos;@@000000013&apos;], &apos;quote&apos;: [&apos;1000&apos;, 3, &apos;@@000000021&apos;]}a = Amount(stm.get_current_median_history()[&apos;base&apos;], steem_instance=stm)3.424 SBDAmount(stm.get_current_median_history()[&apos;quote&apos;], steem_instance=stm)1.000 STEEM ChangesCode improvements and new examples added https://github.com/holgern/beem/commit/fba87a0789a3269648f9d497fed05cc0fa531cf1 https://github.com/holgern/beem/commit/fcda1b96ef358bf8cbb91d658f49840ae8701849 https://github.com/holgern/beem/commit/154de1ccfc03acb139456e07e71918b9d6732136 https://github.com/holgern/beem/commit/68856dad35327e060fe10b930bba100b52200932 https://github.com/holgern/beem/commit/13225ce2dd319b2398ef1045407db06d5d5cbc00 https://github.com/holgern/beem/commit/822674836c5f481d1d6ad6b7b2c2c416c23f979ebeem is now AppBase ready https://github.com/holgern/beem/commit/614c17744a4a23cd8e36cd71a70a3a055f4eb8f4Account: Add appbase calls Parse all amountsAsset Made appbase ready Supports different assets, defined in chains.pyBlock Add appbase callsBlockchain Improved get_estimated_block_num (accured search possible) Add threaded blocks method (Only a first try, has to be improved)Comments Add appbase callsDiscussions Add appbase callsMarket Add appbase callsSteem current_median_history_price -&gt; get_current_median_history get_reward_fund -&gt; get_reward_funds get_next_scheduled_hardfork -&gt; get_hardfork_properties get_hardfork_version removed get_reserve_ratio added get_witness_schedule addedTransactionbuilder appbase calls addedVote appbase calls addedWallet appbase calls addedWitness*appbase calls added WitnessesByIds removed LookupWitnesses -&gt; ListWitnessessteemnoderpc Uses now GrapheneRPC appbase property added get_use_appbase added network_version added for check which chain is used from chains.pyChains chain for appbase added assets restructured min_version added (AppBase has 0.19.4 as min_version)Graphenapi removedGraphenesrpc removedgraphenerpc added Supports websocket and https, automatic switching depending on the url (https or wss). Nodes-list can include https and wss adresses. Checks the blockchain_version, if 0.19.4 -&gt; appbase ready and appbase calls are used. Add requests structure for appbase Handing for request and websocket addedExamples benchmark_beem is ready for appbase print_appbase_calls added print_comments added watching the watchers addedUnit tests fixedExample for notify added https://github.com/holgern/beem/commit/3ee1291d0c94b3e886f0b96615b6df8ed2375bc4Bugfix release 0.19.12 https://github.com/holgern/beem/commit/65f47b02b024f5c52d0f4008788235da8fd8d51d Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘beem is now AppBase ready’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beem-is-now-appbase-ready/"},{"title":"beem is now faster than ever and batched rpc calls possible","text":"beem is a almost complete python library for steem. It is well tested with 286 unit tests and a coverage of around 77%. The library is now in beta state and its latest version is 0.19.14. Batch api calls on AppBaseBatch api calls are possible now with AppBase. If you call a Api-Call with add_to_queue=True it is not submitted but stored in rpc_queue. When a call with add_to_queue=False (default setting) is started, the complete queue is sended at once to the node. The result is a list with replies. from beem import Steem stm = Steem(&quot;https://api.steemitstage.com&quot;) stm.rpc.get_config(add_to_queue=True) stm.rpc.rpc_queue [{&apos;method&apos;: &apos;condenser_api.get_config&apos;, &apos;jsonrpc&apos;: &apos;2.0&apos;, &apos;params&apos;: [], &apos;id&apos;: 6}] result = stm.rpc.get_block({&quot;block_num&quot;:1}, api=&quot;block&quot;, add_to_queue=False) len(result) 2 Websocket performanceThe websocket performance for getting 24h on Blockchain data could be increased by using threads.28790 Blocks are fetched from wss://steemd.pieve.science in 18 minutes and 22 seconds. Using the script from https://github.com/pibara-utopian, 24h Blockchain data could be processed in 11 minutes and 23 seconds. In both cases 16 threads were used. ChangesBug fixes and more unit tests https://github.com/holgern/beem/commit/bd2d6c7cab8b3ba1edc6362ea94781a1d69f2d7b Bug fix for account Block structure changed, is alwas {‘block’: , ‘id’} now. block function removed, Block is used now Bug fix in comment Discussions_by_payout removed Several bugfixes in witness More exception added to steemnoderpc Unit tests for appbase nodes with parameterized added steemnoderpc-unittest added fix unit test and prepare release of 0.19.13 https://github.com/holgern/beem/commit/49051422ec2015c115f6fff2c987a97db82516d5 Improve code and try to fix unit test for py27 and py34 https://github.com/holgern/beem/commit/bb09a10bed2bb8ab3e7f4f1605701c8a726867bb Code improvements https://github.com/holgern/beem/commit/8804bf34624f578205c1099915db84f2dfb1d5d4 Bandit passes now, added to travis Bugfix in chain detection Bugfixes and Improvements https://github.com/holgern/beem/commit/eb09f63090b0e1ed5bcb7ae68f71ace2b70c78acAmount fix json exportBlockchain improved get_estimated_block_numComment BugfixesMarket Use FilledOrder for trades and recenttradesPrice FilledOrder fixed UpdateCallOrder and PriceFeed removedVote BugfixUnit testsMore unittests for Amount, Blockchain and comment More unit tests https://github.com/holgern/beem/commit/b4d34650d1679758479f3f21db2a3c9154bd39b8 Websocket, Graphenerpc and Notify refactored https://github.com/holgern/beem/commit/03c5d91e4a582420e1350862f66bde577f09ca57 rpcutils.py added Timestamp fixed for py27 New unit tests for test_rpcutils Block api changed and graphenerpc improved https://github.com/holgern/beem/commit/f3d5cf05346b5a364393238a5d1650f72d8cdb12Block Block contains only the json data + id for block num (removed {‘block’: , ‘id’} again) Output for appbase and non-appbase is the sameBlockchain batch-rpc-calls addedGraphenerpc multithread for websocket activated batch with queue addedBenchmark improvedUnit tests adapted Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘beem is now faster than ever and batched rpc calls possible’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beem-is-now-faster-than-ever-and-batched-rpc-calls-possible/"},{"title":"APPICS Bounty Campaign","text":"You can earn about 362 stakes, if you: Link your APPICS account to twitter, Facebook and steemit Follow APPICS in Facebook, twitter and steemit* Like all Facebook posts from APPICSYou can find the links in your APPICS account: The earned stakes are later converted to XAP token with this formula:123(Total amount of bounty campaign XAP tokens / Totalamount of bounty campaign participants‘ stakes) * Member‘sstakes About the whitepaper XAP is an SMT meta token 240.000.000 XAP tokens will be generated Vote is called like (50 Likes per day possible, 100% like reduces the liking power by 2%) No flagging, bad content is removed by moderators Donate to post author possible Transfer costs 0.001 XAP 15 categories for content Livestream for verified user Discovery page for sponser, brands and advertisers market place for verified users and brands (with percentage based fee for payment processing) Hash of the content is stored on the blockchain APPICS power is the equivalent to Steem power 65 % to content creator, 25 % to curation and 10% to the plattform Reward after 7 days Payout 50% XAP and APPICS power or 100% APPICS power NSFW is blocked and there are moderators Multiple accounts creation will be prevented by linking the APPICS account to Facebook and by mobile phone number verification APPICS is a more mainstream version of steemit, which focus on short contents. As there is no flagging, APPICS will have a hard time to fight against image plagiarism. You can see this on sola.ai, many posts contain images from the internet without taken care about any copyright. I think that APPICS is good for steemit, as all token in the ICO have to be paid with STEEM. APPICS will also attract more users and will help to increase the visibility of steemit. If you like you can use my Referral link to APPICS to participate in the bounty program. This page is synchronized from the post: ‘APPICS Bounty Campaign’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/appics-bounty-campaign/"},{"title":"update for beem: account history and testnet operation improved","text":"beem is a python library for steem. It supports HTTP and Websocket connections and is ready to use with AppBase-API calls. The current version of beem is 0.19.16. beem has 287 unit tests with a coverage of 67% - 76% (depends on how it is calculated). beem can be installed by:1pip install beem or1conda install beem and updated by1pip install -U beem or1conda update beem Statisticsconda-forge download statistic: Visitors per day on github (blue line are unique visitors): Use the testnet-server to test broadcast commandsbeem can now be used to broadcast comands with the testnet-server wss://testnet.steem.vc. At first, a new user has to be created by:1curl --data &quot;username=foo&amp;password=barman&quot; https://testnet.steem.vc/create You can use this password, to create the different keys by (username and password are from the curl command):12345678910111213141516from beemgraphenebase.account import PasswordKey, PrivateKey, PublicKeyfrom beem.steem import Steemfrom beem.account import Accountusername = &quot;&quot; # enter usernamepassword = &quot;&quot; # enter passwordstm = Steem(node=[&quot;wss://testnet.steem.vc&quot;])prefix = stm.prefix # Should be STXactive_key = PasswordKey(username, password, role=&quot;active&quot;, prefix=prefix)owner_key = PasswordKey(username, password, role=&quot;owner&quot;, prefix=prefix)posting_key = PasswordKey(username, password, role=&quot;posting&quot;, prefix=prefix)memo_key = PasswordKey(username, password, role=&quot;memo&quot;, prefix=prefix) active_privkey = active_key.get_private_key()posting_privkey = posting_key.get_private_key()owner_privkey = owner_key.get_private_key()memo_privkey = memo_key.get_private_key() You can then add these keys to the wallet (Replace 123 with a secret passphrase):1234567stm.wallet.wipe(True)stm.wallet.create(&quot;123&quot;)stm.wallet.unlock(&quot;123&quot;)stm.wallet.addPrivateKey(active_privkey)stm.wallet.addPrivateKey(owner_privkey)stm.wallet.addPrivateKey(posting_privkey)stm.wallet.addPrivateKey(memo_privkey) or by entering the Keys directly:1stm = Steem(node=[&quot;wss://testnet.steem.vc&quot;], wif={&apos;active&apos;: str(active_privkey), &apos;posting&apos;: str(posting_privkey), &apos;memo&apos;: str(memo_privkey)}) You are now ready to test beem:12account = Account(username, steem_instance=stm)account.transfer(&quot;test1&quot;, 1, &quot;STEEM&quot;, &quot;test&quot;) You can also build the broadcast call by hand:1234567891011from beem.transactionbuilder import TransactionBuilderfrom beembase.operations import Transfertx = TransactionBuilder(steem_instance=stm)tx.appendOps(Transfer(**{ &quot;from&quot;: account[&quot;name&quot;], &quot;to&quot;: &quot;test1&quot;, &quot;amount&quot;: &quot;1 STEEM&quot;, &quot;memo&quot;: &quot;test&quot;}))tx.appendSigner(account, &quot;active&quot;)tx.sign()tx.broadcast() Account historyThe account history commands were completely rewritten.There are three commands now as in python-steem: get_account_history, history, history_reverse get_account_history1get_account_history(self, index, limit, start=None, stop=None, order=-1, only_ops=[], exclude_ops=[], raw_output=False) index and limit are related to virtual_op_count. All account related transaction are yielded starting from index &gt;= limit and stop at index-limit. If order is 1, the oldest entry is the first output, otherwise for order=-1 the newest entry is given out first. The output is stopped when limit entry are submitted. Addionally, start and stop can be set to a certain date and entry before start and after stop are skipped. only_ops can be used to limit the op, e.g. only_ops=[&quot;transfer]. exclude_ops works the same way, but listed operation are excluded. If raw_output is False, the output is identical to python-steem, when using raw_output=False. history and history_reverse12345def history_reverse / history( self, start=None, stop=None, only_ops=[], exclude_ops=[], batch_size=1000, raw_output=False ) Both function are similar to get_account_history, but can be used to get all entries. When an account has 5000 ops, and batch_size is 1000, get_account_historyis called internally five times.start and stop can be int numbers or datetime dates. Lets calculate the curation reward from the last 7 days:12345678910from datetime import datetime, timedeltafrom beem.account import Accountfrom beem.amount import Amountacc = Account(&quot;holger80&quot;)stop =datetime.utcnow() - timedelta(days=7)reward_vests = Amount(&quot;0 VESTS&quot;)for reward in acc.history_reverse(stop=stop, only_ops=[&quot;curation_reward&quot;]): reward_vests += Amount(reward[&apos;reward&apos;])reward = acc.steem.vests_to_sp(reward_vests.amount) The result is slightly different from curation_stats() from python-steem, but I’m convinced that only the output of beem is correct. ChangesParallel processing improved https://github.com/holgern/beem/commit/f565c1a157f9d67906532a590c80d02f5a7db73fRefactoring and Handling of other prefix (e.g. testnet) improved https://github.com/holgern/beem/commit/b91bb17e28ff9806694bddcb5d50061c3f109412Transactionbuild Automatic Signing with owner key removedBeembase Beembase/account and beembase/bip38 removed as they are using beemgraphenebase/bip38 and beemgraphenebase/accountExamples benchmark_nodes.py and op_on_testnet.py added test_testnet.py improved https://github.com/holgern/beem/commit/9717b121292b54cea51ec342b41f243dc43e5934 Prepare next release https://github.com/holgern/beem/commit/fe6eac3a86c299c14a4e7847e940a0b9211f129a Add new example waitForRecharge.py https://github.com/holgern/beem/commit/879b2844741de8b076072ef1d5e6c3de7d426a5b Next release 0.19.16 https://github.com/holgern/beem/commit/cf1091f3637ba01ede2263d1533a47184e5375cdAccount get_withdraw_routes added get_account_votes fixed for appbase get_vote, has_voted added virtual_op_count, get_curation_reward curation_stats added get_account_history and history_reverse added history improvedBlockchain hash_op addedCLI default vote weight added upvote added Info improvedSteem get_block_interval addedTransactionbuilder txbuffer.clear() added on exceptionVote AccountVotes fixedGrapheneRPC Websocket disconnect exception handling improvedExamples Compare_With_steem_python_account.py addedUnittest tests for account improved Add more unit tests for account history https://github.com/holgern/beem/commit/a3b469e2128b5233a91b82f2e00788f0c7974721 Several improvements https://github.com/holgern/beem/commit/580e3f1fa0ab96475fe32ae04edd1ba3c39f9f6d Wallet wipe improved wallet purge and purgeWallet renamed to wipe internal node error and Unable to acquire database lock handled login to websocket only if username and password is provided Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘update for beem: account history and testnet operation improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-account-history-and-testnet-operation-improved/"},{"title":"update for beem - sign and verify operation are 200 % faster now","text":"beem is a python library for steem. It has now 316 unit tests and the current version is 0.19.17. You can find beem on github. It can be installed by:1pip install -U beem or1conda install beem Whenever a transaction should be broadcasted to the steem blockchain, the content has to be signed with the private key of the sender. It has to assure that the public key can be extracted from the signature. The public key can than be used to verify the signed transaction. This is performed by extracting the public key from the signature and comparing it with the provided one. An Elliptic Curve Digital Signature Algorithm (ECDSA) set to secp256k1 is used for both. There is a pure python implementation python-ecdsa which is used by python-steem and beem. secp256k1In order to accelerate this, secp256k1 might be installed by:1pip install secp256k1 secp256k1 has the problem that it uses a depreated way to access ffi. Without update it might stop working (last update for secp256k1 was 2016):1UserWarning: implicit cast from &apos;char *&apos; to a different pointer type: will be forbidden in the future (check that the types are as you expect; use an explicit ffi.cast() if they are correct) secp256k1 cannot be installed on windows. cryptographyThen I found cryptography which uses also openssl and was easily installable by:1pip install cryptography or1conda install cryptography So I decided to speed up signing and verification for all user who are not able to install secp256k1. Speed improvements by cryptographyThe following is the mean times from 50 times signing and verifying a Transfer operation. library beem/steem sign duration [s] verify duration [s] python-ecdsa beem 0.37 0.58 python-ecdsa steem 0.37 0.60 secp256k1 beem 0.16 0.16 secp256k1 steem 0.16 0.16 cryptography beem 0.23 0.26 beem is 166.98 % (sign) and 229.39 % (verify) faster than steem, when secp256k1 is not installed!Sending out 10 transfers can than be reduced from 9.7 seconds to 4.9 seconds. Using cryptography to speed up sign and verify operationI was then trying to replace python-ecdsa by cryptography, but it was not possible, as some functions are not implemented in cryptography. I was then replacing some parts with algorithms from cryptography and could speed up sign/verify. I’m using the following functions from cryptography:12345from cryptography.hazmat.backends import default_backendfrom cryptography.hazmat.primitives import hashesfrom cryptography.hazmat.primitives.asymmetric import ecfrom cryptography.hazmat.primitives.asymmetric.utils \\ import decode_dss_signature, encode_dss_signature sign_messageI’m using the derive_private_key function from cryptography to derive a private_key from the wif string. It has to converted into an integer first.12private_key = ec.derive_private_key(int(repr(priv_key), 16), ec.SECP256K1(), default_backend())public_key = private_key.public_key() Then I’m looping and creating new signatures until ones fits:1234567891011121314151617181920212223while True: cnt += 1 if not cnt % 20: log.info(&quot;Still searching for a canonical signature. Tried %d times already!&quot; % cnt) order = ecdsa.SECP256k1.order signer = private_key.signer(ec.ECDSA(hashes.SHA256())) signer.update(message) sigder = signer.finalize() r, s = decode_dss_signature(sigder) signature = ecdsa.util.sigencode_string(r, s, order) # Make sure signature is canonical! # sigder = bytearray(sigder) lenR = sigder[3] lenS = sigder[5 + lenR] if lenR is 32 and lenS is 32: # Derive the recovery parameter # i = recoverPubkeyParameter( message, digest, signature, public_key) i += 4 # compressed i += 27 # compact break I’m using the signer private_key.signer(ec.ECDSA(hashes.SHA256())) from cryptography. recover_public_keyIs called by recoverPubkeyParameter until the recovered pubkey is correct, if not the index i is increased by one.This function assures that the public key can be guessed from the signature.I replaced:123if not ecdsa.VerifyingKey.from_public_point(Q, curve=ecdsa.SECP256k1).verify_digest(signature, digest, sigdecode=ecdsa.util.sigdecode_string): return Nonereturn ecdsa.VerifyingKey.from_public_point(Q, curve=ecdsa.SECP256k1) by1234sigder = encode_dss_signature(r, s)public_key = ec.EllipticCurvePublicNumbers(Q._Point__x, Q._Point__y, ec.SECP256K1()).public_key(default_backend())public_key.verify(sigder, message, ec.ECDSA(hashes.SHA256()))return public_key where message is the orignal message which has to be signed as bytes representation. The rest of the function remains the same. Golos networkbeem can now be used with the golos network:123456from beem import Steemgls = Steem( node=[&quot;wss://ws.golos.io&quot;], )gls.prefix&apos;GLS&apos; beem can be used in Pydroid 3You can find Pydroid 3 on the Play store Changesecdsa improved with cryptography https://github.com/holgern/beem/commit/ea5f3cad6f85229ec0d57475e40e3005cb60e5faAccount Improved some function, so that account works limited on GOLOSBlockchain sync changes from python-bitsharesInstance sync changes from python-bitsharesSteem Improved some functions so that steem works on GOLOSChains Added GOLOSgraphenebase/Account derive256address_with_version addedecsdasig Huge speed improvement (200%) by using cryptographybenchmark added benchmark for beemgraphenebase/account funcions benchmark for ecdsa benchmark for sign/verification of all transactionExamples compare sign/verificaiton speed with steemUnit tests use memo unittests from steem-js add key_format unittests from steem-js Improved the ecdsa tests add test_golos https://github.com/holgern/beem/commit/0d61daab346dd79e0196988df4ef4968ff658781 Fix bug in transactionbuilder https://github.com/holgern/beem/commit/96634446b68e7e1fb8440e45b4da1186a22141f7 secp256k1 is faster than cryptography and put first Improve module loading https://github.com/holgern/beem/commit/f7d5a13f65276e32eb8497f6ad75717cdf30ad1a fix unit tests Fix unit tests by cleaning Wallet.keys https://github.com/holgern/beem/commit/fd63004044266f05d0ce1e1ddde54532a1eab0d2 Clear Wallet.keys when setting new ones https://github.com/holgern/beem/commit/f6305b88fdcbf134f237f7ce1ca8849f595539d8 Fix unit tests for python 2.7 Account votes improved for appbase Fix small bug in ecdsasig https://github.com/holgern/beem/commit/ad5bef2c17481c6302a360100d0c40ecfb9eac33 Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘update for beem - sign and verify operation are 200 % faster now’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-sign-and-verify-operation-are-200-faster-now/"},{"title":"Let community projects upvote your great posts - update 03-2018","text":"sourceYou can find my last report about community projects here. I added a more detailed summary about the supporting steemit account in this update. You can see the effective Steem power, the 100% upvote value, the number of votes per day and the mean vote value. Community project without any or only one-time payment for lifetime membership Project Name Register/Discord/Obligation Supported by Benefit utopian.io Go to utopian.io and contribute / Discord / follow the rules @utopian-io 3869334.32 SP (520.17 $) 138 votes/day with 33.93 $ Upvote when your contribution is accepted Minnow Support Project Send 0.001 SBD/STEEM with memo / Discord / Follow the rules @minnowsupport 118600.88 SP (15.94 $) 1481 votes/day with 0.16 $ Upvotes every 42h Qurator 1190 members Send 4 Steem to @qurator (lifetime) / Discord / High quality posts @qurator 111831.86 SP (15.03 $) 370 votes/day with 0.44 $ Daily upvote STEEM Engine Resteem and upvote of the latest post / Discord / 100% upvote of all posts @thesteemengine 3950.75 SP (0.53 $) 38 votes/day with 0.16 $ @ethandsmith 10132.03 SP (1.36 $) 105 votes/day with 0.14 $ Daily upvote after participating in post-promotion MAKE-A-WHALE 71 members Not possible now / / Upvote all posts @make-a-whale 21496.53 SP (2.89 $) 45 votes/day with 0.83 $ Upvote every 22 h of new posts Feed Your Minnows BOT 272 members Pay 2 Steem/SBD for a lifetime membership, or upvote all posts with at least 0.01$ and leave a comment with #feedme. @feedyourminnows 3936.90 SP (0.53 $) 131 votes/day with 0.06 $ Upvote every 24 hours steem basic income Pay shares / Discord / reputation above 20 @steembasicincome 10712.46 SP (1.44 $) 191 votes/day with 0.07 $ @sbi2 3454.22 SP (0.46 $) 301 votes/day with 0.02 $ @sbi3 2853.98 SP (0.38 $) 276 votes/day with 0.01 $ @sbi4 980.78 SP (0.13 $) 263 votes/day with 0.00 $ Upvote of Posts and comments Steemdunk Register / Discord @steemdunk 11462.79 SP (1.54 $) 66 votes/day with 0.33 $ Upvote of posts the human bot Post your link in the comment section of the newest post / / post guidelines @thehumanbot 342.25 SP (0.05 $) 4 votes/day with 0.05 $ manually selected posts will resteemted and upvoted Resteemable 1. Navigate to any Steemit.com Article - 2. Erase “https://“ - 3. Type “re” - 4. Get an Instant Upvote &amp; Resteem @resteemable 1539.13 SP (0.21 $) 384 votes/day with 0.00 $ Upvote &amp; Resteem &amp; Leaves a comment Community project on which each vote has to be paid Name How to Use / Notes Supported by Vote in Return Manual Curation from @kobusu and @mariachan 0.1 Sbd/Steem to @kobusu / High-quality post @kobusu 1048.96 SP (0.14 $) 15 votes/day with 0.10 $ @mariachan 145.15 SP (0.02 $) 16 votes/day with 0.02 $ Upvote and resteem of your post with 0.12+$. Steemdunk 0.2 SBD to @steemdunk / Upvotes when Voting power is at least 70 % @steemdunk 11462.79 SP (1.54 $) 66 votes/day with 0.33 $ 275%, leaves a comment qustodian 0.5 SBD to @qustodian / Membership at Qurator @qustodian 13791.35 SP (1.85 $) 40 votes/day with 0.80 $ 265% vote value in return randowhale 1 SBD to @randowhale / Upvotes when Voting power is at least 99 % @randowhale 406774.86 SP (54.64 $) 211 votes/day with 2.09 $ Random vote power bumper 0.1 - 0.5 SBD to @bumper / Votes with 3 days delay / Discord @bumper 34578.67 SP (4.65 $) 54 votes/day with 1.01 $ 230% vote value in return minnowbooster 0.001 - 90 SBD to @minnowbooster @minnowbooster 1175413.67 SP (157.90 $) 47 votes/day with 57.41 210% vote in return smartsteem Send SBD/STEEM to @smartmarket @smartsteem 1713363.28 SP (230.16 $) 195 votes/day with 12.08 $ 200% vote in return Do you know other great projects? Please let me know. This page is synchronized from the post: ‘Let community projects upvote your great posts - update 03-2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/let-community-projects-upvote-your-great-posts-update-03-2018/"},{"title":"My first Zappl","text":"I’m on vacation at the moment. I have only my phone with me. At the moment, I’m sitting in a caf� with free Wi-Fi; time to test some steemit apps for Android.This is my first zappl and i have stop writing now, as I reached the word limit. This page is synchronized from the post: ‘My first Zappl’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/my-first-zappl/"},{"title":"steemit.com is finally verified by Cryptonite by MetaCert","text":"A while ago, I asked in the telegram group of MetaCert, if steemit.com could be included in the list of verified crypto sites.The CEO Paul Walsh replied that he will take a look. Now the MetaCert Chrome extension turns green when visiting steemit.com. Here you can see the extension in action: My advice is that everyone should install Cryptonite by Metacert for being protected against phishing sites! You can find the extension here: chrome / brave firefox Metacert plans to use META token as payment for their service in the future. At the moment, the extension is completely free. You will receive also 360 META token as an early user so that you can use the extension for one year for free at least. This page is synchronized from the post: ‘steemit.com is finally verified by Cryptonite by MetaCert’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemit-com-is-finally-verified-by-cryptonite-by-metacert/"},{"title":"steem-feedstock for conda updated to version 1.0.0","text":"A new version was released for steem-python. I updated the conda-feedstock for steem, so that steem can be easily installed with: 1conda install steem conda-forge has to be added once:1conda config --add channels conda-forge Using conda, is the easiest way to install steem on windows. The second advantage is that all cli-tools work out of the box! Without using conda, the cli-tools steempy, piston and steemtail are not callable directly. For steempy for example, conda creates a steempy.exe and a steempy-script.py inside the Scripts directoy of Anaconda/Miniconda. Just start the Anaconda Prompt and enter steempy , as you can see in the screenshot: ChangesThe following changes are merged into PR #2 Fix entry pointshttps://github.com/conda-forge/steem-feedstock/commit/8b09f5d54b41d68624d0dd01c8af2ff75f5a4168 fix conflict https://github.com/conda-forge/steem-feedstock/commit/7f3db590a3151bb902017410b27caa7dc25c2559Remove some packages https://github.com/conda-forge/steem-feedstock/commit/48848e896dafdf9a199811137b14da1c8ab642e9fix missing package https://github.com/conda-forge/steem-feedstock/commit/44110f071ca1999df1302663c13f5038d90663b2New release 1.0.0 https://github.com/conda-forge/steem-feedstock/commit/8e2bcde32ad1559c459c6acfdad71e8b5cb86805 Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘steem-feedstock for conda updated to version 1.0.0’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-feedstock-for-conda-updated-to-version-1-0-0/"},{"title":"steem full node statistics with beem","text":"I checked the following nodes:123456nodes = [&quot;wss://steemd.pevo.science&quot;, &quot;wss://gtg.steem.house:8090&quot;, &quot;wss://rpc.steemliberator.com&quot;, &quot;wss://rpc.buildteam.io&quot;, &quot;wss://rpc.steemviz.com&quot;, &quot;wss://seed.bitcoiner.me&quot;, &quot;wss://node.steem.ws&quot;, &quot;wss://steemd.steemgigs.org&quot;, &quot;wss://steemd.minnowsupportproject.org&quot;, &quot;https://api.steemit.com&quot;, &quot;https://rpc.buildteam.io&quot;, &quot;https://steemd.minnowsupportproject.org&quot;, &quot;https://steemd.pevo.science&quot;, &quot;https://rpc.steemviz.com&quot;, &quot;https://seed.bitcoiner.me&quot;, &quot;https://rpc.steemliberator.com&quot;, &quot;https://steemd.privex.io&quot;, &quot;https://gtg.steem.house:8090&quot;, &quot;https://api.steem.house&quot;, &quot;https://rpc.curiesteem.com&quot;] with the script benchmark_nodes.py from https://github.com/holgern/beem/blob/master/examples/benchmark_nodes.py. The script depends on the unreleased version 0.19.19 for beem, which is my python library for steem. This script measures: how long ten blockchains minutes need to be extracted how long 10000 account operation need to be extracted (I took the account from gtg) The current version of the node is also saved. When the node is reachable, it is added to the table below. Ten blockchain minutes are equivalent to 200 blocks. So I measure the time to extract 200 blocks. I’m not using threads or batched calls for this. I did the same for 10000 account operations. The times are given in hours:minutes:seconds. node 10 blockchain minutes 10000 virtual account op version wss://steemd.pevo.science 0:00:12 0:00:15 0.19.2 wss://gtg.steem.house:8090 0:00:16 0:00:20 0.19.2 wss://rpc.steemliberator.com 0:00:55 0:01:02 0.19.2 wss://rpc.buildteam.io 0:00:11 0:00:15 0.19.2 wss://rpc.steemviz.com 0:00:10 0:00:12 0.19.2 wss://steemd.minnowsupportproject.org 0:00:10 0:00:15 0.19.2 https://api.steemit.com 0:01:59 0:02:12 0.19.4 https://rpc.buildteam.io 0:01:23 0:01:40 0.19.2 https://steemd.minnowsupportproject.org 0:03:32 0:03:53 0.19.2 https://steemd.pevo.science 0:05:05 0:05:26 0.19.2 https://rpc.steemviz.com 0:01:50 0:02:21 0.19.2 https://rpc.steemliberator.com 0:06:10 0:07:05 0.19.2 https://steemd.privex.io 0:07:36 0:08:28 0.19.2 https://gtg.steem.house:8090 0:02:27 0:02:51 0.19.2 https://api.steem.house 0:01:28 0:01:38 0.19.4 You can see that Websocket connection are much faster than https rpc calls, when not using any threads or batched calls. The official steem-python library does not support websocket connections. If you want to try if a websocket connection is faster, you can try my steem library beem. You can find it on github. Do you know other full nodes, that I have forgotten? Please let me know! This page is synchronized from the post: ‘steem full node statistics with beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-full-node-statistics-with-beem/"},{"title":"Logo request for beem - a python library for steem","text":"beem is a python library for steem. The library name beem is derived from a beam engine. DetailsTherefore, the logo should be in context with a beam engine. As the library is a pure python library, the python logo should also be integrated.The python logo can be found here: https://www.python.org/community/logos/.Image of a beam engine: The image was taken from wikipedia Requirements The beam bar (part E on the image) is the only important part and must be recognizable. The two snakes from the python logo must be integrated The logo must have a clean and minimalistic look. The logo must be visible on black and on white background. The logo must be provided in png-format with (1024x1024) and should be provided in a common vector format (.svg/.pdf/.eps). ComponentsThe logo will be visible on the documentation of beem and will be used on post about beem. DeadlineSubmitions are accepted withing 11 April 00:00 UTC to 13 April 23:59 UTC CommunicationYou can leave comments on the post or contact me on discord holger80#3688. Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Logo request for beem - a python library for steem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/logo-request-for-beem-a-python-library-for-steem/"},{"title":"Update for beem - coverage improved and other improvements","text":"beem is a python library for accessing the steem blockchain. I build beem from scratch using python-bitshares as template. At the moment, beem is not really used, as the github has around 1 unique visitor each day and thats maybe me. The newest version of beem is 0.19.19. I created a discord channel for answering question or discussing beem: https://discord.gg/4HM592V beem is not a copy of python-steem, thus the classes and functions are different. beem is almost feature complete and should be able to do all things that python-steem can do. Differences to python-steem: beem python-steem websocket nodes yes no native appbase calls yes no python 2.7 supportet yes yes python 3.3 supportet yes no python 3.4 supportet yes no python 3.6 supportet yes yes number of unit tests 340 70 coverage 75 % - 83% ? can be used on android yes no I decided to create an own library for steem and not participating to python-steem by pull-requests for the following reasons: as python-steem is the official library, all changes have to be reviewed carfully. This takes a lot of time. python-steem is used by many, therefore it is not possible to change classes or functions easily. I like it to have my own repo, in which I can do what I want :). beem is open source, so my work may improve python-steem. ChangesSync changes from python-graphenelib https://github.com/holgern/beem/commit/e9f07b48478c0f59ae625ef397c4a727d44723f0Remove register_api and api_id calls https://github.com/holgern/beem/commit/69948415b7fc403e11a3198066e3cc3d8f4100e2 All rpc calls are handled with direct api call. Register api was a relict from bitshares.Import Wallet changes from bitshares and bug fixes https://github.com/holgern/beem/commit/af565903fe916f35c15e28165a5efda48d9bc0f2 Nodes can be given as ,or ; seperated string is_connected added in steemRemoved not used classes https://github.com/holgern/beem/commit/f8f33b3426d76683d7ea38235e0c0a55fe8b2128Improved test coverage https://github.com/holgern/beem/commit/8559d6da01907f8fe2bc348bf5cb7009fc1f64a2 Fix vote tests improved transactionbuilder tests Improved detection of MissingRequiredActiveAuthoritySeveral changes and improvements https://github.com/holgern/beem/commit/cdd778096a04cf4b922b67a54b6028fa6f9299a1 Fix blocks for threaded and batched calls add blockchain_version function on steem Fix node input on graphenerpc Improve benchmark_nodes Add unit tests for bateched and threaded blocks calls Use https://api.steemit.com as default appbase nodeUpdate test_steemnoderpc.py https://github.com/holgern/beem/commit/68cad02f65701c31a63472606824b906432f1fecFix depreated function warning https://github.com/holgern/beem/commit/e3262e45bfa809381c7cc9422059e1165b3a71ee Improve blockchain unittestsImprove coverage of test_cli https://github.com/holgern/beem/commit/712a81745c2fe35cad05fc2447592cd06b362e9aImprove coverage for Price https://github.com/holgern/beem/commit/c3fb3fccde1866cc995a9c87663c378f5230937cMove post and comment_options to steem class https://github.com/holgern/beem/commit/9fb1330590c25736adcbe74040a093a82d446189 RecentReplies improved Comment init improved test coverage for comment and steem improved.Improve coverage for steem https://github.com/holgern/beem/commit/de8527ffd04f6cac5698438b7929726ecb79d65cRemove steemitstage and improve coverage for steemnoderpc https://github.com/holgern/beem/commit/988ff02990eccc42dfdd072ab9c772760bcbb96dImprovements for blockchain parameter reading and nodes benchmark https://github.com/holgern/beem/commit/582f3414cc9b6ac2e3fed8899acd8bb172b880afsteem Robustify reading of blockchain parametersutils improve formatTimedelta outputExamples improve benchmark_nodes by added account historySpeedup wait_for_and_get_block https://github.com/holgern/beem/commit/421627a93cb8f12f814aaea654919b7e19e9fc3fblockchain reduced times in which get_current_block_num is called when last_fetched_block_num is given, get_current_block_num is only called when block_number is greater than last_fetched_block_numstorage default nodes list enhancedsteemnoderpc Service Temporarily Unavailable and Bad Gateway added to exception detectiongraphenerpc check for Service Temporarily Unavailable and Bad Gateway Improved handling of Client returned invalid format. Expected JSON! when output is intUnit test test_utils fixednum_retries improved https://github.com/holgern/beem/commit/3ff0b8904bdf36acd8467fcf90cd2bd28e87f45eSteemnoderpc self.errror_cnt_call used instead of local variable doRetryCountGraphenerpc num_retries_call added for setting a max number of retries on a rpc call self.n_urls added for getting the number of given nodes sleep on retry removed, when switching over to the next nodeself.error_cnt_call used for counting rpc call retriesrpcutils sleep_and_check_retries improvedUnit tests num_retries added test_golos reducedAdd option to set block_numbers as start and stop in history and history revers https://github.com/holgern/beem/commit/8fc729be60c8c61439e70356f71304498d7eae27Account add option use_block_num to history, history_reverse and get_account_historyReduce duplicate code https://github.com/holgern/beem/commit/8d6478e7eb2a9fc4e6d4e55359088e6dca431fc6Wallet reduce code duplicationoperations reduce code duplication Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem - coverage improved and other improvements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-coverage-improved-and-other-improvements/"},{"title":"How to easily get the markdown source from any post without programming","text":"Do you want to get your markdown source from your old post? Or you want to learn markdown by taking a look on other posts and their markdown source? Install a json viewer on your browserI’m using the open-source extension json-viewer Viewing postsExtracting the markdown code add .json to the steemit url of a post. copy everything after body&quot;: between &quot; and &quot;, All newlines are replaced by \\n, so you can replace all \\n by a newline. You can do this with notepad++ for example. Replace \\n with a line break Open notepad++ and copy the source. Open Replace or press STRG+h and use the following settings: Press replace all ExampleEnter into your browser: https://steemit.com/steem/@steemitblog/dev-portal-update-new-steem-developer-resources.json.You see then something like: Replace all \\n with notepad++ and copy everything to an editor of your choice. Now, you can take a look at the source code: Viewing accountsYou can also take a look on the raw data of an account. Take a look on an account add .json to the steemit url of an account. ExampleEnter into your browser: https://steemit.com/@steemitblog.json I hope this short information was helpful for you. For me this is very useful and I did not know this for a long time. Now, I can easily copy some parts from the markdown code of my old post. This page is synchronized from the post: ‘How to easily get the markdown source from any post without programming’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-easily-get-the-markdown-source-from-any-post-without-programming/"},{"title":"Review of swiftdemand - blockchain based Universal Basic Income","text":"swiftdemand is a platform that provides swift as universal basic income. At the moment swifts are stored centralized on the webpage and cannot be transferred. It can be used to buy something on the internal market place. Each user receives 100 swift a day. The swift has to be claimed manually by going to the website. As soon as the swift blockchain is working, all swifts are converted at a 1:1 ratio. ICOswiftdemand starts a token sale right now. A token sale on a UBI token does not make so much sense to me, but the development and the servers have to be paid of course. The token price is determined by a dutch auction starting at 1 ETH = 5,000 SFT. The price is going down every 10 minutes until 1 ETH = 1,000,000 SFT is reached. 200,000,000 SFT are available in this ICO. You have register today (8.4.2018, 18:00 UTC) if you want to participate. DevelopmentThey forked their protocol from neo-project/neo, so swift seems to be an NEO based blockchain.You can see the fork state here:Until now, there is not much activity there. Only some comments are translated into english.There is maybe a non-public development in the background. As I can see, nothing substantial was uploaded to github yet. There is also a modified copy of neon-wallet available: https://github.com/zaguios/swift-js WhitepaperYou can find the whitepaper on github. Not mention NEO, only EOS as a reference how many TPS are possible. 4 different account types: Swift Citizens Swift Entities Delegated Nodes Identity Providers Each user has to be validated by Identity Providers to become a Swift Citizens and can vote for Delegated Nodes Two phases of the income distribution Each day each user receive 1 &lt;= (781250 / (5^(log10(users))) &lt;= 100. After the 70 Billion cap has been reached, income is taken from inflation. The inflation rate is decided by delegated nodes. The income is multiplied by Region Multiplier (0.01x to 1.0x) SummaryInteresting realization of providing universal basic income to everyone. A good solution to the problem that user has to be verified in order to prevent abuse is implemented. The swift blockchain is decentralized and controlled by Delegated Nodes which are elected by swift citizen . At the moment there is only a whitepaper and a website. It is not clear how the swift protocol is realized. What do you think about swiftdemand and their ICO? When you register through my Referral Link:https://www.swiftdemand.com/?referred_by=holger80i will receive 500 swift. This page is synchronized from the post: ‘Review of swiftdemand - blockchain based Universal Basic Income’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/review-of-swiftdemand-blockchain-based-universal-basic-income/"},{"title":"Full API node statistics with beem - April 10th 2018","text":"source Complete node listThere are several lists of public nodes, but none of them is complete: steem.io (8 nodes) steem.center (10 nodes) steemistry.com (10 nodes) geo.steem.pl (13 nodes) I have a list of 15 nodes. Please let me know if something is wrong or missing. All nodes have support for https://. For nodes with websocket support (WSS is yes), wss:// has to put in front. Server WSS Ran By Version steemd.privex.io yes @privex 0.19.2 steemd.pevo.science yes @pharesim 0.19.2 rpc.steemliberator.com yes @netuoso 0.19.2 rpc.buildteam.io yes @themarkymark 0.19.2 gtg.steem.house:8090 yes @gtg 0.19.2 rpc.steemviz.com yes @ausbitbank 0.19.2 seed.bitcoiner.me yes @bitcoiner 0.19.2 steemd.steemgigs.org yes @steemgigs 0.19.2 steemd.minnowsupportproject.org yes @followbtcnews 0.19.2 rpc.curiesteem.com no @curie 0.19.2 api.steem.house no @gtg 0.19.4 appbasetest.timcliff.com yes @timcliff 0.19.4 api.steemit.com no Steemit Inc. 0.19.4 steemd.steemitstage.com no Steemit Inc. 0.19.4 steemd.steemitdev.com no Steemit Inc. 0.19.4 Working nodeA node is listed, when: blocks can be streamed account history is possible votes, a comment and an account can successfully be fetched. It is measured how many blocks and how many account operation can be streamed in 15 seconds. The third parameter is the mean duration in seconds for the rpc calls to fetch account, comment and votes data. The following statistics were gained with beem. nodes which are supporting websockets are tested with wss:// and https://. When a node with websocket connection passed all tests, he is listed with an x in WSS. When a node with https:// connection passed all tests, he ist listed without x in WSS. Statistics Server WSS blocks in 15 s account op in 15 s duration for rpc call in s steemd.privex.io x 182 29030 0.02 steemd.pevo.science x 202 39040 0.13 rpc.buildteam.io x 196 53054 0.04 rpc.steemviz.com x 202 55056 0.03 steemd.minnowsupportproject.org x 202 49050 0.02 rpc.buildteam.io 34 6007 0.16 steemd.minnowsupportproject.org 14 4005 0.70 steemd.pevo.science 9 4005 0.14 rpc.steemviz.com 26 5006 0.36 steemd.privex.io 1 1 9.45 api.steem.house 1 1 0.38 api.steemit.com 24 12013 0.47 At the moment only 7 from 15 available full API nodes are working. This page is synchronized from the post: ‘Full API node statistics with beem - April 10th 2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/full-api-node-statistics-with-beem-april-10th-2018/"},{"title":"Update for beem - transactionbuilder and SteemNodeRPC  improved","text":"beem is a python library for steem. The newest version is 0.19.21. There are now 363 unit tests with a coverage of 84%. Running all tests takes about one hour. I created a discord channel for answering question or discussing beem: https://discord.gg/4HM592V I requested a logo for beem, you can participate and submit here until 13 April 23:59 UTC. GrapheneRPC and SteemNodeRPC improvedThanks to the node issues, exception handling could be greatly improved. The error count is now indviduall for each node. Every time an error was observed, the error count for the specific node is increased and the next node from the list is used. There is num_retries which is normally deactivated (-1), but when set, NumRetriesReached is raised when one node is in the list and NumRetriesReached errors are observed more than one node is in the list and node x was used NumRetriesReached times and everytime an error occured. The other nodes are also faulty and therefore node x was tried NumRetriesReached times. num_retries_call is newly introduced and normally set to 5. When an RPC call was not successfully and the error means that it could work when retrying, error_cnt_call is increased and the same call is retried. Only when num_retries_call is reached, the next node is used. The error count for num_retries_call is resetted after each sucessfull RPC call. Different kind of server errors are parsed now and handled. Calculate the needed voting percentage for certain rsharesrshares_to_vote_pct was added to the steem class. A vote with 1e9 rshares should be casted. The voter has 500 Steem Power and 93% voting power left. What is the needed vote percentage?1234from beem import Steemstm = Steem()stm.rshares_to_vote_pct(1e9, steem_power=500, voting_power=9300)537 The vote should be casted with 5.37%. Transactionbuilder improvedThanks to the unit tests from @leprechaun, I could improve the Transactionbuilder in the newest version of beem. A transaction is a JSON structure and consists of expiration ref_block_num ref_block_prefix operations extensions signatures Here you can see an example for a transfer transaction:12345{&apos;expiration&apos;: &apos;2018-04-09T15:35:21&apos;, &apos;ref_block_num&apos;: 12523,&apos;ref_block_prefix&apos;: 2784763404,&apos;operations&apos;: [[&apos;transfer&apos;, {&apos;from&apos;: &apos;user_a&apos;, &apos;to&apos;: &apos;user_b&apos;, &apos;amount&apos;: &apos;0.010 SBD&apos;,&apos;memo&apos;: &apos;hello&apos;}]],&apos;extensions&apos;: [], &apos;signatures&apos;: []} A transaction is build by the TransactionBuilder and can only be broadcast to the blockchain, when it is correctly signed. A transfer transaction must be signed by the active private key of the sender and broadcasted before expiration. There is the possibility to add other accounts, that are able to or must sign. The transaction can then be transmitted when at least weight_threshold accounts from the list signed the transaction.For example, the account of user user_a has for its active key one addional user user_c which must also sign all transaction, as the weight_threshold is 2. 12account[&quot;active&quot;] = {&apos;weight_threshold&apos;: 2, &apos;account_auths&apos;: [[&apos;user_c&apos;, 1]], &apos;key_auths&apos;: [[&apos;STM...&apos;, 1]]} Using a wallet or notThe functions: appendSigner addSigningInformation appendMissingSignatures can only be used when private keys were stored in the wallet.Whenever the keys should be set directly, only appendWif must be used. Sign transactions with beem without using the wallet and build the transaction by handWhen not using the wallet, the transaction has to build by hand. 123456789101112from beem import Steemfrom beem.transactionbuilder import TransactionBuilderstm = Steem()tx = TransactionBuilder(steem_instance=stm)tx.appendOps(Transfer(**{&quot;from&quot;: &apos;user_a&apos;, &quot;to&quot;: &apos;user_b&apos;, &quot;amount&quot;: &apos;1.000 SBD&apos;, &quot;memo&quot;: &apos;test 2&apos;}))tx.appendWif(&apos;5.....&apos;) # `user_a`tx.appendWif(&apos;5.....&apos;) # `user_c`tx.sign()tx.broadcast() When user_a and user_c should not share their password, the last 4 lines become:123456789tx.appendWif(&apos;5.....&apos;) # `user_a`tx.sign()tx.clearWifs()tx_json = tx.json()# Send the tx_json structure to `user_c` and be sure that `tx_json[&quot;expiration&quot;] is in the future.tx = TransactionBuilder(tx=tx_json, steem_instance=stm)tx.appendWif(&apos;5.....&apos;) # `user_c`tx.sign(reconstruct_tx=False)tx.broadcast() tx.sign(reconstruct_tx=False) does not delete the signature from user_a. Using the walletWhen using the wallet, high level functions as beem.account.transfercan be used. The keys can be stored permanent or temporary. Setting a password and store the keys permanentLet’s assume the wallet is ready and a wallet-password is set. If not, a wallet can be started from zero with:1234from beem import Steemstm = Steem()stm.wallet.wipe(True)stm.wallet.create(&quot;secret_password&quot;) In this case, we are taking the example from above, where user_a and user_c has to sign.At the first time, the private keys must added to the wallet:123stm.wallet.unlock(&quot;secret_password&quot;)stm.wallet.addPrivateKey(&quot;5............&quot;) # active private key from user_astm.wallet.addPrivateKey(&quot;5............&quot;) # active private key from user_c Storing the keys temporaryBoth private keys are stored temporary in the wallet, when they are given to the Steem class by:12from beem import Steemstm = Steem(keys=[&quot;5............&quot;, &quot;5............&quot;]) # active keys from user_a and user_c The keys are stored in stm.wallet.keys and can be deleted by stm.wallet.clear_local_keys().With stm.wallet.setKeys(&apos;5....&apos;) new keys can be added to the temporary storage. Using account.transferNow, we can start to broadcast a transaction (transfer 1 SBD from user_a to user_b with memo “test”):123456from beem.account import Accountfrom beem import Steemstm = Steem()stm.wallet.unlock(&quot;secret_password&quot;)acc = Account(&quot;user_a&quot;, steem_instance=stm)acc.transfer(&quot;user_b&quot;, 1, &quot;SBD&quot;, memo=&quot;test&quot;) When the keys should be stored only temporary, it can be done by replacing:12stm = Steem()stm.wallet.unlock(&quot;secret_password&quot;) with12from beem import Steemstm = Steem(keys=[&quot;5............&quot;, &quot;5............&quot;]) # keys from user_a and user_c The transfer function automatically detects that the transaction has to be signed by user_a and user_c and searching for the keays in the wallet. When all were found, the transaction is signed and broadcasted. Build your Transaction by hand123456789101112from beem.transactionbuilder import TransactionBuilderfrom beem import Steemstm = Steem()stm.wallet.unlock(&quot;secret_password&quot;)tx = TransactionBuilder(steem_instance=stm)tx.appendOps(Transfer(**{&quot;from&quot;: &apos;user_a&apos;, &quot;to&quot;: &apos;user_b&apos;, &quot;amount&quot;: &apos;1.000 SBD&apos;, &quot;memo&quot;: &apos;test 2&apos;}))tx.appendSigner(&apos;user_a&apos;, &apos;active&apos;)tx.sign()tx.broadcast() It is detected that user_c is needed and automatically added. The private keys can also be stored temporary as in the example above. Offline signing with two different walletsuser_astm.wallet contains now only the active key of user_a1234567891011121314from beem.transactionbuilder import TransactionBuilderfrom beem import Steemstm = Steem()stm.wallet.unlock(&quot;secret_password&quot;)tx = TransactionBuilder(steem_instance=stm)tx.appendOps(Transfer(**{&quot;from&quot;: &apos;user_a&apos;, &quot;to&quot;: &apos;user_b&apos;, &quot;amount&quot;: &apos;1.000 SBD&apos;, &quot;memo&quot;: &apos;test 2&apos;}))tx.appendSigner(&apos;user_a&apos;, &apos;active&apos;)tx.addSigningInformation(&quot;user_a&quot;, &quot;active&quot;)tx.sign()tx.clearWifs()tx_json = tx.json() tx_json is now sended to user_c user_cstm.wallet contains now only the active key of user_c12345678from beem.transactionbuilder import TransactionBuilderfrom beem import Steemstm = Steem()stm.wallet.unlock(&quot;secret_password&quot;)tx = TransactionBuilder(tx=tx_json, steem_instance=stm)tx.appendMissingSignatures()tx.sign(reconstruct_tx=False)tx.broadcast() Offline signing with two different wallets storing the keys temporaryuser_astm.wallet is now empty.12345678910111213from beem.transactionbuilder import TransactionBuilderfrom beem import Steemstm = Steem(keys=[&quot;5............&quot;]) # keys from user_atx = TransactionBuilder(steem_instance=stm)tx.appendOps(Transfer(**{&quot;from&quot;: &apos;user_a&apos;, &quot;to&quot;: &apos;user_b&apos;, &quot;amount&quot;: &apos;1.000 SBD&apos;, &quot;memo&quot;: &apos;test 2&apos;}))tx.appendSigner(&apos;user_a&apos;, &apos;active&apos;)tx.addSigningInformation(&quot;user_a&quot;, &quot;active&quot;)tx.sign()tx.clearWifs()tx_json = tx.json() tx_json is now sended to user_c user_cstm.wallet contains now only the active key of user_c1234567from beem.transactionbuilder import TransactionBuilderfrom beem import Steemstm = Steem(keys=[&quot;5............&quot;]) # keys from user_ctx = TransactionBuilder(tx=tx_json, steem_instance=stm)tx.appendMissingSignatures()tx.sign(reconstruct_tx=False)tx.broadcast() Store streamed blocks in gzipped text filesI added a script which using pickle to serialize a block and then creates a hex number of it.This line is then written as gzipped text file. One blockchain hour needs around 7 MB of disk space.The advantage of this approach is that each line belongs to one block.The example can be found here: https://github.com/holgern/beem/blob/master/examples/write_blocks_to_file.py 123456789101112131415161718192021222324252627282930from binascii import hexlify, unhexlifyimport gzipfrom datetime import datetime, timedeltafrom beem.blockchain import Blockchaintry: from cPickle import dumps, loadsexcept ImportError: from pickle import dumps, loadsdef s_dump_binary(elt_to_pickle, file_obj): pickled_elt_str = dumps(elt_to_pickle) file_obj.write(hexlify(pickled_elt_str)) file_obj.write(bytes(&apos;\\n&apos;.encode(&quot;latin1&quot;)))def s_load_binary(file_obj): for line in file_obj: elt = loads(unhexlify(line[:-1])) yield eltif __name__ == &quot;__main__&quot;: blockchain = Blockchain() threading = True thread_num = 8 cur_block = blockchain.get_current_block() stop = cur_block.identifier startdate = cur_block.time() - timedelta(seconds=3600) start = blockchain.get_estimated_block_num(startdate, accurate=True) outf = gzip.open(&apos;blocks1.pkl&apos;, &apos;w&apos;) blocks = 0 for block in blockchain.stream(opNames=[], start=start, stop=stop, threading=threading, thread_num=thread_num): s_dump_binary(block, outf) The block data can be read by: 12for block in s_load_binary(gzip.open(&apos;blocks1.pkl&apos;)): print(block) Full API node benchmark scriptI added under examples a benchmark script benchmark_nodes2.py from which the results can be seen in this post: full-api-node-statistics-with-beem-april-10th-2018 Changesrpc improvements https://github.com/holgern/beem/commit/2011b8ea5df03d9b9782b44b9de80bc204c462a0account function for reputation to score calculation Doku improvedamount better handling of offline modesteem Doku improvedtransactionbuilder handing of appbase for tx verify and broadcast improvedutils node list added as function not needed function removedsteemnoderpc handling of server errors improvedobjects Amount fixed for appbaseexception RPCErrorDoRetry added, when a rpc call should be retriedgrapherpc Handling of server error 500 to 511 added better handling when get_config does not workunit tests nodes and nodes_appbase are take from utils keys is used instead of wif for Steem() unit test for broadcast added unit test for appbase for verify added test_operations added test_types addedMore Unit tests https://github.com/holgern/beem/commit/9a72a1c558952d456ee3f5d667e6a36f5f54a2c5 More unit tests Handling of Amount for Appbase improved Fixed unit tests for Python 2.7Improve handling of lists as rpc reply https://github.com/holgern/beem/commit/97e8fcb1f82b4f6fb2bbdd31c6e667e5290f2dbeImprove coverage for graphenerpc https://github.com/holgern/beem/commit/478518897c1c1726f3f540f0813342a469888bb7Transactionbuilder improved and more unit tests https://github.com/holgern/beem/commit/56f22b04a23bbcdfae1ccbc509107f96c73b5e2eSteem vests_to_sbd and vests_to_rshares added rshares_to_vote_pct let you calculate how many voting percentage are needed to vote with a desired rshares amount app can be set for post, when not set, it is set to beem/version Doku improvedTransactionbuilder Doku improved proposer from ini removed, as it had no function _is_signed and _is_constructed fixed reconstruct_tx added to sign and addSigningInformation, when set to False, previous signatures are not deleted anymore KeyNotFound exception handledWallet KeyNotFound exception handled, when more than one key_auths are availableGraphenerpc version string set to user-agentPublickey Doku improvedUnit teststest_steem: test for test_post improved test_sp_to_sbd and test_rshares_to_vote_pct addedtst_testnet: test_wallet_keys added for testing the wallet test_transfer_1of1, test_transfer_2of2_simple, test_transfer_2of2_wallet and test_transfer_2of2_serialized_deserialized added thanks to @leprechaunExamples added https://github.com/holgern/beem/commit/d6609e7f72623792751579fa9ea68fbd9d541ee9Wallet KeyNotFound raised when no key is foundExampleswrite blocks to file decodes streamed blocks to numbers with hexlify and write them line by line as gzip compressed filepost_to_html creates a html page from any given authorperm stringpost_to_md saves the markdown code from any given authorperm linkUnit teststest_vote improvedRefactoring and improvements https://github.com/holgern/beem/commit/d2a9563bb2a1138bf64a5377cab72bd873842c24Comment Check added for empty returnsMarket refactoring Checks added fro empty rpc returnsstorage default nodes are taken from utils.get_node_listVote Check added for empty rpc calls Check added for Unkown key returnException UnkownKey addedSteemnoderpc set_next_node_on_empty_reply added, to add a check on empty returns on the next rpc call Refactoring UnkownKey exception addedTransaction refactoringUnit tests test_vote improve and check for VoteDoesNotExistsException addedAdd clearWifs and improve unit tests https://github.com/holgern/beem/commit/2d364c670eaed95b7f9ad275898b8431446a6e9cTransactionbuild add clearWifsExamples use nodes from get_node_listtest_testnet improved tests for Transactionbuilderbenchmark_nodes2 added https://github.com/holgern/beem/commit/c30aa2b6858bba631d842fe9739448f1ca391396Graphenerpc Handling for Connectionerror for request posts added Each node has its own error count nowbenchmark_nodes2 added_metadata_to_dict added to comment https://github.com/holgern/beem/commit/52203d95f2c718daca272f77b974703011da39detest_comment preselect working nodeImproved numerical calculation of votes https://github.com/holgern/beem/commit/5ea3ebbe5a7bb81d92ef5ead3cca1d9eee5f1e55Steem max_vote_denom is corrected and calculated as in steemit/steembeemgrapheneapi handling of empty replies added Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem - transactionbuilder and SteemNodeRPC improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-transactionbuilder-and-steemnoderpc-improved/"},{"title":"How to get a good rating for your utopian-io contribution","text":"source You can found all question and the possible influence on your rating on the github site of utopian.io: https://github.com/utopian-io/api.utopian.io/tree/master/src/server/controllers/post.controller/questionnaire Each questionnaire consists of a common part and a specific part. The maximum score of each is 50. Common part “questions” value “answer” “Does the writing style meet the Utopian standard considering formalness, informativeness and clarity of the content?” 10 “It is formal, informative and well written with clear content.” 5 “It is informative with clear content but not formal enough.” 4 “The contribution could be more informative or contains unrelated information, formality and clarity of the content are good enough.” 2 “Not all sections were clear enough but overall holds value for the project.” 0 “Not at all.” “Was the provided category template for the editor followed?” 5 “All points of the template were included with additional points as well.” 4 “The template was followed without additions.” 3 “The template was edited but the points were covered in different way.” 3 “Not all points of the template were covered in the contribution but the structure is clear enough.” 2 “The template was not followed but the structure is clear enough.” 0 “The contents are not clearly structured at all.” “Did the contributor tag other users?” 5 “No other users were tagged by the contributor.” 5 “Used tags are reasonable and all tagged people are connected to the project and/or the contribution.” 2 “The contribution contains mentions of other users that are not directly related to the contribution but related in other ways.” 0 “The contributor misuses tagging of other users.” “Did the contributor ask for upvotes, resteems, follows or witness vote?” 5 “No” 5 “Yes, but not in a way that disturbs readability. “ 0 “Yes.” “Was a graphical content like images, charts, videos or screenshots included?” 5 “Yes, the graphical content is included and adds more value to the contribution.” 4 “No but the contribution works well without graphical content well.” 3 “Yes, but most of the graphical content’s purpose is just for presentational matters.” 0 “No relevant or useful graphical content is included in the contribution.” “How would you rate the overall added value?” 20 “Extraordinary value to both the project and the open source community overall.” 15 “Significant value to the project or open source community.” 10 “Some value to the project or open source community.” 5 “Little value to the project or open source community.” 0 “No obvious value to project or open source community.” Specific partIt is two much work to copy all specific questions to markdown tables. Just take a look on the specific ts-file. Task requests are specialWhen writing a task request, the following points are important: Is the task described in great details? (up to 10 points) Is there a guide on completing the tasks? (up to 10 points) Is there a deadline for this task request? (up to 5 points) Did the project owner provide enough details for the contributors to get in touch? (up to 5 points) Did the project owner provide a liquid bounty (STEEM or other cryptos)? (up to 20 points) ConclusionFollow the following points when writing your post (30 of 100 points): Follow the template (5 points) Write formal and informative with clear content (10 points) Do tag other users only if its reasonable (5 points) Do not disturb readability by asking for upvotes, resteems, follow or witness vote (5 points) Include graphical content (5 points) When writing a task requests see the points in the section above, otherwise provide great value to the community. This page is synchronized from the post: ‘How to get a good rating for your utopian-io contribution’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-get-a-good-rating-for-your-utopian-io-contribution/"},{"title":"Update for beem - command line tool beempy ready to use","text":"beem is a python library for steem. beem has 395 unit tests and a coverage of 84 %. The current version is 0.19.22. beem can be installed by:1pip install -U beem or12conda config --add channels conda-forgeconda install beem I created a discord channel for answering question or discussing beem: https://discord.gg/4HM592V New Features In this update, the command line tool beempy was completed. beempy has the now same syntax and functions as steempy, the command line tool from python-steem. beempy is rewritten from scratch and contrary to steempy it uses the Click library. The following new functions (not available in steempy) are added to beempy witnesses createwallet walletinfo openorders orderbook claimreward follower following unit tests for all cli functionsHow to start using beempy and transfer 1 SBD from user_a to user_b with memo helloFirst create a new wallet and set a wallet password by:1beempy createwallet Set the default account:1beempy set default_account user_a Then enter your active wif1beempy addkey Creating a wallet and entering private keys has to perform only once. The data are stored in a sql database on the PC. All private keys are encrypted with the wallet password. At first, the help of the transfer function is shown:12345678beempy transfer --helpUsage: beempy transfer [OPTIONS] TO AMOUNT ASSET [MEMO] Transfer SBD/STEEMOptions: -a, --account TEXT Transfer from this account --help Show this message and exit. Now the syntax for a transfer is clear and a transfer can be performed by:1beempy transfer user_b 1 SBD hello After entering the wallet password, 1 SBD is transfered to user_b. When user_a is not the default account, the command changes to:1beempy transfer --account user_a user_b 1 SBD hello Complete listing of all available commands output of beempy --helpNew commands for beempy (not available in steempy)createwalletbeempy createwalletwipes the wallet without knowing the old password. Asks then for a new password and creates a new wallet.witnessesbeempy witnesseslists all witnesses and shows their stats. beempy witnesses holger80lists only witnesses which were voted by holger80 ## walletinfobeempy walletinfoShows information about the wallet openordersbeempy openorders beemshows all open orders of account beem orderbookbeempy orderbookshows the last orders, can be limit with --limit 10 claimrewardbeempy claimreward holger80claims all unclaimed rewards. Rewards to claim can be specified by --reward_steem, --reward_sbd or --reward_vests. followerbeempy follower holger80shows statistics about the followers. followingbeempy following holger80shows statistics about following accounts. # Improved commands for beempy (also available in steempy but with limited function)## buy and sellbeempy buy 1 STEEM or beempy sell 1 STEEMcan be called without price. The price is then taken from the last entry in the orderbook. set nodesbeempy set nodes &quot;&quot; resets nodes to the standard node list. infobeempy info -1 shows the last block. Transaction are not shown, only the number of transaction in the block. beempy info -1:1 shows the first transaction of the last block together with stats about the block. ChangesCLI improved and extended https://github.com/holgern/beem/commit/6fa269dfe030928d80f224228708870d81059406account get_account_history is more robust against empty rpc returnssteem add functions to store default vote weight and nodescli Same parameter as in steempy are used main parameter improved set improved addkey improved delkey added listkeys improved info improved and info about a block, an account, post and a public key addedUnit tests test_testnet improved test_cli adapted on changesCLI improved https://github.com/holgern/beem/commit/6acef303b3cb805c0952d81e5b17106aabd246fdcli unlock_wallet and asset_callback added upvote and downvote improved transfer, powerup and powerdown addedunit_test missing commands added to test_cliMore function added to cli https://github.com/holgern/beem/commit/64b51c01ec8a9070358b2f3f4cb77a58262806dfaccount set_withdraw_vesting_route addedcli powerdownroute, convert and interest addedsteemnoderpc error messages improved _check_api_name added ApiNotSupported when Api is not supported by node but existsgraphenerpc error messages improvedrpcutils error messages in sleep_and_check_retries improvedunit tests new function addedImproved CLI und unit tests https://github.com/holgern/beem/commit/665befaa519beab35a45b3c8be545143a65e480eCLI improved password handling and confirmation for changewalletpassphrase, delkey and createwalletunit tests improved test_cli removed uneeded test for test_websocketMore cli functions added https://github.com/holgern/beem/commit/649f02af701c61469e2345ec15b7be9e1037d681cli permissions, allow, disallow, updateMemoKey, approvewitness, disapprovewitness and witnesses added upvote and downvote improvedunit tests new functions added to test_cli test_upvote and test_downvote improvedMore cli function added https://github.com/holgern/beem/commit/717d1897fb1c0257de80e49dca95a7d4a558458eaccount follow and unfollow improvedcli newaccount, importaccount, orderbook, buy, sell, cancel, openorders, resteem, follow, unfollow, witnessupdate and witnesscreate addedsteem witness_update addedwitness update uses steem.witness_updateunit tests new cli functions added to unit tests test_cliDoku for cli added https://github.com/holgern/beem/commit/199d7b31fe0b691f42da04ca4b5aba20519959d8 Dokumentation for cli added Profile addedcli sign, broadcast, setprofile and delprofile added refactoring wallet password from UNLOCK environment variable worksutils detection of complete urls addedunit tests tests for profile added new functions tests added to test_cli unit tests for utils improvedAdd claimreward to cli https://github.com/holgern/beem/commit/ab9465eda8856b77f632518cb6ffebd70f6afcedcli add claimrewardunit test add unit test for claimrewardImproved coverage for cli tool https://github.com/holgern/beem/commit/2e82abf52a81bfe960949f16e453f171d4ea9ce4Add price prediction for buy and sell of cli https://github.com/holgern/beem/commit/5bbbaf487116dcf44f15d0c17599f024c09d3c8ccli Add price prediction for buy and sell of clisteemnoderpc refactoringExceptions CallRetriesReached addedunit tests tests for test_cli addedFollower and following added to cli https://github.com/holgern/beem/commit/b0fa7a9cb1a1b3cb7e4d56d97416423be2353aabcli follower and following addedwitness is_active addedWitnesses printAsTable improvedunit tests follower and following added to test_cliSome improvements for cli https://github.com/holgern/beem/commit/edc35333d1a32f57ecd48afd2c98a2e47b23e69dcli some improvements and additionsAdd parsewif to cli https://github.com/holgern/beem/commit/c21d78471dee8589ec198b05db9bed29801892cd Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem - command line tool beempy ready to use’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-command-line-tool-beempy-ready-to-use/"},{"title":"get_account_history does not return the first element when index> -1","text":"Expected behaviorThe account history starts from index=0. E.g. the account test has 13 account related operation. 1https://api.steemjs.com/get_account_history?account=test&amp;from=-1&amp;limit=13 or123from steem.account import Accountacc = Account(&quot;test&quot;)for h in acc.get_account_history(-1,13): print(h[&quot;index&quot;]) Returns 13 operation starting from index 0 to 12. When specifying from it is expected that operation up to index 0 can be retrieved. 1https://api.steemjs.com/get_account_history?account=test&amp;from=5&amp;limit=6 or123from steem.account import Accountacc = Account(&quot;test&quot;)for h in acc.get_account_history(5, 6): print(h[&quot;index&quot;]) Should return 6 operations from index 0 to index 5. Actual behaviorThe first element with index 0 can only be obtained when set from=-1. This may be work for the account test, but cannot work when the number of account operations is higher than 1000. When setting the from parameter to a value other than -1, the first operation with index 0 cannot be fetched. When trying to receive the first 6 operation, including operation with index 0, an error Exception:args.start &gt;= args.limit: start must be greater than limit occurs. How to reproduce123from steem.account import Accountacc = Account(&quot;test&quot;)for h in acc.get_account_history(5, 6): print(h[&quot;index&quot;]) or 1https://api.steemjs.com/get_account_history?account=test&amp;from=5&amp;limit=6 Python 3.6 / Anaconda with python-steem 1.0.0 Browser: Chrome 65.0.3325.181 Operating system: Windows 10 Node: https://api.steemit.com with version 0.19.4 Possible solutionhttps://github.com/steemit/steem/blob/master/libraries/plugins/apis/account_history_api/account_history_api.cppChange line 74:1if( n &gt;= args.limit ) to1if( n &gt; args.limit ) Complete listing of the function: DEFINE_API_IMPL( account_history_api_impl, get_account_history ) { FC_ASSERT( args.limit &lt;= 10000, &quot;limit of ${l} is greater than maxmimum allowed&quot;, (&quot;l&quot;,args.limit) ); FC_ASSERT( args.start &gt;= args.limit, &quot;start must be greater than limit&quot; ); const auto&amp; idx = _db.get_index&lt; chain::account_history_index, chain::by_account &gt;(); auto itr = idx.lower_bound( boost::make_tuple( args.account, args.start ) ); uint32_t n = 0; get_account_history_return result; while( true ) { if( itr == idx.end() ) break; if( itr-&gt;account != args.account ) break; if( n &gt; args.limit ) break; result.history[ itr-&gt;sequence ] = _db.get( itr-&gt;op ); ++itr; ++n; } return result; } Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘get_account_history does not return the first element when index&gt; -1’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/getaccounthistory-does-not-return-the-first-element-when-index-1/"},{"title":"How to install steem-python on windows","text":"There are a lot of posts about installing steem-python on windows. What is the source of the problems?steem-python needs pycrypto. pycrypto has seen its last update in 20 Jun 2014. It has 112 unsolved issues and 54 open pull requests. 20 open issues are about installing pycrypto on windows. SolutionThe solution is to use Anaconda/Miniconda and toinstall pycrypto from conda-forge. In the feedstock, four patches are applied to the source in order to fix all problems. 1. Install Anaconda 5 with python 3.6 Go to https://www.anaconda.com/download/ and download the installer for Python 3.6 Start the installer (I normally choose that all user can use Python and change the path to C:\\Anaconda3) 2. Start the Anaconda Prompt and add the conda-forge channel Start the Anaconda Prompt ( You find it under Anaconda3) Add the conda-forge channel by entering the following into the prompt:1conda config --add channels conda-forge 3. Install steem-pythonThere are now three different ways to install python-steem. 3.1. Install steem-python with conda Open the Anaconda Prompt ( You find it under Anaconda3) Install python-steem by 1conda install steem The command line tools are available inside of the Anaconda Prompt and can be called by 1steempy The command line tools are inside AnacondaDir\\Scripts, so when adding this directory and AnacondaDir to the path variable of windows, the tools are also available outside the Anaconda Prompt. 3.2. Install the development version of steem-python Go to the github of python-steem Clone the repository to your drive Open the Anaconda Prompt ( You find it under Anaconda3) Install all dependencies by: 1conda install --only-deps steem build python-steem by 123cd &lt;dir_of_python_steem&gt;python setup.py buildpython setup.py install --user The command line tools are not available when installing steem-python in this way. 3.3. Install steem-python with pip Open the Anaconda Prompt ( You find it under Anaconda3) Install all dependencies by: 1conda install --only-deps steem Install python-steem by 1pip install steem The command line tools are not available when installing steem-python in this way. I’m managing the steem-foodstock for python-steem. In case of problems please create a new issue. This page is synchronized from the post: ‘How to install steem-python on windows’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-install-steem-python-on-windows/"},{"title":"Proof that Cryptonite from MetaCert really works!","text":"You properly read about the DNS hack of MyEtherwallet.com. A really working phishing protection should warn you now. Although the URL is the same as before, a different content is send to visitors. Cryptonite works and warns its user. How does it workCryptonite uses the metacert protocol. Verified safe domains and reported phishing sites will be stored in the blockchain and every user of the protocol will be protected against reported phishing sites. At the moment the metacert protocol is not live, but the extension already works in a centralized way. You can find the links to the browser extensions here: https://metacertprotocol.com/cryptonite.html. There is a working product in the crypto world for free? Of course not. It is free until they go live to the Ethereum blockchain. To be protected, you have to pay one META token per day.For early user, the first year is free (Airdrop of 360 META token). There is also a possibility to earn token by submitting and validating links. In the end, every user will be protected in exchange for some work (reporting and checking links). This a really decentralized approach to be protected and protect others. Why not try it, until now it is free without doing anything or paying in return. This page is synchronized from the post: ‘Proof that Cryptonite from MetaCert really works!’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/proof-that-cryptonite-from-metacert-really-works/"},{"title":"savedroid was not hacked (PR for ICO Advisory)","text":"When you go to https://www.savedroid.de/, you will see: Their telegram channel was also hacked and flooded with porn. The twitter account of its CEO Yassin Hankir https://twitter.com/YassinHankir is also hacked and shows: There is no real news at the moment about this. Their facebook page has also no comment about this. Savedroid was the first German ICO and its goal was to establish a mobile platform on which everyone could automatically invest some money in cryptocurrencies. In the ICO, around 4 billion token for around 35 to 40 million € were sold. Almost all SVD token were already minted and sended to the investors. Only token who were bought by credit card were locked up 180 days. Let’s hope for the best. Edit:Everything was a big PR!http://anditsg.one This page is synchronized from the post: ‘savedroid was not hacked (PR for ICO Advisory)’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/savedroid-was-hacked/"},{"title":"update for beem - several improvements","text":"beem is a python library for steem. beem has now 425 unit tests and a coverage of 84 %. The current version is 0.19.23. Please visit my discord channel for answering question or discussing beem: https://discord.gg/4HM592V beem has gained some attention lately and there are now some visitors in my github repository: What feature(s) did you add? The following commands are added to the command line tool beempy: currentnodebeempy currentnode shows the current node url and its version. mutebeempy mute test mutes account test. muterbeempy muter shows a summarize about all account that mutes the default account. mutingbeempy muting shows a summarize about accounts which where muted by the default account. nextnodebeempy nextnode switches to the next node in line. pingnodebeempy pingnode measures how long a get_config rpc call takes. The output is in milli seconds. powerbeempy power shows vote power, balance and account bandwidth. votesbeempy votes --direction in --days 3 shows the incoming votes of the last 3 days. beempy votes --direction out --days 1 shows the outgoing votes of the last day. Support for read-only systems is addedbeem can now be used in a read-only system. The config variables can not be stored and the wallet can not be used in a read-only system. Writing operation in a read-only system lead to an NoWriteAccess exceptionThe following operation should be avoided in a read-only system: storing configs: 1234from beem import Steemstm = Steem()stm.set_default_account(&quot;test&quot;)stm.config[&quot;default_account&quot;] = &quot;test&quot; using the wallet Using private keys in a read-only systemPrivate keys must be provided directly to the Steem object:12from beem import Steemstm = Steem(keys=[wif]) It is also possible to build the transaction by hand:12345678910from beem.transactionbuilder import TransactionBuilderfrom beembase.operations import Transfertx = TransactionBuilder()tx.appendOps(Transfer(**{&quot;from&quot;: &apos;user_a&apos;, &quot;to&quot;: &apos;user_b&apos;, &quot;amount&quot;: &apos;1.000 SBD&apos;, &quot;memo&quot;: &apos;test 2&apos;}))tx.appendWif(&apos;5.....&apos;) # active private keytx.sign()tx.broadcast() Receiving more than one account in one rpc call1234from beem.account import Accountsaccount_list = [&quot;utopian-io&quot;, &quot;busy.org&quot;, &quot;minnowsupport&quot;]a = Accounts(account_list)a [&lt;Account utopian-io&gt;, &lt;Account busy.org&gt;, &lt;Account minnowsupport&gt;] ChangesSeveral improvements https://github.com/holgern/beem/commit/80ab8897b68b2784c1bd774ef15f80379f458d61Account refactoring of init Doku improvedAsset AssetNotFound handling improved Operation for equal and unqual addedPrice usage of the new equal operation from AssetSteem Improve key handling in account creationStorage add sqlite3_copy and recover_with_latest_backupbeemgraphenebase/account add get_blind_private, get_public_key, get_secret, derive_private_key, child and derive_from_seedUnit tests Use setUpClass to speed unit tests up (Steem is now created at the begging auf each unit test class Add unit tests for asset Add unit test for new beemgraphenebase/account functionsJson export improved and Muting and muter added https://github.com/holgern/beem/commit/078fb1b6178cd0a742cc9a4b735a4956513bce1fAccount Json export improved All times are converted to datetime Doku about ignore for muting improved Accounts and AccountsObject added mute for Mute another account added get_muters and get_mutings addedCLI refactoring of follows and following muter and muting for showing muted and muting accounts mut added doku for unfollow improvedComment json() improvedUnit tests test_account adapted to steemit/steem bug for appbase test_json_export added test for muter and muting for cli addedAdd new amount dict format for appbase and other improvements https://github.com/holgern/beem/commit/d3483242d2054241ecc59dc7b30927596dd1fcaeAccount Remove set_next_node_on_empty_reply(True) for get_account_history calls Retry when native get_account_history raises ApiNotSupported with condenser_api Refactoring and use of addTzInfo from utils Improved logic and bugfixes for history() print_summarize_table moved from cli.py to AccountsAmount New appbase amount dict format supportedcli Refactoring of print_account_tableComment New appbase amount dict format supportedutils addTzInfo added to reduce code testing nodes added to get_node_list (disabled by default)Vote votee added printAsTable improved and PrettyTable used get_list added to recieve vote properties as list print_stats added but not finished yet ActiveVotes improved with start and stop to limit stored votesWitness return_str added to printAsTableunit tests more unit tests for history and history_reverse unit test for new appbase amount format addedAdd votes command to cli https://github.com/holgern/beem/commit/ad9dc230d1121cb1b418a30e90d4d6dace467868cli add votes command to view outgoing/incoming votes of an accountUnit tests improve unit tess for account and vote Add test_instance to check if set_shared_steem_instance, shared_steem_instance is working Add new command to test_cliAdd support for read-only systems https://github.com/holgern/beem/commit/cd4aaf225a28713dccfa64910f77a14e11d1c0bcException NoWriteAccess added, is raised when try to set configs on a read-only systemStorage On a read-only system beem.sql is not created. Default values for config are returned and it is not possible to use the wallet. Bug wif can be directly set.Unit test test_storage added to test sqlite read and writeSell and Buy in cli improved https://github.com/holgern/beem/commit/906996d36b4b935ea9dbf2845568ccef75f8e890CLI market adapted on asset for buy and sellmarket quote and base asset can be setunit test more unit tests for buy and sellSeveral improvements and refactoring https://github.com/holgern/beem/commit/5a4fa4d79cff18e7a3fd45a4c232bacc3377bfd0Account get_bandwidth refactored get_account_bandwidth addedCli power added for showing vote power and bandwidthSteem Improvements and refactoring for get_config, get_network, get_hardfork_properties, get_current_median_history, get_reward_funds, get_feed_history, get_reserve_ratio and get_dynamic_global_propertiesSteemnoderpc get_network moved to graphenerpcChains removed to beemgraphenebase/chains.pyUnit tests add unit test for power for cli golos test reducedImproved account info and node info https://github.com/holgern/beem/commit/eceb7d6f2ba41417feca47d82ed2269ea27ece2dAccount Improved print_info, table output is possibleBlockchain stream is ready for newest changes and work with api.steemitdev.comCLI nextnode, pingnode, currentnode addedException BatchedCallsNotSupported added, raised when batched blockchain failedSteem set_default_node improved get_default_node addedUnit test new unit test for new functions addedDocumentation and market improved https://github.com/holgern/beem/commit/2e863dd56c9af5190f30ff9aefffe73082f6d498Account Example for history and history_reverse addedMarket base and quote added to init to define what buy and what sell meansDocumentation tutorials improvedUnit tests test_market improvedSome small improvements and final changes for 0.19.23 https://github.com/holgern/beem/commit/6fa17330298ee0d26eeeaec120a73b5f1ef0d68a Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘update for beem - several improvements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-several-improvements/"},{"title":"Update for beem - AsciiCharts, keyring support, trade_history and node sorting added","text":"beem is a python library for steem. beem has now 430 unit tests and a coverage of 83 %. The current version is 0.19.25. I created a discord channel for answering question or discussing beem: https://discord.gg/4HM592V New FeaturesAsciiChart for beempyA new class AsciiChart was added to beem. It switches automatically to ascii symbols, when using it with python 2.7. Price historybeempy pricehistory shows the price history and the current median price. Width and height can be changed by e.g. beempy pricehistory --height 10 --width 10. Trade historybeempy tradehistory shows the market conversion of STEEM/SBD of the last 7 days. It uses the new trade_history function. The default settings of the optional parameter are:beempy tradehistory --days 7 --hours 2 --limit 100 --height 75 --width 15. days is the time horizont of trades to be included hour is the intervall time from which limit trades are taken into account. E.g. --hours 1 --limit 25 means that every hour 25 trades are fetched from the node and the mean value is calcuated from it.It is not possible to use all trades as this would take too long. Chart for orderbookbeempy orderbook --chart visualize the current open orders. The vertical line shows where bids and asks face each other. --limit can be used to include more openorders. --height &lt;int&gt; --width &lt;int&gt; can be used to change heigth and width of the chart. Sort nodes regarding their ping timesbeempy pingnode --sort --remove goes through all nodes in the lists and measures how long a get_config RPC call takes. The nodes are then sorted and all nodes which raise an exception are removed from the nodes list (inf is shown in the table). currentnode and nextnode skip not working nodes nowbeempy currentnode and beempy nextnode skipping not working nodes and putting them at the end of the list. When calling beempy currentnode the shown node is then the first node in the list. beempy nextnode changes the first entry in the node list to the next working node in the list. keyring support for beempy and walletIn order to use keyring for storing the wallet password, the following steps are necessary: install keyring: pip install keyring Change password_storage to keyring: beempy set password_storage keyring and enter the wallet password. It also possible to change the password in the keyring by python -m keyring set beem wallet python -m keyring get beem wallet will show the set password in the terminal. When keyring is set as password_storage, keyring.get_password(&quot;beem&quot;, &quot;wallet&quot;) is called whenever beempy needs to access the wallet. If everything works can be tested with:beempy walletinfo --test-unlock This can also be used in scripts and unlocks the wallet automatically. trade_history added to market trade_history allows to recieve all trades from the market. It calls internally trades. At the moment it returns a list. I’m thinking about a generator concept as in history from account. Parameter are: start - datetime object - defines the Start date stop - datetime object - defines the stop date, when set to None, the current date is taken. intervall - timedelta object. When not None, only limit trades will be returned at each intervall time point limit int - limits the batch call size and the number of trades which are fetched when intervall is set. raw_data bool when true the jaw json data will be returned. The output is a list. When using intervall, each object in the list is a list width limit trades inside. Memory consumption fer requests and websocket reduced when creating more instances of steemI used now request.Session for https nodes and created a singelton class for the websocket object. This reduces memory consumption when creating several Steem() objects without using shared_steem_instances. Condenser calls from appbase nodes now possibleSteem(node=&quot;https://api.steemit.com&quot;, use_condenser=True) will replace any api by condenser_api for all RPC calls. ChangesMarket improved and keyring support added to wallet https://github.com/holgern/beem/commit/3643d438496e7fe1a1544d63eaaf743886463b80 Dokumentation for several functions of market improved dict keys for ticker renamed to small names width underscore (identical to python-steem) trade_history added. This function allows to fetch a fixed number of trades at each intervall to reduce the time. E.g. it is possible to receive the from the last 7 days 100 trades each 6 hours. utc time transformation is added to tradeswallet keyring can be used to unlock the wallet. Please store the masterpassword with python -m keyring set beem walletAsciiChart added and charts added to cli https://github.com/holgern/beem/commit/1ccf4f3281b9b70f5685b5c79ffdccfdc1e85c67AsciiChart new ascii curve plot class created width and height can defined and plot() prints an ascii string, which can be interpreted as plotCLI keyring functionallity added walletinfo shows if UNLOCK env is set, keyring is installed and if it possible to unlock the wallet (–test-unlock) ticker shows a table with the latest market prices pricehistory plots the history of the last 3 days together with the median price tradehistory shows the STEEM/SBD market price history orderbook has now a working chart option The sum of SBD and STEEM for open orders was addedUnit test tests for new cli function were addedAdded password_storage to config for managing keyring/environment for walletpassword https://github.com/holgern/beem/commit/ef61625893852ec83c4e4bcc93289b938f2f9428cli set password_storage keyring or set password_storage environment added. password_storage = environment is the default behavior and compatible with all old version. when keyring is used, the wallet password can be stored with the keyring module. nextnode when the first node and the current url not matches, will this command changes the nodes list, in way that the first node and the current url matches nextnode skipps now not working nodes createwallet improved and keyring added changewalletpassphrase improvedsteem set_password_storage added to set the password_storage config move_current_node_to_front function added, which shifts the nodes until current url and first node matchesstorage add default for password_storagewallet password_storage is usedunit tess test_cli adapted test_market adapted on changesAdd sorting nodes by ping times https://github.com/holgern/beem/commit/167873a9f6b07d3652b60c57674969d80b8fd888cli nodes can be sorted by ping times with pingnode –sort nodes with error can be removed by pingnode –sort –remove add wipe option for createwalletMemory consumption for graphenerpc reduced and other improvements https://github.com/holgern/beem/commit/8cc6342d07e3b113929a3579bdd64de5666bfa5aMemo make prefix changebleTransationbuilder sign() return the signed struct nowGraphenerpc Session are used for requests Singleton for websocket instance added Both measures reduce ram consumption when more than one Steem object is created.Add missing scrypt package to dependencyNew asscii char set for asciichart https://github.com/holgern/beem/commit/9e401fd7ccde3d7978de0d47cc6457c02f1197ecAsciichart added ascii charset for python 2.7CLI adapted to new charsetAllow condenser_api calls for appbase nodes https://github.com/holgern/beem/commit/fa98397a4d73a876c31f88a577cc5bfc51e1d628steem add option use_condensersteemnoderpc refactoringGraphenerpc condenser_api calls shen use_condenser=True is set.unit tests test_comment and test_discussion uses 19.4 nodes now Posted on Utopian.io - Rewarding Open Source Contributors This page is synchronized from the post: ‘Update for beem - AsciiCharts, keyring support, trade_history and node sorting added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-asciicharts-keyring-support-tradehistory-and-node-sorting-added/"},{"title":"Currently only 6 full RPC nodes are working without errors","text":"Complete RPC node listAll nodes have support for https://. For nodes with websocket support (WSS is yes), wss:// has to put in front. All which have websocket support are checked twice (1x https and 1x wss). Server WSS Ran By Version steemd.privex.io yes @privex 0.19.2 steemd.pevo.science yes @pharesim 0.19.2 rpc.steemliberator.com yes @netuoso 0.19.2 rpc.buildteam.io yes @themarkymark 0.19.2 gtg.steem.house:8090 yes @gtg 0.19.2 rpc.steemviz.com yes @ausbitbank 0.19.2 seed.bitcoiner.me yes @bitcoiner 0.19.2 steemd.steemgigs.org yes @steemgigs 0.19.2 steemd.minnowsupportproject.org yes @followbtcnews 0.19.2 rpc.curiesteem.com no @curie 0.19.2 api.steem.house no @gtg 0.19.4 appbasetest.timcliff.com yes @timcliff 0.19.4 api.steemit.com no Steemit Inc. 0.19.4 Working RPC nodeA node is working, when: returns data within 30 seconds, blocks can be streamed, account history is possible, votes, a comment and an account can successfully be fetched and are not empty. When a node is fully working the following measurements are shown: N blocks is the number of blocks which can be received in 30 seconds. N acc hist is the number of account transaction which can be received in 30 seconds. The batch call size is set to 100. Dur. call in s is the mean duration to receive an account, a comment and a vote from the node. The following statistics was gained with beem. Fully working nodes (29.04.2018) Node N blocks N acc hist Dur. call in s wss://steemd.privex.io 202 29555 0.38 wss://gtg.steem.house:8090 169 5253 0.10 https://gtg.steem.house:8090 34 6768 0.89 https://rpc.curiesteem.com 23 2728 0.71 https://api.steemit.com 114 0 0.45 https://api.steem.house 77 0 0.29 Set working nodes with beempy1beempy set nodes &quot;[&apos;wss://steemd.privex.io&apos;, &apos;wss://gtg.steem.house:8090&apos;, &apos;https://gtg.steem.house:8090&apos;, &apos;https://rpc.curiesteem.com&apos;, &apos;https://api.steemit.com&apos;, &apos;https://api.steem.house&apos;]&quot; This page is synchronized from the post: ‘Currently only 6 full RPC nodes are working without errors’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/currently-only-6-full-rpc-nodes-are-working-without-errors/"},{"title":"Python library beem: Documentation improved","text":"#### DetailsThe following parts were improved: The structure of the decumentation page was improved. A navigation menu is now accessable from all pages. All modules of beem are now collected unter Modules. The installation section was updated and is at the same level as the readme file in the github. The empty quickstart page was filled with content Five tutorials were added to the tutorials page The configuration was improved and updated beempy CLI was updated and help for each command was added The discord channel was added to the Support and questions page Indices and Tables can be access from all pages Doctest added to CI for testing examples in the documentation The link to the documentation was shifted to the top of the readme#### Componentsbeem is a python library for steem. The current version is 0.19.25. A lot of featues were added in the last 25 release, but the documentation was not well maintained.#### DiffAlmost all parts of the existing documentation were improved.All commands from the command line tool beempy are listed now. A navigation menu with search bar is now visible on each site. The installation page was improved and adapted to the readme.Quickstart contains now Steem Wallet and Keys Receiving information about blocks, accounts, votes, comments, market and witness Sending transaction to the blockchain The Tutorials page was filled with new content and the following sections were added: Use nobroadcast for testing Clear BlockchainObject Caching Batch api calls on AppBase Account history Transactionbuilder The Configuration page was improved and contains now the following sections: API node URLs Default account Default voting weight Setting password_storage The beempy CLI page has now a section about all commands and shows a help section for each command. All examples in the doc section of the python functions within beem were reviewed and some examples are now tested with doctest. 101 files were changed with 1,486 additions and 708 deletions. LinksThe documentation of the beem library can be found here: http://beem.readthedocs.io/en/latest This page is synchronized from the post: ‘Python library beem: Documentation improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-library-beem-documentation-improved/"},{"title":"SteemConnect token were stolen from utopian.io and used to downvote","text":"Somehow account names and their SteemConnect token were stolen and used to downvote haejin: https://steemblockexplorer.com/@haejin/bitcoin-btc-evening-update-short-term-jives-with-the-longer-term The app which caused this is now disabled! You might now go to https://v2.steemconnect.com/apps/authorized and revoke access to utopian.app: by clicking Revoke! It is not necessary to change the steemit password or the ownerkey. Cause of this is a hack of utopian.io.From the utopian discord channel: This page is synchronized from the post: ‘SteemConnect token were stolen from utopian.io and used to downvote’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/warning-revoke-all-your-steemconnect-token-now/"},{"title":"Bug: steem-verifier crashes on certain transaction ids","text":"Project Information Repository: https://github.com/hernandev/steem-verifier Project Name: steem-verifier Expected behaviorWhen giving a valid transaction id, steem-verifier should show the public key of the signer and the user name of the signer. Actual behavior`Install steem-verifier with1pip install steem-verifier and enter the following into the terminal:1steem-verifier d6457b3ad20583b3434f3a06c2c648b3a770c341 Now steem-verifier crashes with:1ecdsa.numbertheory.SquareRootError: 76198183007165409965398859979003670973818984091490751645956120696063919941083 has no square root modulo 115792089237316195423570985008687907853269984665640564039457584007908834671663 How to reproduceHere is the proof that d6457b3ad20583b3434f3a06c2c648b3a770c341 is a valid trx(using https://steemd.com/tx/d6457b3ad20583b3434f3a06c2c648b3a770c341): Browser/App version: Python 3.6.4, steempy 1.0.0 Operating system: Linux brooks.uberspace.de 3.10.0-693.11.6.el7.x86_64 #1 SMP Thu Jan 4 01:06:37 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux Recording Of The BugTraceback:1234567891011121314Traceback (most recent call last): File &quot;/home/holger80/.local/bin/steem-verifier&quot;, line 11, in &lt;module&gt; sys.exit(entry()) File &quot;/home/holger80/.local/lib/python3.6/site-packages/verifier/cli.py&quot;, line 48, in entry public_keys = verifier.get_public_keys(transaction_data) File &quot;/home/holger80/.local/lib/python3.6/site-packages/verifier/verifier.py&quot;, line 56, in get_public_keys for key in transaction.verify(chain=self.chain): File &quot;/home/holger80/.local/lib/python3.6/site-packages/steembase/transactions.py&quot;, line 225, in verify p = self.recover_public_key(self.digest, sig, recoverParameter) File &quot;/home/holger80/.local/lib/python3.6/site-packages/steembase/transactions.py&quot;, line 141, in recover_public_key beta = ecdsa.numbertheory.square_root_mod_prime(alpha, curve.p()) File &quot;/home/holger80/.local/lib/python3.6/site-packages/ecdsa/numbertheory.py&quot;, line 165, in square_root_mod_prime % ( a, p ) )ecdsa.numbertheory.SquareRootError: 76198183007165409965398859979003670973818984091490751645956120696063919941083 has no square root modulo 115792089237316195423570985008687907853269984665640564039457584007908834671663 It is possible to use the secp256k1 module for sign and verify in steem-python. Let’s see if the usage of this module changes something:12345678910111213=&gt; Extracting public keys...Traceback (most recent call last): File &quot;/home/holger80/.local/bin/steem-verifier&quot;, line 11, in &lt;module&gt; sys.exit(entry()) File &quot;/home/holger80/.local/lib/python3.6/site-packages/verifier/cli.py&quot;, line 48, in entry public_keys = verifier.get_public_keys(transaction_data) File &quot;/home/holger80/.local/lib/python3.6/site-packages/verifier/verifier.py&quot;, line 56, in get_public_keys for key in transaction.verify(chain=self.chain): File &quot;/home/holger80/.local/lib/python3.6/site-packages/steembase/transactions.py&quot;, line 213, in verify sig = pub.ecdsa_recoverable_deserialize(sig, recoverParameter) File &quot;/home/holger80/.local/lib/python3.6/site-packages/secp256k1/__init__.py&quot;, line 136, in ecdsa_recoverable_deserialize raise Exception(&quot;invalid rec_id&quot;)Exception: invalid rec_id Does also not work, but different error message. Proof of Work Donehttps://github.com/holgern This page is synchronized from the post: ‘Bug: steem-verifier crashes on certain transaction ids’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/bug-steem-verifier-crashes-on-certain-transaction-ids/"},{"title":"Update for beem - autoclean, new CLI commands, virtual op estimation, new Comment functions and stand alone beempy","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 463 unit tests and a coverage of 82 %. The current version is 0.19.28. I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug Fixesblockchain.stream and blockchain.ops are missing virtual operations Is fixed by adding only_ops and only_virtual_ops to beem.block.Block. When one is set to True, the get_ops_in_block api call is used. beem.blockchain.ops() is obsolete now. beem.blockchain.stream() stream virtual operations, when only_ops or only_virtual_ops is set to True. beem.blockchain.stream() and beem.blockchain.blocks() uses now beem.block.Block internally. The changes are in commit 8fef554 Bug: steem-verifier crashes on certain transaction ids This bug was also affecting beembase.signedtransaction.Signed_Transaction.verify and lead to the same error messages as seen in steem-verifier. This error was fixed by disabling recover_parameter estimation from the first signature byte in beemgraphenebase.ecdasig.verify_message. beembase.signedtransaction.Signed_Transaction.verify verifies now the signature with recover_parameter going from 0 to 3. Whenever a valid public key is returned it is stored in the list and then returned. This new behavior can be disabled by setting verify(recover_parameter=True). A second related bug and fix were applied to beemgraphenebase.type.PointInTime.__bytes__. In some cases, the bytes from a Date before 1970 should be converted into bytes. This could be fixed by Changing Unsigned int to Integer when unixtime is negative: return struct.pack(&quot;&lt;i&quot;, unixtime). The changes are in commit f0509f6. New FeaturesBlock supports now virtual operations12345678910from beem.block import Blockblock = Block(22277588)len(block.operations)40block = Block(22277588, only_ops=True)len(block.operations)97block = Block(22277588, only_ops=True, only_virtual_ops=True)len(block.operations)57 The beem.block.Block can now be used to access virtual operations. The properties transactions and operations can now be used to access on all transactions bzw. operations as list array. Estimation of virtual account operation number from a date or a block numberThe history of account operation can be huge, e.g. the account gtg has currently 826453 account operations. It is very time-consuming to find out which virtual operation number corresponds to a given block number or date.The new estimate_virtual_op_num() can be used to receive an estimated value for a given date or blocknumber within less than a second. 1234567891011121314import pytzfrom beem.account import Accountfrom beem.blockchain import Blockchainfrom datetime import datetime, timedeltafrom timeit import time as tacc = Account(&quot;gtg&quot;)block_num = 21248120start = t.time()op_num = acc.estimate_virtual_op_num(block_num, stop_diff=1, max_count=10)stop = t.time()print(stop - start)for h in acc.get_account_history(op_num, 0): block_est = h[&quot;block&quot;]print(block_est - block_num) Results for different stop_diff and max_count: stop_diff max_count Dur. [s] block diff 1 100 0.45 -2 1 5 0.45 -2 1 3 0.65 -20 1 1 0.34 36585 1 0 0.32 192476 10 10 0.41 17 100 10 0.38 -20 10000 10 0.27 36585 The parameter stop_diff and max_count have a strong influence on the result. stop_diff stops the estimation process when the difference between two estimation steps is below stop_diff. max_count limits the number of iterations. When set to zero, the inital guess is taken, otherwise, the estimation is improved until max_count iterations are reached or the difference is below stop_diff. There is also an infinity cycle detection implemented, will lead to an stop of the estimation.estimate_virtual_op_num() is used in beem.account.Account.history() and beem.account.Account.history_reverse() when an start point is given. estimate_virtual_op_num() can handle dates and blocknumbers. __repr__ added to some classes __repr__ was added to beem.steem.Steem, beem.witness.WitnessesObject and beem.vote.VoteObjectIn the example the output of the steem object is show: Autoclean added to cacheAll BlockchainObject classes use a global cache to reduce read operations to the blockchain. In this update, the cache is automatically auto cleaned on each access. Accurate estimation of pending payouts and other functions added to the comment classThe following functions were added to beem.comment.Comment: reward() is_pending() time_elapsed() curation_penalty_compensation_SBD() estimate_curation_SBD(vote_value_SBD, estimated_value_SBD=None) get_curation_penalty(vote_time=None) get_vote_with_curation(voter=None, raw_data=False, pending_payout_value=None) get_beneficiaries_pct() get_rewards() get_author_rewards() get_curation_rewards() More information about these function can be found in the help section.get_curation_rewards() works better than the prediction from other sites as steem.supply,.. as the unclaimed curation reward is taken into account:1234567891011121314 unclaimed_rewards = max_rewards.copy() pending_rewards = Trueactive_votes = {}for vote in self[&apos;active_votes&apos;]: if total_vote_weight &gt; 0: claim = max_rewards * vote[&apos;weight&apos;] / total_vote_weight else: claim = 0 if claim &gt; 0 and pending_rewards: unclaimed_rewards -= claim if claim &gt; 0: active_votes[vote[&apos;voter&apos;]] = claim else: active_votes[vote[&apos;voter&apos;]] = 0 The unclaimed_rewards grows when votes are within the first 30 minutes. The unclaimed_rewards from the curation is directly moved to the author reward.The total_vote_weigth value is taken from [&apos;total_vote_weight&apos;]. verify - a new beempy command for receiving the signer from a signatureThe transaction id d6457b3ad20583b3434f3a06c2c648b3a770c341 which crashes steem-verifier can now be analyzed with beempy verify d6457b3ad20583b3434f3a06c2c648b3a770c341 without any error:It is also possible to verify a block number with or without a given transaction number. curation - a new beempy command for estimation voting curation for a postbeempy curation uses the new function beem.comment.get_curation_rewards() for listing all pending curation rewards. Result of beempy curation:and the actual rewards after 7 days:The difference is only 0.001 STEEM POWER for the second one, whereas the estimation for the first entry was 100 % correct. pending - a new beempy command for estimating pending rewards for accountsbeempy pending uses the new beem.comment.get_author_rewards() and the new beem.comment.get_curation_rewards() functions to show pending rewards for given accounts (one or more accounts possible). It can be selected if post, comment or curation rewards will be shown. The pending reward estimation for @holger80/currently-only-6-full-rpc-nodes-are-working-without-errors is 9.463 SBD and 2.415 STEEM POWER.Other popular tools as steem.supply estimates a payout of 8.59 SBD and 2.19 STEEM POWERThe site steem.supply estimates 8.593 SBD and 2.193 STEEM POWER.Let’s see whos prediction is correct:The prediction of beempy pending is the best one. rewards- a new beempy command for listing rewards for accountsbeempy rewards uses the account history to display received rewards for given accounts (one or more accounts possible). It can be selected if post, comment or curation rewards will be shown. Stand alone excutables for beempy createdpyinstaller is used to build stand alone excecutables for linux, osx and windows an the CI server. The excecutables are created directly from the git source code and after packing, sha256 hash sum is calculated. This hash can be found in the build log. beempy can directly be used after unpacking, there are no dependencies necessary. This allows it to use beempy outside of the anaconda prompt, without changing PATH variables. A stand alone version is crated by:pyinstaller beempy-onedir.spec There is also the possibility to crate a one file version with:pyinstaller beempy-onefile.specbut the onefile version is much slower than the onedir version. Commit historyAutoclean for Objectcache, improved graphenrpc and threaded pingnode commit 726a419Blockchainobject auto_clean function added. Everytime a new item is stored into the cache, all expired elements are removed. The __contains__ function sets now data ot None, when the date is expired, in order to reduce memory consumptionCLI threading for pingnode added. with --threading, all nodes are tested simultanously.Steemnoderpc Error count and exception improved when only one node is availableGraphenerpc requests.session is stored as singelton requests_retry_session removed shared_session_instance and set_session_instance is used to get and set the global requests.session object create_ws_instance added; A websocket is created everytime and the singleton is removed error_cnt and num_retries_call handling improvedRpcUtils sleep_and_check_retries improvedExamples benchmark_node2 uses threads (one thread for each node) memory_profiler2 added to check memory consumption for creating multiple account objectsUnit tests Test for objectcache improved Try to build exe with pyinstaller commit bd1b7da spec file added for building a onedir and a onefile standalone solution with pyinstaller for beempy without needing python history and history_reverse improved by estimate_account_op() commit c539773Account print_info improved (Last Vote added) entryId changed to start_entry_id in get_feed, get_blog_entries and get_blog rpc.get_account_history moved to _get_account_history estimate_account_op added, can be used to fastly get account op numbers from dates or block nums history and history_reverse uses estimate_account_opException KeyNotFound removedMemo raises MissingKeyError instead of KeyNotFoundPrice small improvementSteem __repr__ addedTransactionbuilder get_potential_signatures, get_transaction_hex and get_required_signatures added raises MissingKeyError instead of KeyNotFoundVotesObject __contains__, __str__ and __repr__ addedWallet raises MissingKeyError instead of KeyNotFoundWitness __contains__, __str__ and __repr__ added to WitnessObjectSteemnoderpc small improvementsOperationsid producer_reward addedUnit tests new function added and tests adapted to changes Verify fixed, by trying all recover_parameter from 0 to 3 commit f0509f6 Certain transaction could not be verified, as the recover parameter in verify_message from ecdasig was wrong. Signed_Transaction.verify() iterates now always through all 4 cases and returns all found key combination. Unit test added for this case. Virtual-Ops support added for block and blockchain. Comment improved. More CLI commands commit 8fef554Account estimate_account_op renamed to estimate_virtual_op_numBlock only_ops and only_virtual_ops added as new parameter the transactions property returns a list of transactions The operations property returns a list of operations Block which contain only only_ops can be received nowBlockchain only_ops and only_virtual_ops added to get_current_block, blocks, wait_for_and_get_block and stream ops() is obsolete now stream() uses now blocks() internally only_ops=True streams now also virtual operationsbeempy autoconnect is the to False now and only when needed a stm.rpc.rpcconnect() is performed ascii option added to all plots rewards added, this new command lists outstanding rewards (posts, comment and votes) curation added which shows the vote curation rewards for a single post verify added, which returns the public signing key and the signer of a transactionComment reward, is_pending, time_elapsed, curation_penalty_compensation_SBD, estimate_curation_SBD, get_curation_penalty, get_vote_with_curation, get_beneficiaries_pct, get_rewards, get_author_rewards and get_curation_rewards added Unit tests new function added and tests adapted to changes Prepare next version with several improvements commit b9509edAccount Parameter accuracy renamed to stop_diff Doku for estimate_virtual_op_num improved Several improvements and fixes for estimate_virtual_op_numCLI rewards command improved and more parameter addedComments Assure Amount class for all amounts is_pending improvedDoku tutorial about showing all posts of an account addedUnit tests test_account, test_cli and test_comment improved Fix and improve estimate_virtual_op_num commit cd5df63 Improved mathematics and estimation Improvements for estimate_virtual_op_num, history and history_reverse commit dc1ef5a Skip estimate_virtual_op_num when max_virtual_num is smaller than batch_size reverse is removed from estimate_virtual_op_num it is assured in history and history_reverse that the estimated start is really before or after the given one. New cli commands: pending and rewards commit 71b2dd2Account Example added and improved same bug fixesCLI pending shows now all pending rewards and rewards shows all already received rewardsSteem Doku improvedUnit tests tests improved Proof of Work Donehttps://github.com/holgern This page is synchronized from the post: ‘Update for beem - autoclean, new CLI commands, virtual op estimation, new Comment functions and stand alone beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-autoclean-new-cli-commands-virtual-op-estimation-new-comment-functions-and-stand-alone-beempy/"},{"title":"How to reduce the curator reward from 25 % to 0.54 % with example","text":"Without self-vote and no other vote within the first 30 minutes, all curators receive the full 25 % of post payout after 7 days. Today I was shocked how much curation rewards can be removed by self-voting and buying votes from bit-bods. I was analyzed a contribution from bitcoinflood with beempy (I have nothing against the author or his contribution, I use this post just as example): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100beempy curation https://steemit.com/bitcoin/@bitcoinflood/robinhood-now-more-available-including-my-state+------------------+-------------+-------------+-----------------+----------+-------------+| Voter | Voting time | Vote | Early vote loss | Curation | Performance |+------------------+-------------+-------------+-----------------+----------+-------------+| bitcoinflood | 0.3 min | 1.321 SBD | 1.308 SBD | 0.013 SP | 3.4 % || minnowbooster | 2.8 min | 179.424 SBD | 162.678 SBD | 1.380 SP | 2.6 % || alanmirza | 3.0 min | 0.028 SBD | 0.025 SBD | 0.000 SP | 2.0 % || gameapk | 3.2 min | 0.027 SBD | 0.024 SBD | 0.000 SP | 2.1 % || fuzzyvest | 3.9 min | 68.102 SBD | 59.362 SBD | 0.296 SP | 1.5 % || ridhomaslizal | 6.1 min | 0.003 SBD | 0.003 SBD | 0.000 SP | 1.9 % || fitnessfirst | 6.2 min | 0.006 SBD | 0.005 SBD | 0.000 SP | 2.0 % || xeniaioannou | 6.9 min | 0.003 SBD | 0.002 SBD | 0.000 SP | 2.0 % || stranded | 7.0 min | 0.003 SBD | 0.002 SBD | 0.000 SP | 2.3 % || hungryhustle | 7.8 min | 0.023 SBD | 0.017 SBD | 0.000 SP | 2.5 % || mike-mike | 8.5 min | 0.007 SBD | 0.005 SBD | 0.000 SP | 2.7 % || boity | 9.6 min | 0.034 SBD | 0.023 SBD | 0.000 SP | 3.1 % || ajijulhakimimran | 9.8 min | 0.001 SBD | 0.001 SBD | 0.000 SP | 2.5 % || jcharles | 11.4 min | 0.003 SBD | 0.002 SBD | 0.000 SP | 3.6 % || visionarypush | 11.8 min | 0.003 SBD | 0.002 SBD | 0.000 SP | 3.8 % || dylanhobalart | 12.9 min | 0.007 SBD | 0.004 SBD | 0.000 SP | 4.3 % || laritheghost | 14.8 min | 0.017 SBD | 0.008 SBD | 0.000 SP | 4.8 % || trendygran | 14.9 min | 0.001 SBD | 0.001 SBD | 0.000 SP | 4.2 % || sam7 | 15.4 min | 0.001 SBD | 0.001 SBD | 0.000 SP | 4.7 % || linvestidor | 15.6 min | 0.003 SBD | 0.002 SBD | 0.000 SP | 4.9 % || sheikhsalman | 16.4 min | 0.002 SBD | 0.001 SBD | 0.000 SP | 4.9 % || richardgreen | 16.7 min | 0.003 SBD | 0.001 SBD | 0.000 SP | 5.3 % || jibon975 | 19.1 min | 0.003 SBD | 0.001 SBD | 0.000 SP | 6.2 % || newageinv | 21.1 min | 0.126 SBD | 0.037 SBD | 0.003 SP | 6.9 % || gigpen | 21.9 min | 0.003 SBD | 0.001 SBD | 0.000 SP | 6.9 % || scubacoin | 22.1 min | 0.003 SBD | 0.001 SBD | 0.000 SP | 7.0 % || speda | 22.8 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 7.7 % || cryptoeagle | 23.7 min | 0.103 SBD | 0.022 SBD | 0.002 SP | 7.8 % || kojot97 | 24.0 min | 0.003 SBD | 0.001 SBD | 0.000 SP | 7.9 % || evesick | 24.1 min | 0.012 SBD | 0.002 SBD | 0.000 SP | 7.8 % || ehabakhdar | 24.6 min | 0.039 SBD | 0.007 SBD | 0.001 SP | 8.1 % || cryptobeans | 26.9 min | 0.025 SBD | 0.003 SBD | 0.001 SP | 8.9 % || stackin | 28.4 min | 0.076 SBD | 0.004 SBD | 0.002 SP | 9.3 % || wanizubair | 28.6 min | 0.033 SBD | 0.002 SBD | 0.001 SP | 9.4 % || minnowsupport | 28.7 min | 0.131 SBD | 0.006 SBD | 0.004 SP | 9.4 % || pqbd | 30.5 min | 0.004 SBD | 0.000 SBD | 0.000 SP | 10.0 % || gmichelbkk | 31.1 min | 0.013 SBD | 0.000 SBD | 0.000 SP | 9.8 % || seanlloyd | 32.2 min | 0.033 SBD | 0.000 SBD | 0.001 SP | 9.9 % || sammir | 32.5 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.8 % || gekko | 32.7 min | 0.018 SBD | 0.000 SBD | 0.001 SP | 9.9 % || midas | 33.0 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.8 % || gvincentjosephm | 33.4 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.1 % || mrwalt | 35.0 min | 0.000 SBD | 0.000 SBD | 0.000 SP | 10.7 % || neonartist | 36.1 min | 0.262 SBD | 0.000 SBD | 0.008 SP | 9.9 % || hyperguru | 36.4 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.7 % || rasel49 | 38.2 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.9 % || bobnevv | 40.1 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 9.9 % || nievogro | 43.1 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.0 % || dimon14 | 48.0 min | 0.074 SBD | 0.000 SBD | 0.002 SP | 9.9 % || kofibeatz | 51.0 min | 0.024 SBD | 0.000 SBD | 0.001 SP | 9.9 % || zackyy | 53.6 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.0 % || allyouneedtoknow | 57.4 min | 0.448 SBD | 0.000 SBD | 0.013 SP | 9.9 % || heyimsnuffles | 62.5 min | 0.007 SBD | 0.000 SBD | 0.000 SP | 9.9 % || robinhoodupme | 62.6 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.1 % || fastpromoter | 63.3 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.7 % || digitaldruid | 65.8 min | 0.013 SBD | 0.000 SBD | 0.000 SP | 9.9 % || firefoxxxxx1 | 66.0 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.9 % || markeverlasting | 70.8 min | 0.005 SBD | 0.000 SBD | 0.000 SP | 9.7 % || lost-tiger-films | 79.9 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.3 % || joyfulstar | 82.3 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.0 % || synergenius | 82.7 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.8 % || verotti | 92.6 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.8 % || biblegateway | 93.0 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.0 % || biffboff | 102.5 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 9.6 % || bigbiggi70 | 102.9 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.2 % || nima11 | 109.8 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.0 % || samue2013 | 139.7 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 9.3 % || etka | 193.6 min | 0.062 SBD | 0.000 SBD | 0.002 SP | 9.9 % || susanalara | 202.5 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.0 % || sergnak | 262.5 min | 0.002 SBD | 0.000 SBD | 0.000 SP | 9.7 % || lpge2392 | 274.8 min | 0.011 SBD | 0.000 SBD | 0.000 SP | 9.9 % || minestein | 290.8 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.7 % || badabing94 | 308.4 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.1 % || originalathena | 308.5 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 9.0 % || senseicat | 381.2 min | 0.082 SBD | 0.000 SBD | 0.002 SP | 9.9 % || amtarek23 | 483.2 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.9 % || josewaldemar20 | 504.4 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.6 % || mecarlo | 573.6 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.7 % || aldahyr77 | 669.9 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.0 % || spllouder | 706.9 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 10.0 % || mars000 | 709.7 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.8 % || wcw15wc | 761.4 min | 0.002 SBD | 0.000 SBD | 0.000 SP | 9.8 % || drac59 | 803.5 min | 0.015 SBD | 0.000 SBD | 0.000 SP | 9.9 % || james0603 | 886.1 min | 0.002 SBD | 0.000 SBD | 0.000 SP | 10.0 % || grownsolutions | 952.3 min | 0.002 SBD | 0.000 SBD | 0.000 SP | 9.7 % || anarchistpreneur | 1012.4 min | 0.008 SBD | 0.000 SBD | 0.000 SP | 9.9 % || lulita | 1152.7 min | 0.079 SBD | 0.000 SBD | 0.002 SP | 9.9 % || izatullah | 1179.0 min | 0.003 SBD | 0.000 SBD | 0.000 SP | 9.8 % || qbearer | 1203.2 min | 0.001 SBD | 0.000 SBD | 0.000 SP | 10.4 % || | | | | | || High. vote | 2.8 min | 179.424 SBD | 162.678 SBD | 1.380 SP | 2.6 % || High. Cur. | 35.0 min | 0.000 SBD | 0.000 SBD | 0.000 SP | 10.7 % || Sum | - | 250.818 SBD | 223.562 SBD | 1.740 SP | 2.36 % |+------------------+-------------+-------------+-----------------+----------+-------------+ Early vote penaltyThe early vote penalty reduces the curation rewards pot, as the penalty amount is directly transfered from the curators to the author. In the example 223.562 SBD were removed from the complete reward pot and only 27.256 SBD remains. From these 27.256 SBD 75 % goes to the author and the remaining 25 % (6.814 SBD) remains for all curators.12curation percentage = ((250.818 - 223.562) * 0.25) / 250.818 * 100 %` The curation rewards go from 25 % down to 2.7 %. Early votes reduces the curation rewards even moreThe bid bot vote was high and early, (179.424 SBD vote, 2.8 minutes after post creation). Thus, 80 % of the curation rewards pot goes to the bid bot.So in the end, the curation rewards are only 0.54 % or 0.36 SP. Any curation rewards left?By self-voting within the first minute and using bot votes within the first 3 minutes, the curation reward pot was reduced from 25 % to 0.54 % for all other curators (from 18.44 SP to 0.36 SP). The individual curation rewards are after 30 minutes around 10 %. Gain for the authorThe bid bot vote has cost 100 SBD.With a current market conversion price of 0.8 SBD/STEEM,The remaining reward for the author after subtracting 100 SBD will be 22.524 SBD + 36.058 SP. Using bid bots without Hardfork 20 (current situation)Without any other vote than the self-vote and the bid-bot vote, the resulting payout would be123Author reward = (Votes - ((Votes - Early vote loss) * 0.25)) / 2 - Bid bot costs SBD + (Votes - ((Votes - Early vote loss) * 0.25)) / 2 / STEEM price SP Author reward = ((1.321 + 179.424) - (((1.321 + 179.424) - (1.308 + 162.678)) * 0.25)) / 2 - 100 SBD + ((1.321 + 179.424) - (((1.321 + 179.424) - (1.308 + 162.678)) * 0.25)) / 2 / 3.40 SP Author reward = -11.722 SBD + 25.964 SP The current market conversion price is 0.8 SBD/STEEM, so in the end the author gaines 9.05 SBD for an article that nobody has seen and upvoted.Currently, the proof of brain does not work. It is possible to make money with posts that nobody must read. Using bid bots with Hardfork 20Luckily there will be soon a new Hardfork 20 on steemit. In this hardfork, the early vote loss window is reduced to 15 minutes and the early vote loss is not added to author rewards but given back to the pool.What will happen when HF 20 is active with our example:123Author reward = Votes * 0.75 * 0.5 - Bid bot costs +Votes * 0.75 * 0.5 / Steem median price Author reward = (1.321 + 179.424) * 0.75 * 0.5 - 100 SBD + (1.321 + 179.424) * 0.75 * 0.5 / 3.4 SP Author reward = -32.22 SBD + 19.93 SP The current market conversion price is 0.8 SBD/STEEM, so in the end the author looses 16.28 SBD. Solution to the Visibility - Curation reward dilemmaWhen not using a bid bot, the curation reward pot remains high, but nobody may see the post and the author may receive nothing for his hard work. So using bid bots increase visiblity and assure that the author will receive something in return. At the moment curators are not necessary and only a nice gift when using bid bots within the first minutes. Luckily, a lot of bid bot seller allow only posts with a minimum age of 15 / 20 or 30 minutes. So by not using bid bots within the first 15 minutes, curators do not lose almost all curation. They have the chance to vote before and can gain high curation rewards. Curator-friendly contributionThis post is curator-friendly, I will self-vote my post after 1400 minutes (24 hours) to reward my voters. The chance is high that i will forget this, so I created a vote rule in steemdunk.xyz:I will not use bid-bots, only the nice automatic vote from qurator, Steembased income and others. ConclusionWith Hardfork 20, the proof of brain concept will be working again. I’m looking really forward to the fork!! There is also a second benefit from HF 20:All websites which are showing pending rewards will finally show the correct author reward with HF 20 (At the moment, the Early vote loss is not added to the pending author rewards). I have nothing against bid bots, only when they are used within the first minutes so that the maximum possible curation rewards are strongly reduced. This page is synchronized from the post: ‘How to reduce the curator reward from 25 % to 0.54 % with example’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-reduce-the-curator-reward-from-25-to-0-54-with-example/"},{"title":"Do you want to learn to code an ETH-DApp?","text":"Yesterday I found a really great site about learn how to code a ETH-DApp game: https://cryptozombies.io/ You do not need an ETH wallet, just an Email-Adress for registration.There are 6 Lessons containing several chapters. Each Lesson consists of new stuff to learn with an example: Introduction how to pass the test: A code editor with the progress from the last chapter:and finally a check answer button: I’m not finished with all lessons, but I had fun so far. This is a really great experience and helps to understand dapps better. P.S.:The solution to this chapter is:12345// start herestruct Zombie { string name; uint dna;} This page is synchronized from the post: ‘Do you want to learn to code an ETH-DApp?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/do-you-want-to-learn-to-code-an-eth-dapp/"},{"title":"python-steem 1.0.1 released","text":"A new version 1.0.1 of python-steem was released today to pypi.I updated also the steem-feedstock.You can update to the newest version of python-steem by:When using anaconda:1conda update steem or when not using anaconda:1pip install -U steem Downloads of the last version 1.0.0 for steem-feedstock Changelog python-steem 1.0.1Since there is no official changelog provided, I will provide an inofficial one: change_account_recovery operation added Refactored MasterPassword (PR) 123456789101112WrongMasterPasswordException - renamed WrongKEKExceptionMasterPassword - renamed KeyEncryptionKeyWallet.unlock - pwd in signature changed to user_passphraseWallet.getPassword - changed to Wallet.getUserPassphraseWallet.changePassword - changed to Wallet.changeUserPassphraseStorage.saveEncryptedMaster - changed to Storage.saveEncryptedKEKStorage.getEncryptedMaster - changed to Storage.getEncryptedKEKStorage.decryptEncryptedMaster - changed to Storage.decryptEncryptedKEKStorage.newMaster - changed to Storage.newKEKStorage.changePassword - changed to Storage.changePassphrase ignore verify_authority failure for specific steem bug (PR) assume appbase, downgrade on error (PR) Added JSONDecodeError to list of retriable errors(PR) several bug fixes This page is synchronized from the post: ‘python-steem 1.0.1 released’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-steem-1-0-1-released/"},{"title":"Status report for full rpc nodes - 25.05.2018","text":"source What is a full RPC node and why it is necessaryA full RPC node contains all STEEM blocks and several databases, in which e.g. account-related transactions, followers for an account, all posts of a blog from an account, …. are stored. Without nodes, the steemit site would be down, there would be no bid-bots and services as steemauto.com or GINAbot would not work. Complete RPC node listAll nodes have support for https://. For nodes with websocket support (WSS is yes), wss:// has to put in front. All which have websocket support are checked twice (1x https and 1x wss).The node version was read out from the server itself, and when this was not possible (node did not respond) a question mark is shown instead. Server WSS Ran By Version steemd.privex.io yes privex 0.19.2 steemd.pevo.science yes pharesim 0.19.2 rpc.steemliberator.com yes netuoso ? rpc.buildteam.io yes themarkymark 0.19.3 gtg.steem.house:8090 yes gtg 0.19.3 rpc.steemviz.com yes ausbitbank 0.19.3 seed.bitcoiner.me yes bitcoiner ? steemd.steemgigs.org yes steemgigs ? steemd.minnowsupportproject.org yes followbtcnews ? rpc.curiesteem.com no curie 0.19.3 api.steem.house no gtg 0.19.4 appbasetest.timcliff.com yes timcliff 0.19.4 api.steemit.com no Steemit Inc. 0.19.4 api.steemitstage.com no Steemit Inc. 0.19.4 api.steemitdev.com no Steemit Inc. 0.19.4 api.steemitstage.com and api.steemitdev.com may contain newer node versions and should be used only with care. Working RPC nodeA node is working, when: returns data within 30 seconds, blocks can be streamed, account history is possible, votes, a comment, followers from an account and an account can successfully be fetched and are not empty. When a node is fully working the following measurements are shown: N blocks is the number of blocks which can be received in 30 seconds. N acc hist is the number of account transaction which can be received in 30 seconds. The batch call size is set to 100. Dur. call in s is the mean duration to receive an account, a comment, all followers from an account and a vote from the node. Results (Small fix, I did use an old permlink before)The following statistics were gained with beem. node N blocks N acc hist dur. call in s wss://steemd.privex.io 122 34644 0.90 wss://rpc.buildteam.io 131 34139 1.23 wss://gtg.steem.house:8090 not work. 25857 1.20 https://rpc.buildteam.io 31 17575 2.19 https://api.steemitstage.com 51 10000 2.29 https://api.steemitdev.com 50 9798 2.30 https://api.steemit.com 49 9394 3.14 https://api.steem.house 27 4445 7.10 https://steemd.pevo.science 6 1819 28.72 wss://appbasetest.timcliff.com 135 597 0.94 https://appbasetest.timcliff.com 9 597 20.01 Set fully working nodes with beempyhttps://api.steemitstage.com, https://api.steemitdev.com and nodes with not working results were excluded.1beempy set nodes [&apos;wss://steemd.privex.io&apos;, &apos;wss://rpc.buildteam.io&apos;, &apos;https://rpc.buildteam.io&apos;, &apos;https://api.steemit.com&apos;, &apos;https://api.steem.house&apos;, &apos;https://steemd.pevo.science&apos;, &apos;wss://appbasetest.timcliff.com&apos;, &apos;https://appbasetest.timcliff.com&apos;] Comparison with last monthYou can find my last post here.wss://steemd.privex.io is again the fastest node.The Steemit Inc. nodes and api.steem.house are also in good shape.rpc.buildteam.io and appbasetest.timcliff.com are fully working now. This page is synchronized from the post: ‘Status report for full rpc nodes - 25.05.2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/status-report-for-full-rpc-nodes-25-05-2018/"},{"title":"Does the steem blockchain comply with the GDPR and European privacy laws?","text":"Steemit inc. has updated their privacy site: https://steemit.com/privacy.html and comply now with the GDPR (General Data Protection Regulation). But what is with the steem blockchain itself? source Personal data (Art. 4.1) ‘personal data’ means any information relating to an identified or identifiable natural person (‘data subject’); an identifiable natural person is one who can be identified, directly or indirectly, in particular by reference to an identifier such as a name, an identification number, location data, an online identifier or to one or more factors specific to the physical, physiological, genetic, mental, economic, cultural or social identity of that natural person; Pseudonymisation (Art. 4.5) ‘pseudonymisation’ means the processing of personal data in such a manner that the personal data can no longer be attributed to a specific data subject without the use of additional information, provided that such additional information is kept separately and is subject to technical and organisational measures to ensure that the personal data are not attributed to an identified or identifiable natural person; So by default, only pseudonymisation data are stored in the blockchain, as public keys and user names. Normally, a person cannot be identified by a username or public key. Only when the person itself publish information about themself, which allow an identification, a connection between a public key an username and a natural person exists. Right to be forgotten (Art. 17)Assuming, I wrote a post in which my name is included and I want it to be deleted. Where the controller has made the personal data public and is obliged pursuant to paragraph 1 to erase the personal data, the controller, taking account of available technology and the cost of implementation, shall take reasonable steps, including technical measures, to inform controllers which are processing the personal data that the data subject has requested the erasure by such controllers of any links to, or copy or replication of, those personal data. Means, when it is not too costly and complicated, the data should be deleted otherwise not. Steemit Inc. should ask Google and other search engines to exclude the post link from their search results. Furthermore: Paragraphs 1 and 2 shall not apply to the extent that processing is necessary: a) for exercising the right of freedom of expression and information; d) for archiving purposes in the public interest, scientific or historical research purposes orstatistical purposes in accordance with Article 89(1) in so far as the right referred to in paragraph 1 is likely to render impossible or seriously impair the achievement of the objectives of that processing; or This means for me, that blockchain data are excluded to the right to being forgotten. Deletion of blockchain data means, deleting of the entire blockchain or doing a hardfork. The first one would overlap with a) for exercising the right of freedom of expression and information; and the second point overlap with for archiving purposes in the public interest, scientific or historical research purposes or statistical purposes in accordance. ConclusionAs the steem blockchain is completely public and its data are of public interest, it may protected by Art. 89: Safeguards and derogations relating to processing for archiving purposes in the public interest, scientific or historical research purposes or statistical purposes.Thus, for me, the steem blockchain is not illegal after the GDPR is active in the EU. As long there is no search engine in steemit (it uses google), I don’t see a problem with GDPR. DisclaimerI’m not a lawyer and this is not a legal advice. This page is synchronized from the post: ‘Does the steem blockchain comply with the GDPR and European privacy laws?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/does-the-steem-blockchain-comply-with-the-gdpr-and-european-privacy-laws/"},{"title":"Update for beem - all broadcast operation are now supported and beempy curation improved","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 477 unit tests and a coverage of 81 %. The current version is 0.19.32. I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V New FeaturesMissing broadcast operation were added Account_witness_proxy added Custom added Custom_binary added Prove_authority added Limit_order_create2 added Request_account_recovery added Recover_account added Escrow_transfer added Escrow_dispute added Escrow_release added Escrow_approve added Decline_voting_rights addedactive key permission can be used for posting operationWhen no posting key is found, an active key is used instead for signing posting operation (e.g. voting).When no key could be found, MissingKeyError is now always raised when a transaction should be signed. refactoring of beem beemgrapheneapi is depreated and all python files are moved to beemapi GrapheneRPC uses now a Nodes class instead of cycle([urls]) get_nodes_list is removed from beem.utils and available in beem.nodelist.get_replies added to Comment class123from beem.comment import Commentc =Comment(&quot;@utopian-io/people-of-utopian-2-nepeta&quot;)replies = c.get_replies() Keys for accounts with more than one key can be obtained getKeysForAccount added getOwnerKeysForAccount, getActiveKeysForAccount, getPostingKeysForAccount addedbeempy curation improvedBesides the curation of a single post, the complete curation history of the last d (default is 7) days can be displayed. The curation command shows all votes from now on and goes backward. The first 7 days are pending rewards and then paid curation rewards are shown, when -d is set to a number higher than 7.E.g.1beempy curation -a holger80 -v 0.5 -x 100 -s shows the curation of the last 7 days for votes higher than 0.5 SBD and with a performance better than 100 %. -s supresses the summery:There are two votes with a performance better than 100%.Without -s:The highest vote and the vote with the highest curation performance are addionally shown for each post. The sum shows the resulting sum of all votes. The performance is in this case the curation percentage (maximum value is 25 %). It possible to analyze a post by taking the id which is shown by the author name (ihtiht/logo-design-contribution-for-gplanner can also be used instead of 24) : -e curation.html exports the result as html file -p shows the permlink -t shows the title#### Commit historyAdd missing operations with unit tests commit 17679d6beembase\\objects Amount improve handling of new appbase Amount formatbeembase\\operations missing broadcast operation were addedUnit tests add test_order_create2, test_witness_proxy, test_custom, test_request_account_recovery, test_recover_account, test_escrow_transfer, test_escrow_dispute, test_escrow_release, test_escrow_approve, test_decline_voting_rights, test_delegate_vesting_shares, test_account_create_with_delegation added Comment: get_replies added, get_curation_penalty improved and get_rewards fixed commit 25ce837 beemgrapheneapi is deprecated, all classes and functions are available under beemapi commit 951d832 Fix remaining references to beemgrapheneapi and fix not working wss:/testnet.steem.vc commit 0c0fbf2 common steem constants added and used in account, comment and steem commit bac8b3c Add unit test for constants commit 9199f83 Add export option for curation and votes commit 1b7ab8cCLI speed up votes and added export to text file curation can be used to export all pending curation rewards of one account New nodes class for better node url handling commit a261c53Wallet getKeysForAccount added getOwnerKeysForAccount, getActiveKeysForAccount, getPostingKeysForAccount addedbeemapi WorkingNodeMissing is raised when no working node could be foundGrapheneRPC cycle([urls]) is replaced by the nodes classNodes Node handling and management of url and error_counts is performed by the nodes class sleep_and_check_retries is moved to the nodes class Websocket, steemnodrpc were adpapted to the changesUnit tests new tests for the nodes class tests adapted for websocket and rpcutils NodeList class added for better nodelist handling commit 223ac87NodeList replaces get_node_list from utils.py is a list and contains all nodes as dict get_nodes() returns the url in a listUtils get_node_list removedUnit Tests and Examples adapted to the changes Several improvements commit Account datetime.date is also supportedCLI curation improvedComment doc improvedTransactionbuilder doc fixed owner key is used, when provided and when no other permission is givenutils datetime.date supportedWallet raise MissingKeyError when a wrong key is given by Steem(keys=[])Unit tests several unit tests has to be changed as now it is really tested if a given wif belongs to the account or not.If keys are empty try with next higher permission commit 56faf8cFix flake8 and add unit tests for permission downgrade commit b66d97fFix and improve curation even more commit 122e234GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for beem - all broadcast operation are now supported and beempy curation improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-all-broadcast-operation-are-now-supported-and-beempy-curation-improved/"},{"title":"Update for beem - steemconnect integration and bug fixes","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 481 unit tests and a coverage of 78 %. The current version is 0.19.33. I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug Fixes for Race condition in blockchain.blocks() when using threads The bug was described in detail here. Fix in commit 7c8b53 The problem was the auto_clean function for the cache. When using threads, auto_clean is now disabled with set_cache_auto_clean(False) and the cache is manually cleaned with clear_cache_from_expired_items() when all threads are finished.When blocks() finishes, set_cache_auto_clean(auto_clean) is set to the old value. SteemConnect integrationInspired by steemconnect-python-client by @emrebeyler, SteemConnect is now integrated into beem. I created @beem.app inside steemconnect for testing (https://v2.steemconnect.com/apps/). The following steps were done to integrate steemconnect properly: A new Token class was added to beem/storage The following function were added to beem/wallet: setToken clear_local_token encrypt_token decrypt_token addToken getTokenForAccountName removeTokenFromPublicName getPublicNames a SteemConnect class was created (based on client.py from steemconnect-python-client) Integration into TransactionBuilder and Steem You see a diff between both functions here (On the left side is client.py shown and on the right side steemconnect.py from beem). White ares indicate that both files are identically. Usagebeem.steemconnect can be used to create steemconnect links for broadcasting transactions.In the first example, nobroadcast=True and unsigned=True is used to disable signing and broadcasting. When then a broadcasting operation is called, the unsigned transaction is returned and entered into url_from_tx. This function from SteemConnect returns then a steemconnect v2 link which can be entered into the browser.12345678from beem import Steemfrom beem.account import Accountfrom beem.steemconnect import SteemConnectfrom pprint import pprintsteem = Steem(nobroadcast=True, unsigned=True)sc2 = SteemConnect(steem_instance=steem)acc = Account(&quot;test&quot;, steem_instance=steem)pprint(sc2.url_from_tx(acc.transfer(&quot;test1&quot;, 1, &quot;STEEM&quot;, &quot;test&quot;))) results in:1&apos;https://v2.steemconnect.com/sign/transfer?from=test&amp;to=test1&amp;amount=1.000+STEEM&amp;memo=test&apos; It is also possible to create a operation by hand: 1234567891011121314from beem import Steemfrom beem.transactionbuilder import TransactionBuilderfrom beembase import operationsfrom beem.steemconnect import SteemConnectfrom pprint import pprintstm = Steem()sc2 = SteemConnect(steem_instance=stm)tx = TransactionBuilder(steem_instance=stm)op = operations.Transfer(**{&quot;from&quot;: &apos;test&apos;, &quot;to&quot;: &apos;test1&apos;, &quot;amount&quot;: &apos;1.000 STEEM&apos;, &quot;memo&quot;: &apos;test&apos;})tx.appendOps(op)pprint(sc2.url_from_tx(tx.json())) results in:1&apos;https://v2.steemconnect.com/sign/transfer?from=test&amp;to=test1&amp;amount=1.000+STEEM&amp;memo=test&apos; Creating SteemConnect links with beempyBy adding -l as option, all available broadcast operation can be converted into a link:1beempy -l claimreward holger80 results in1&quot;https://v2.steemconnect.com/sign/claim_reward_balance?account=holger80&amp;reward_steem=0.048+STEEM&amp;reward_sbd=3.842+SBD&amp;reward_vests=5093.882902+VESTS&quot; Fetching a steemconnect app tokenIn examples/login_app, an example app.py can be found. This example was adapted from steemconnect-python-client. Set the client_id, the scope and unlocking the wallet by entering the correct passphrase.The flask app can be started by1flask run Enter http://127.0.0.1:5000/ in a browser and click on the link.After entering a username and password, the generated token is stored in the wallet. Using the app token for broadcasting via SteemConnect12345678from beem import Steemfrom beem.steemconnect import SteemConnectfrom beem.comment import Commentsc2 = SteemConnect(client_id=&quot;beem.app&quot;)steem = Steem(steemconnect=sc2)steem.wallet.unlock(&quot;supersecret-passphrase&quot;)post = Comment(&quot;author/permlink&quot;, steem_instance=steem)post.upvote(voter=&quot;test&quot;) # replace &quot;test&quot; with your account Using the app token for broadcasting via SteemConnect in beempyBy adding -s as option, all broadcast operation as upvote are broadcast via Steemconnect1beempy -s upvote -a test -w 100 @author/permlink beempy listtokenThis command can be used to show all stored token: Commit historyInclude steemconnect v2 to beem commit b95afdfsteem add steemconnect in init, when set, steemconnect is used for broadastingsteemconnect new class can be used to broadcast operation with steemconnect v2storage Token class to store encrypted tokenTransactionbuilder use steemconnect broadcast with set in steemWallet add token storage class add setToken, clear_local_token, encrypt_token, decrypt_token, addToken, getTokenForAccountName, removeTokenFromPublicName, getPublicNamesExample Add login app for testing steemconnect Fix issue #16 commit 7c8b53 Several improvements and fixes commit 97711e5Account Example added for transferNodelist Doc addedSteem steemconnect integration improved and use_sc2 added Docu improvedSteemConnect compatible with py2.7 several improvements Examles addedTransactionbuilder Integration of steemconnect improvedWallet fix bugSteemNodeRPC fix old and removed parameter n_urlsDoc Fix bug in tutorial page Creating links for signing with SC2 commit 249bdb4 url_from_tx function added, which can be used to create url for signing with steemconnect v2 Authomatic url creation removed Add option to create url from all broadcast operation to beempy commit 8b949dCLI Add -l option to beempy Add -s option for broadcast via steemconnect addtoken, listtoken and deltoken added Add doc - files for nodelist, steemconnect and nodeStorage sc2_scope removed from config hot_sign_redirect_uri added to config Some improvements for steemconnect commit e21be76 Converts amounts from list to string (appbase) Unit test for steemconnect addedTransactionbuilder Remove log line GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for beem - steemconnect integration and bug fixes’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-steemconnect-integration-and-bug-fixes/"},{"title":"Current state of hardfork 0.20.0 development - 30.05.2018","text":"sourceCurrently merged issues for hardfork 0.20.0:0_20.hf12345678910#define STEEM_HARDFORK_0_20__409 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1620 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1760 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1764 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1765 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1782 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1811 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__1815 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__2019 (STEEM_HARDFORK_0_20)#define STEEM_HARDFORK_0_20__2428 (STEEM_HARDFORK_0_20) Merged changesPotential unexpected behavior while calculating median feed? #409 no impact, assert is added to assure correct entering of price feed by witnesses Flexible witness parameter operation #1620 minor impact: creates a new api function for allowing witnesses to set one parameter instead of all at once. Deprecate account_create_with_delegation_operation #1760 medium impact: the account_create_with_delegation_operation will be removed. In HF 20, it is possible to create a new account by paying STEEM and there will be a limited possibility to create a new account for 0 STEEM (Discount Account Creation. (Remove ?) vote dust threshold #1764 medium impact: This change reduces all casted votes by around 1.23 SP. With the current implementation, 2.46 SP are needed to cast a successful vote. This change will strongly reduce the effectiveness of small account vote accounts.123456789if( db.has_hardfork( STEEM_HARDFORK_0_20__1764 ) ){ info-&gt;abs_rshares -= STEEM_VOTE_DUST_THRESHOLD; info-&gt;abs_rshares = std::max( int64_t(0), info-&gt;abs_rshares );}if( db.has_hardfork( STEEM_HARDFORK_0_14__259 ) ){ FC_ASSERT( info-&gt;abs_rshares &gt; STEEM_VOTE_DUST_THRESHOLD || vote_weight == 0, &quot;Voting weight is too small, please accumulate more voting power or steem power.&quot; );} Witness Parameter: Daily Discounted Account Limit #1765 medium impact: witnesses can control how many accounts can be created for 0 STEEM each day. Temp Account Creation Recovery Account #1782 minor impact: Accounts created by STEEM_TEMP_ACCOUNT will not have a recovery_account anymore Move sufficient balance checks to adjust_balance #1811 no impact: adds assert checks to assure all balances are not negative Change assert() in database::match() to FC_ASSERT() #1815 no impact: code cleanup Remove challenging authorities #1848 state: merged no impact, this change is a code clean up, challenging authorities were never implemented removal of 20s comment limit #2019 medium impact: comment interval is reduced to 3s. (Post interval remains at 5 minutes) Possible reward pool gaming by cycling delegations #2428 medium impact: The delegation return period is increased from 7 days to 10 days. Unmerged changesBlock size can eclipse p2p max message size. # 1655 state: soft fork changes merged no impact: creates a new maximum block size boundary (2 MB) Revert Modified Account Creation Fee #1761 the account creation fee, which is specified by the witnesses, will be the true creation fee (30x removed) Lost curation rewards from the reverse auction should go back to rewards pool #1877 major impact: lost curation rewards (voting within the first 30 minutes /15 minutes on HF20) will not go to the author anymore, it will go back to the rewards pool instead. Reduce reverse auction time #1878 major impact: The vote curation penalty window is reduced from 30 minutes to 15 minutes There are 12 further issues on the to-do list, which I will not list here. You can find them here https://github.com/steemit/steem/projects/3: This page is synchronized from the post: ‘Current state of hardfork 0.20.0 development - 30.05.2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/current-state-of-hardfork-0-20-0-development-30-05-2018/"},{"title":"Task request for beem: bug-hunting","text":"Repository https://github.com/holgern/beem About beembeem is an unofficial python library for steem, which I created from scratch by forking python-bitshares. The library name is derived from a beam maschine, similar to the analogy between steem and steam. A documentation about beem can be found here: http://beem.readthedocs.io/en/latest/. I pushed the first commit on the 14 Feb. 2018 to github. Since then, the code base was growing from 5288 lines of python code to 18232 lines of code. The current version is 0.19.35 and it contains the following features: RPC interface (ttps and websocket) for full API nodes Node failure handling Support for almost all steem API calls JSON-based blockchain objects (accounts, votes, comments, blocks, prices, markets, etc) a simple to use yet powerful API transaction construction and signing appbase ready steemconnect v2 integration it’s own (bip32-encrypted) wallet for key and token storage command line tool beempy Although the total test coverage is on a good level (78% currently), it is not everything covered. High code coverage does also not mean that the code cannot contain bugs anymore. It shows that the code can run without error and returns the predefined output for certain input data. Manual testing remains very important for beem, due to the high number of code lines and the huge functionality which beem has to offer. So, I’m asking everyone to help me improving beem, by finding bugs in beem. Details / ComponentsThis task request is about finding bugs inside the python library beem.This includes all function inside the following python modules: beem beemapi beembase beemgraphenebase The request is not about errors that occurred in installing dependent python libraries (e.g. scrypt). Content of a good bug hunting postA good bug hunting post must contain the following sections: Expected behaviorPlease describe in detail about the expected behavior. “It must return a value”, or similar platitudes are not sufficient. After reading this section, it must be clear, what the expected behavior is. This helps me to understand the described error. Example (not related to beem):The int_sum function should return the sum of two integer numbers. Actual behaviorPlease describe shortly about the current situation. “It does not work”, is not sufficient. Example (not related to beem):When one number is zero, the int_sum function returns zero instead of the other non-zero number. How to reproduceA python script with output, which is able to reproduce the described error, helps a lot in finding the source of the error. Example (not related to beem):123import int_sumx = int_sum(0, 1)print(x) Output:10 EnvironmentThe used python and beem version is important for repoducing the error (Different behavior for unicode strings on python 2.7 and 3.6, for example).The beem version can be obtained by beempy --version. Creating an issue on https://github.com/holgern/beemAfter writing a utopian-io post about a bug, a new issue should be created in the beem github repo: https://github.com/holgern/beem/issues/new. This is important for collecting all bug reports in one place and for mention it when fixing it. DeadlineThis task request has no deadline, as it will stay open. CommunicationFor more information please visit the beem discord server: https://discord.gg/4HM592V Githubhttps://github.com/holgern This page is synchronized from the post: ‘Task request for beem: bug-hunting’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/task-request-for-beem-bug-hunting/"},{"title":"My Witness Application - holger80","text":"You know me probably as developer of beem, an alternative python library for steem. I joined steem in 29.12.2017. In the first two months, I learned the fundamentals of steem and I was searching my niche. I always wanted to write a huge python library and after studying the source code of python-steem, I knew that I will create an alternative python library for steem. Since the 14. Februar, I worked every free hour on beem, the alternative python library. I took the source code from python-bitshares and added 12944 lines of code. In total, I pushed 450 commits in which I added 70796 lines and in which I removed 49246 lines of python code and documentation. (holgern is my github account name) I discovered utopian-io and published regularly new post about newly added features there. Currently, I’m working on the 36. release of beem and I’ve started a new project in which a pushed every hour updates about the full-node state to the account @fullnodeupdate. The full node state can be obtained by reading the json_metadata of this account. I will post in more detail about this project soon. My commitment to steemIn the last 5 month, I invested a huge amount of my saving into steem. Until now, I never powered down. I’m trying to support all developer who posts for utopian-io by upvoting their content.As I mentioned, I develop beem and I’m trying to help all steemit user, who want to use my library. You can see my latest post about beem developement here: https://steemit.com/utopian-io/@holger80/update-for-beem-steemconnect-integration-and-bug-fixes. I’m also visiting often the official steem github. I wrote Current state of hardfork 0.20.0 development - 30.05.2018 and found a bug in the steem source code (#1764) which leads to #2515. I published a complete appbase-api call reference in this post: https://steemit.com/appbase/@holger80/api-methods-list-for-appbase. My witness server setupI rented a server with the following specification: 64 GB DDR4 RAM Intel® Core™ i7-6700 Quad-Core 1 GBit/s 2 x 240 GB SATA 6 Gb/s SSD I installed Ubuntu 16.04 and I’m using the stable branch of the steem github. I did the following steps to assure that everything will run smoothly: ssh port is changed root login is disabled fail2ban is installed 4 GB swap partition is created zram compression is active I created a 131GB ram partition (2*RAM + SWAB - 1 GB) I compiled and installed steemd and cli_wallet (LOW_MEMORY_NODE=ON, CLEAR_VOTES=ON, SKIP_BY_TX_ID=ON and CMAKE_BUILD_TYPE=Release) I checked and added seed-nodes to the config file I replayed the blockchain and installed a systemd service for steemd Created a python pricefeed script which is started by crontab Everything is running now and 40 GB RAM are used at the moment. VoteIf you want to support me, you can vote for me as one of your witnesses by entering my name in the voting field for lower ranked witnesses in https://steemit.com/~witnesses You can also vote via steemconnect: https://v2.steemconnect.com/sign/account_witness_vote?witness=holger80&amp;approve=1 This page is synchronized from the post: ‘My Witness Application - holger80’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/my-witness-application-holger80/"},{"title":"Measuring seed-node ping times with python","text":"Almost every tutorial for setting up a witness node mention that it is important to ping all seed-nodes and add the fastest nodes to the config.ini file. For improving this process, I wrote a small python script, which: measure ping times sort the seed nodes exclude slow nodes creates entries for the config.ini file You can find the script here https://github.com/holgern/steem-witness-tools. Steps for running the script on your witness server: install python3 and pip3 install ping3 by pip3 install ping3 --user cloning my git: git clone https://github.com/holgern/steem-witness-tools.git You may copy the newest seednodes.txt from https://github.com/steemit/steem/blob/master/doc/seednodes.txt Enter the sort_seed_nodes directory (cd sort_seed_nodes) Run the script by sudo python3 ping_seed_nodes.py as root Copy the result directly to your config.ini Script arguments It is possible to modify the maximum allowed ping time in milliseconds. Default is 100 ms, which means that all seed nodes are included with a ping time better than 100 ms. In the following example, the maximum time is set 50 milliseconds:1sudo python3 ping_seed_nodes.py --maxdelay 50 It also possible to use a different seed-node.txt file as source. It must follow the same structure as the seed-node.txt file.12seed-east.steemit.com:2001 # steemitseed-url:port # owner The inputparameter allows to use different files as source:1sudo python3 ping_seed_nodes.py --input my-seed-nodes.txt Result The results are also stored in sorted_seednodes_6_6_2018.txt, the name is adapted to the date. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approve your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: This page is synchronized from the post: ‘Measuring seed-node ping times with python’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/measuring-seed-node-ping-times-with-python/"},{"title":"Update for beem - fullnodeupdate integrated and witness tools added","text":"Repository https://github.com/holgern/beem beem is a python library for steem. beem has now 500 unit tests and a coverage of 78 %. The current version is 0.19.36.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug fix for: Cannot fetch account history of early created accounts, block number estimation gives negative values The bug was described in detail here. Fix in commit 6f30570 The bug could be fixed by allowing only positive block_numbers inside the block number estimation function. Obtain a ranked full API node list from @fullnodeupdateI created the new account fullnodeupdate and I’m sending an account update every hour with JSON Metadata including: nodes failing_nodes report parameter I will publish a post about this project and releasing the source code. I created a update_nodes function in the NodeList class. First, I’m extracting the json-metadata:123456account = Account(&quot;fullnodeupdate&quot;, steem_instance=steem)metadata = json.loads(account[&quot;json_metadata&quot;])report = metadata[&quot;report&quot;]failing_nodes = metadata[&quot;failing_nodes&quot;]parameter = metadata[&quot;parameter&quot;]benchmarks = parameter[&quot;benchmarks&quot;] The obtained data are used to generate a score for each working node.1234from beem.nodelist import NodeListnodes = NodeList()nodes.update_nodes()print(nodes.get_nodes()) returns the ranked nodes:12[&apos;wss://rpc.steemviz.com&apos;, &apos;wss://steemd.pevo.science&apos;, &apos;wss://steemd.minnowsupportproject.org&apos;, &apos;wss://steemd.privex.io&apos;, &apos;wss://rpc.buildteam.io&apos;, &apos;wss://gtg.steem.house:8090&apos;, &apos;https://rpc.buildteam.io&apos;, &apos;https://api.steemit.com&apos;, &apos;https://api.steem.house&apos;, &apos;https://rpc.steemviz.com&apos;, &apos;https://gtg.steem.house:8090&apos;, &apos;https://steemd.pevo.science&apos;, &apos;https://steemd.minnowsupportproject.org&apos;, &apos;https://rpc.curiesteem.com&apos;]` I’m using update_nodes() in the beginning of each unit test now and it worked great. beempy nodesupdatebeempy nodesupdate --showNodes with negative scores will not be considered. beempy keygenThis command creates a new random brain key, which is not related to any account. This can be used as witness signing key. beempy witnessfeed Uses the exchange API calls to determine the current BTC_USD and the STEEM_USD prices and calculates the base base from it. The quote can be either “1 STEEM”, or when support-peg is set, it will be inverse of the SBD_USD price. This price is calculated from the internal STEEM_SBD market.I used source code from https://github.com/Netherdrake/conductor/blob/master/conductor/markets.py. beempy witnessfeed holger80 beempy witnessThis command shows information about a witness.beempy witness holger80Added information: rank: witness rank active_rank: active witness rank virtual_time_diff: Difference between virtual_scheduled_time and current_virtual_time block_diff_est: virtual_time_diff*int(witness_schedule[&quot;num_scheduled_witnesses&quot;]) / (lap_length / (vote_sum + 1)), where lap_length = config[&quot;VIRTUAL_SCHEDULE_LAP_LENGTH2&quot;] and vote_sum is the summed up votes of the first 250 witnesses. time_diff_est : block_diff_est * 3 seconds The virtual_scheduled_time increases every 21 block by VIRTUAL_SCHEDULE_LAP_LENGTH2/(vote_sum + 1). I used this information, for a time estimation of the next block signing of a witness. beempy witnessenableCan be used to enable a disabled witness or for a fall-back to a second witness server with a different signing key. beempy witnessdisableDisables a witness by replacing the signing key by STM1111111111111111111111111111111114T1Anm. Commit historyFixes #17 commit 6f30570 Several Bug fixes commit e7159e2 added use_stored_data to all steem function that uses constants e.g. get_config() Fix author for steem.post(), when a account object is entered **kwargs added to all broadcast function of steemAccount fix desribtion of update_account_profile added update_account_metadata More bug fixes commit b4f8cfbVotes fix ActiveVotes when no vote are made for a commentSteemconnect Try to fix for python 2.7Fix test_wallet unit test More improvements commit 5f156fd Raise OfflineHasNoRPCException in offline mode, when rpc should be used Unit test for beneficiaries Fixes bug for python 2.7 in blockchain Use fullnodeupdate for updating the node score in all unit tests commit 7a9fe77CLI updatenodes added, this command can be used to update the nodes listNodeList update_nodes added, this command reads the metadata from fullnodeupdate, which contain newest nodes information add option wss and https fo get_nodesUnit tests use updatenodes in all tests Add more witness commands to cli commit 6b89da1CLI add witnessenable, witnessdisable, witnessfeed and witnessVote fix reputation Huge witness update commit 709efc7Market _weighted_average, btc_usd_ticker, steem_btc_ticker and steem_usd_implied addedWitness get_votes_sum added to witnesses objectGraphenerpc fix handling of WebSocketConnectionClosedExceptionCLI witnessfeed: uses the new market ticker to calculate the current steem_usd price as base. When using support-peg the sbd_usd price is calculated from the internal ticker and used for quote. Witness: shows the rank and active rank (when it is below 250). virtual_time_to_block_num is calculated from num_scheduled_witnesses, VIRTUAL_SCHEDULE_LAP_LENGTH2 and vote_sum. This is then used to estimate the next block producing time. witnesses uses a proxy now, when set. Add vote count and remove suppress import commit 46f0a76 keygen added and parasewif improved commit cb05ee5 GitHub Accounthttps://github.com/holgern If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘Update for beem - fullnodeupdate integrated and witness tools added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-fullnodeupdate-integrated-and-witness-tools-added/"},{"title":"Robust price feed publishing with beempy","text":"As you may read in my last beem update, I released version 0.19.36. The command line tool beempy has now a robust price feed publish function for witnesses. What does robust mean?The other available price feed tools have the problem that a working full-node has to be set. Otherwise, the feed cannot be broadcasted. Robust means that broadcasting is always possible, no matter if all but one full node are failing. Why is beempy robust?beempy can be used together with updatenodes, which receives an hourly updated full-node configuration. You can see the hourly account updates here: https://steemd.com/@fullnodeupdate beempy updatenodes fetches the actual node configuration and is building a score. All nodes with positive score are than set as default nodes. Price feed publishingThe price feed can be published with beempy witnessfeed. --support-peg can be set to support peg. If not set, quote is always 1 STEEM. The base price is calculated from btc_usd and steem_usd prices similar to the conductor from @furion. It uses for BTC_USD12345&quot;https://api.bitfinex.com/v1/pubticker/BTCUSD&quot;,&quot;https://api.gdax.com/products/BTC-USD/ticker&quot;,&quot;https://api.kraken.com/0/public/Ticker?pair=XBTUSD&quot;,&quot;https://www.okcoin.com/api/v1/ticker.do?symbol=btc_usd&quot;,&quot;https://www.bitstamp.net/api/v2/ticker/btcusd/&quot;, and for STEEM_BTC:123&quot;https://poloniex.com/public?command=returnTicker&quot;,&quot;https://bittrex.com/api/v1.1/public/getmarketsummary?market=BTC-STEEM&quot;,&quot;https://api.binance.com/api/v1/ticker/24hr&quot;, SBD_USD (only needed when supporting PEG) is calculated from the internal market. Installing and setting up beempyThe alternative package installer pip/pip3 for python3 is needed. It can be installed on ubuntu by:1sudo apt-get install python3-pip In the next step, beem is installed for the current user by:1pip3 install beem -U --user In the first step, a new wallet should be created:1beempy createwallet The active key of the witness account has to be stored in the wallet:1beempy addkey We need to know where beempy is installed:1which beempy I wrote a small script for unlocking the wallet, updating the nodes and publishing a price feed:1234#!/bin/bashexport UNLOCK=&apos;secret_password&apos;/home/holger80/.local/bin/beempy updatenodes/home/holger80/.local/bin/beempy witnessfeed holger80 I saved this script as update_feed and added it to a crontab by runningcrontab -e and entering:10 * * * * (sh /home/holger80/update_feed) &gt;&gt; /tmp/crontab.log 2&gt;&amp;1 You can check /etc/crontab.log if everything is working fine. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approve your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: Measuring seed-node ping times with python My Witness Application - holger80 This page is synchronized from the post: ‘Robust price feed publishing with beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/robust-price-feed-publishing-with-beempy/"},{"title":"Witness update #1 - first unexpected server reboot","text":"Today I learned that letting a witness server running 24/7 is quite a challenge job. This morning, my server was not reachable anymore. After contacting the support and managing to power on the server, I saw that the RAID SSD drive was mounted readonly. Thus, all scripts failed and the blockchain file was damaged. I had to start replaying again. At first, I disabled my signing key by:1beempy witnessdisable After remounting in write mode, downloading the blockchain file from gtg, I’m replaying at the moment. In the meantime, I wrote some scripts to speed downloading and replaying for the next unexpected reboot. You can find my scripts here:https://github.com/holgern/witness-shm-setupIt is a work in progress.When the replay is finished, I will set my signing key again. In order to prevent a complete replay, I wrote two scripts, one for backup the ramdisk:1rsync --quiet --archive --delete --recursive --force /dev/shm/ ${shm_backup_dir} and one script for restoring it12mount -o remount,size=${shared_file_size} /dev/shmrsync --quiet --archive ${shm_backup_dir}/ /dev/shm/ I hope, this will save time and let me start steemd directly after restoring. Witness rank and activityMy active rank is currently #135. Thanks again for the support! I will sign my first block in about 9 days. I released a new update for beem and I’m very active in the beem-discord server. I’ve answered all kind of questions and fixed some bugs in beem. I’ve worked on my new @fullnodeupdate project. This project provides a list of currently working nodes. Currently, It is only used by beem, but it can be used in all steem related libraries, steem-js, python-steem, ….. The only requirement is that the library understand json and can read json_metadata from an account. I’m currently spending my entire free time on both projects. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: Robust price feed publishing with beempy Measuring seed-node ping times with python My Witness Application - holger80 Image source This page is synchronized from the post: ‘Witness update #1 - first unexpected server reboot’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-update-1-first-unexpected-server-reboot/"},{"title":"I produced my first block as witness","text":"I successfully produced my first block as a witness today. With my current rank (screenshot from steemian.info), I will produce a new block every fourth day. Witness activityI released beem version 0.19.37 and I improved the full-node report layout from @fullnodeupdate. Estimating my next witness slotUsing beempy from beem, I can estimate my next witness slot: beempy witness holger80 virtual_time_diff shows the virtual schedule time difference. block_diff_est is the equivalent block count and time_diff_est is the equivalent time to the next block producing slot. So I have some time to relax. The witness schedule page https://steem.bitcoiner.me/schedule/?c=show200 seems to show wrong results: I continuously monitored the output of beempy witness holger80 until I produced my first block and I can confirm that its output is accurate contrary to the wrong output of bitcoiner.me. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: Robust price feed publishing with beempy Measuring seed-node ping times with python My Witness Application - holger80 This page is synchronized from the post: ‘I produced my first block as witness’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/i-produced-my-first-block-as-witness/"},{"title":"Code review of the new bandwidth system for HF20","text":"In the newest update Blockchain Update 2: HF20 Progress &amp; Bandwidth Changes, the new bandwidth system for Hardfork 20 is explained. The remaining bandwidth is not measured in bytes, it will be measured in Resource Credits (RCs). Each account has a bandwidth which depends on the steem power as before. The unit is renamed to RC. Instead of one bandwidth pool, several pools will be created which will be drained by broadcasted transactions differently. The current state of each pool determines the resulting costs of a transaction in RC. If the account has more RC as the transaction costs it will be broadcasted and the bandwidth of the account is reduced by the RC costs. Let’s take a look on the current implementation in branch 2018-05-24-rc: Three different rc_object_types are implemented resource_history_bytes resource_new_accounts resource_market_bytes Determining the resource_count of a transactiontx_size is the transaction size and it is now counted how many market operation and how many new account creation operation are included. The transaction size is added to resource_history_bytes:result.resource_count[ resource_history_bytes ] += tx_size; A account_create_operation or account_create_with_delegation_operation increasesresult.resource_count[ resource_new_accounts ] += vtor.new_account_op_count; And a market operation as limit_order_create_operation limit_order_cancel_operation transfer_operation transfer_to_vesting_operation increases addionally the resource_market_bytes resource:12if( vtor.market_op_count &gt; 0 ) result.resource_count[ resource_market_bytes ] += tx_size; There will be eventually more operation added to the resource count of resource_market_bytes :123456// TODO:// Should following ops be market ops?// withdraw_vesting, convert, set_withdraw_vesting_route, limit_order_create2// escrow_transfer, escrow_dispute, escrow_release, escrow_approve,// transfer_to_savings, transfer_from_savings, cancel_transfer_from_savings,// claim_reward_balance, delegate_vesting_shares, any SMT operations Estimating the costsThe cost of all three resource types is calculated by the resource_count array and summed up:12345678int64_t total_cost = 0;for( size_t i=0; i&lt;STEEM_NUM_RESOURCE_TYPES; i++ ){ const rc_resource_params&amp; params = params_obj.resource_param_array[i]; int64_t pool = pool_obj.pool_array[i]; int64_t cost = compute_rc_cost_of_resource( params.curve_params, pool, count.resource_count[i] ); total_cost += cost;} Increasing the RC usage by the estimated total_costThe number of RC an account has is directly determined by its amount of vesting shares:1int64_t rc_max = account.vesting_shares.amount.value; The available RCs are calculated by:123456uint128_t regen_u128 = uint64_t(dt);regen_u128 *= rc_max;regen_u128 /= STEEM_RC_REGEN_TIME;uint64_t regen = regen_u128.to_uint64();rc_usage -= int64_t( regen );int64_t rc_available = rc_max - rc_usage; with1#define STEEM_RC_REGEN_TIME (60*60*24*15) and the total_cost of the transaction are added to the usage12345 db.modify( rc_account, [&amp;]( rc_account_object&amp; rca ){ rca.rc_usage = rc_usage + total_cost; rca.rc_usage_last_update = gpo.time;} ); ConclusionAt the moment, remaining bandwidth is renamed from bytes to RC.Instead of one bandwidth pool, three recharging pool exists which influencing the transaction costs. All transaction drain the first pool. Market transactions drain additionally the second pool. Account creation transactions drain additionally the third pool. Market and account creation transaction will reduce the bandwidth of an account stronger than other transactions. The number of RCs an account has is the number of its vesting shares. The RC regeneration rate is 15 days. image source If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: This page is synchronized from the post: ‘Code review of the new bandwidth system for HF20’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/code-review-of-the-new-bandwidth-system-for-hf20/"},{"title":"Comedy Open Mic Round # 17:  You know you've been on steemit too long when ...","text":"Here are some more: when you cross all the names on the election list and wrote down your 30 witnesses when you waiting for the money in your pocket to reappear after you bought the newspaper when you add stage to every website that will not load when you start to write letter to rich people when you are a teacher and discover that a student has copied its homework and you take all his money when you ask your boss after 7 days of work where the first paycheck is when you learning programming for building your first upvote bot when you do nothing for free anymore when you celebrate your steemit birthday with family when your reputation value is written in your CV All memes were generated with https://imgflip.com/memegenerator. This is my first contribution to Comedy Open Mic, I hope you had some fun by reading this.I nominate @flugschwein and @isnochys to join the contest. In order to compensate my automatic upvotes (I’m part of qurator, sbi and make-a-whale), I will not self vote. This page is synchronized from the post: ‘Comedy Open Mic Round # 17: You know you’’ve been on steemit too long when …’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/comedy-open-mic-round-17-you-know-you-ve-been-on-steemit-too-long-when/"},{"title":"update for beem - several improvements and optimizations","text":"Repository https://github.com/holgern/beem beem is a python library for steem. beem has now 501 unit tests and a coverage of 77 %. The current version is 0.19.38. I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug fixed Beem: blockchain.get_all_accounts() returns duplicate entries was fixed in commit 8137a6a. Beem: blockchain.get_all_accounts() fails for limit &gt; steps on appbase was fixed in commit 8137a6a. ImprovementsEmpty profiles and empty metadata of an account are handled(commit c86b3aa and commit c86b3aa) New operation structure for appbase commit 0260304The new operation structure looks like1[{&quot;type&quot;:&quot;vote_operation&quot;,&quot;value&quot;:{&quot;voter&quot;:&quot;steemit&quot;,&quot;author&quot;:&quot;alice&quot;,&quot;permlink&quot;:&quot;a-post-by-alice&quot;,&quot;weight&quot;:10000}}] instead of1[[&quot;vote&quot;, {&quot;voter&quot;:&quot;steemit&quot;,&quot;author&quot;:&quot;alice&quot;,&quot;permlink&quot;:&quot;a-post-by-alice&quot;,&quot;weight&quot;:10000}]] Operation() from beembase\\objects.py has now a new option appbase. Operation(op, appbase=True) will return the new format. At the moment it does not seem to work and a broadcasted transaction in the new format returns&apos;code&apos;: -32603, &apos;message&apos;: &apos;Internal Error&apos;.Therefore, all broadcasting operation are now performed with the condenser_api. But beem is prepared for the new format. Account object handling was improvedIn commit c4a6febthe account object handling was improved for several account functions. A string as well an account object can be used now. For example:1234from beem.account import Accountacc = Account(&quot;test&quot;)acc_to = Account(&quot;null&quot;)acc.transfer_to_vesting(10000, to=acc_to) poloniex removed and huobi and ubpit added as source for a price feed commits commit faae081and commit 8219217huobi and upbit were added as source for a STEEM - BTC price information.The following API-calls are used: https://api.huobi.pro/market/history/kline?period=1day&amp;size=1&amp;symbol=steembtc https://crix-api.upbit.com/v1/crix/trades/ticks?code=CRIX.UPBIT.BTC-STEEM&amp;count=Error handling was added by:1234try: responses = list(requests.get(u, timeout=30) for u in urls)except Exception as e: log.debug(str(e)) Timeout added to websocket connections commit b8d8be1 and commit 50827b1 At fist the following thread interrupt function was tested:1234567891011121314@contextmanager def time_limit(seconds, msg=&apos;&apos;): timer = threading.Timer(seconds, lambda: interrupt_main()) timer.start() try: yield except KeyboardInterrupt: raise TimeoutException(&quot;Timed out for operation {}&quot;.format(msg)) finally: # if the action ends in specified time, timer is canceled try: timer.cancel() except: raise TimeoutException(&quot;Timed out for operation {}&quot;.format(msg)) This implementation has the disadvantage that it suppresses the KeyboardInterrupt.A better solution seems to be setting the timeout in the websocket object, which is now implemented:1self.ws.settimeout(self.timeout) Proper passing of lazy and full in Account, Block, Comment, Vote and Witness commit 50827b1The parameter lazy and full are now correclty passed to BlockchainObject. The default settings are lazy=False and full=True. At the moment, full=False has only an effect on an Account object:123account = Account(&quot;gtg&quot;, full=False)account.json(){&apos;id&apos;: 14007, &apos;name&apos;: &apos;gtg&apos;, &apos;owner&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM5RLQ1Jh8Kf56go3xpzoodg4vRsgCeWhANXoEXrYH7bLEwSVyjh&apos;, 1]]}, &apos;active&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM8NWQYG4BvjGNu8zqqV9fbR7aSCZHcxkVib41PYnpGmPRe6BHVG&apos;, 1]]}, &apos;posting&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM5tp5hWbGLL1R3tMVsgYdYxLPyAQFdKoYFbT2hcWUmrU42p1MQC&apos;, 1]]}, &apos;memo_key&apos;: &apos;STM4uD3dfLvbz7Tkd7of4K9VYGnkgrY5BHSQt52vE52CBL5qBfKHN&apos;, &apos;json_metadata&apos;: &apos;{&quot;profile&quot;:{&quot;profile_image&quot;:&quot;https://grey.house/img/grey_4.jpg&quot;,&quot;name&quot;:&quot;Gandalf the Grey&quot;,&quot;about&quot;:&quot;IT Wizard, Steem Witness&quot;,&quot;location&quot;:&quot;Steem&quot;}}&apos;, &apos;proxy&apos;: &apos;&apos;, &apos;last_owner_update&apos;: &apos;2017-03-21T18:37:42&apos;, &apos;last_account_update&apos;: &apos;2017-03-21T18:37:42&apos;, &apos;created&apos;: &apos;2016-06-30T17:22:18&apos;, &apos;mined&apos;: True, &apos;owner_challenged&apos;: False, &apos;active_challenged&apos;: False, &apos;last_owner_proved&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;last_active_proved&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;recovery_account&apos;: &apos;steem&apos;, &apos;last_account_recovery&apos;: &apos;2016-07-21T21:48:03&apos;, &apos;reset_account&apos;: &apos;null&apos;, &apos;comment_count&apos;: 0, &apos;lifetime_vote_count&apos;: 0, &apos;post_count&apos;: 3604, &apos;can_vote&apos;: True, &apos;voting_power&apos;: 9725, &apos;last_vote_time&apos;: &apos;2018-06-14T20:51:48&apos;, &apos;balance&apos;: &apos;11.148 STEEM&apos;, &apos;savings_balance&apos;: &apos;0.000 STEEM&apos;, &apos;sbd_balance&apos;: &apos;735.300 SBD&apos;, &apos;sbd_seconds&apos;: &apos;1665105253254&apos;, &apos;sbd_seconds_last_update&apos;: &apos;2018-06-13T02:39:48&apos;, &apos;sbd_last_interest_payment&apos;: &apos;2018-05-15T01:10:18&apos;, &apos;savings_sbd_balance&apos;: &apos;0.000 SBD&apos;, &apos;savings_sbd_seconds&apos;: &apos;0&apos;, &apos;savings_sbd_seconds_last_update&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;savings_sbd_last_interest_payment&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;savings_withdraw_requests&apos;: 0, &apos;reward_sbd_balance&apos;: &apos;0.014 SBD&apos;, &apos;reward_steem_balance&apos;: &apos;0.005 STEEM&apos;, &apos;reward_vesting_balance&apos;: &apos;118328.674638 VESTS&apos;, &apos;reward_vesting_steem&apos;: &apos;58.232 STEEM&apos;, &apos;vesting_shares&apos;: &apos;478410729.379044 VESTS&apos;, &apos;delegated_vesting_shares&apos;: &apos;365530704.381348 VESTS&apos;, &apos;received_vesting_shares&apos;: &apos;0.000000 VESTS&apos;, &apos;vesting_withdraw_rate&apos;: &apos;0.000000 VESTS&apos;, &apos;next_vesting_withdrawal&apos;: &apos;1969-12-31T23:59:59&apos;, &apos;withdrawn&apos;: 0, &apos;to_withdraw&apos;: 0, &apos;withdraw_routes&apos;: 0, &apos;curation_rewards&apos;: 4589911, &apos;posting_rewards&apos;: 6452787, &apos;proxied_vsf_votes&apos;: [&apos;17681482578502&apos;, 0, 0, 0], &apos;witnesses_voted_for&apos;: 29, &apos;average_bandwidth&apos;: &apos;56849871754&apos;, &apos;lifetime_bandwidth&apos;: &apos;3960159000000&apos;, &apos;last_bandwidth_update&apos;: &apos;2018-06-14T20:59:12&apos;, &apos;average_market_bandwidth&apos;: 2159946428, &apos;lifetime_market_bandwidth&apos;: &apos;251580000000&apos;, &apos;last_market_bandwidth_update&apos;: &apos;2018-02-26T16:22:00&apos;, &apos;last_post&apos;: &apos;2018-06-14T20:59:12&apos;, &apos;last_root_post&apos;: &apos;2018-06-10T20:14:24&apos;} 123account = Account(&quot;gtg&quot;, full=True)account.json(){&apos;id&apos;: 14007, &apos;name&apos;: &apos;gtg&apos;, &apos;owner&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM5RLQ1Jh8Kf56go3xpzoodg4vRsgCeWhANXoEXrYH7bLEwSVyjh&apos;, 1]]}, &apos;active&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM8NWQYG4BvjGNu8zqqV9fbR7aSCZHcxkVib41PYnpGmPRe6BHVG&apos;, 1]]}, &apos;posting&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM5tp5hWbGLL1R3tMVsgYdYxLPyAQFdKoYFbT2hcWUmrU42p1MQC&apos;, 1]]}, &apos;memo_key&apos;: &apos;STM4uD3dfLvbz7Tkd7of4K9VYGnkgrY5BHSQt52vE52CBL5qBfKHN&apos;, &apos;json_metadata&apos;: &apos;{&quot;profile&quot;:{&quot;profile_image&quot;:&quot;https://grey.house/img/grey_4.jpg&quot;,&quot;name&quot;:&quot;Gandalf the Grey&quot;,&quot;about&quot;:&quot;IT Wizard, Steem Witness&quot;,&quot;location&quot;:&quot;Steem&quot;}}&apos;, &apos;proxy&apos;: &apos;&apos;, &apos;last_owner_update&apos;: &apos;2017-03-21T18:37:42&apos;, &apos;last_account_update&apos;: &apos;2017-03-21T18:37:42&apos;, &apos;created&apos;: &apos;2016-06-30T17:22:18&apos;, &apos;mined&apos;: True, &apos;owner_challenged&apos;: False, &apos;active_challenged&apos;: False, &apos;last_owner_proved&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;last_active_proved&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;recovery_account&apos;: &apos;steem&apos;, &apos;last_account_recovery&apos;: &apos;2016-07-21T21:48:03&apos;, &apos;reset_account&apos;: &apos;null&apos;, &apos;comment_count&apos;: 0, &apos;lifetime_vote_count&apos;: 0, &apos;post_count&apos;: 3604, &apos;can_vote&apos;: True, &apos;voting_power&apos;: 9725, &apos;last_vote_time&apos;: &apos;2018-06-14T20:51:48&apos;, &apos;balance&apos;: &apos;11.148 STEEM&apos;, &apos;savings_balance&apos;: &apos;0.000 STEEM&apos;, &apos;sbd_balance&apos;: &apos;735.300 SBD&apos;, &apos;sbd_seconds&apos;: &apos;1665105253254&apos;, &apos;sbd_seconds_last_update&apos;: &apos;2018-06-13T02:39:48&apos;, &apos;sbd_last_interest_payment&apos;: &apos;2018-05-15T01:10:18&apos;, &apos;savings_sbd_balance&apos;: &apos;0.000 SBD&apos;, &apos;savings_sbd_seconds&apos;: &apos;0&apos;, &apos;savings_sbd_seconds_last_update&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;savings_sbd_last_interest_payment&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;savings_withdraw_requests&apos;: 0, &apos;reward_sbd_balance&apos;: &apos;0.014 SBD&apos;, &apos;reward_steem_balance&apos;: &apos;0.005 STEEM&apos;, &apos;reward_vesting_balance&apos;: &apos;118328.674638 VESTS&apos;, &apos;reward_vesting_steem&apos;: &apos;58.232 STEEM&apos;, &apos;vesting_shares&apos;: &apos;478410729.379044 VESTS&apos;, &apos;delegated_vesting_shares&apos;: &apos;365530704.381348 VESTS&apos;, &apos;received_vesting_shares&apos;: &apos;0.000000 VESTS&apos;, &apos;vesting_withdraw_rate&apos;: &apos;0.000000 VESTS&apos;, &apos;next_vesting_withdrawal&apos;: &apos;1969-12-31T23:59:59&apos;, &apos;withdrawn&apos;: 0, &apos;to_withdraw&apos;: 0, &apos;withdraw_routes&apos;: 0, &apos;curation_rewards&apos;: 4589911, &apos;posting_rewards&apos;: 6452787, &apos;proxied_vsf_votes&apos;: [&apos;17681482578502&apos;, 0, 0, 0], &apos;witnesses_voted_for&apos;: 29, &apos;average_bandwidth&apos;: &apos;56849871754&apos;, &apos;lifetime_bandwidth&apos;: &apos;3960159000000&apos;, &apos;last_bandwidth_update&apos;: &apos;2018-06-14T20:59:12&apos;, &apos;average_market_bandwidth&apos;: 2159946428, &apos;lifetime_market_bandwidth&apos;: &apos;251580000000&apos;, &apos;last_market_bandwidth_update&apos;: &apos;2018-02-26T16:22:00&apos;, &apos;last_post&apos;: &apos;2018-06-14T20:59:12&apos;, &apos;last_root_post&apos;: &apos;2018-06-10T20:14:24&apos;, &apos;vesting_balance&apos;: &apos;0.000 STEEM&apos;, &apos;reputation&apos;: &apos;39850768931461&apos;, &apos;transfer_history&apos;: [], &apos;market_history&apos;: [], &apos;post_history&apos;: [], &apos;vote_history&apos;: [], &apos;other_history&apos;: [], &apos;witness_votes&apos;: [&apos;abit&apos;, &apos;anyx&apos;, &apos;arcange&apos;, &apos;bhuz&apos;, &apos;blockchained&apos;, &apos;blocktrades&apos;, &apos;boatymcboatface&apos;, &apos;cervantes&apos;, &apos;chitty&apos;, &apos;clayop&apos;, &apos;drakos&apos;, &apos;followbtcnews&apos;, &apos;furion&apos;, &apos;good-karma&apos;, &apos;gtg&apos;, &apos;jesta&apos;, &apos;joseph&apos;, &apos;liondani&apos;, &apos;lukestokes.mhth&apos;, &apos;masteryoda&apos;, &apos;nextgencrypto&apos;, &apos;pfunk&apos;, &apos;pharesim&apos;, &apos;riverhead&apos;, &apos;roelandp&apos;, &apos;smooth.witness&apos;, &apos;steemed&apos;, &apos;themarkymark&apos;, &apos;timcliff&apos;], &apos;tags_usage&apos;: [], &apos;guest_bloggers&apos;: []} lazy=True disables loading of the object on creation and reloads the complete object on every call1234567account = Account(&quot;gtg&quot;, lazy=True)account.json(){&apos;name&apos;: &apos;gtg&apos;}account.profile{&apos;profile_image&apos;: &apos;https://grey.house/img/grey_4.jpg&apos;, &apos;name&apos;: &apos;Gandalf the Grey&apos;, &apos;about&apos;: &apos;IT Wizard, Steem Witness&apos;, &apos;location&apos;: &apos;Steem&apos;}account.json(){&apos;name&apos;: &apos;gtg&apos;, &apos;id&apos;: 14007, &apos;owner&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM5RLQ1Jh8Kf56go3xpzoodg4vRsgCeWhANXoEXrYH7bLEwSVyjh&apos;, 1]]}, &apos;active&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM8NWQYG4BvjGNu8zqqV9fbR7aSCZHcxkVib41PYnpGmPRe6BHVG&apos;, 1]]}, &apos;posting&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM5tp5hWbGLL1R3tMVsgYdYxLPyAQFdKoYFbT2hcWUmrU42p1MQC&apos;, 1]]}, &apos;memo_key&apos;: &apos;STM4uD3dfLvbz7Tkd7of4K9VYGnkgrY5BHSQt52vE52CBL5qBfKHN&apos;, &apos;json_metadata&apos;: &apos;{&quot;profile&quot;:{&quot;profile_image&quot;:&quot;https://grey.house/img/grey_4.jpg&quot;,&quot;name&quot;:&quot;Gandalf the Grey&quot;,&quot;about&quot;:&quot;IT Wizard, Steem Witness&quot;,&quot;location&quot;:&quot;Steem&quot;}}&apos;, &apos;proxy&apos;: &apos;&apos;, &apos;last_owner_update&apos;: &apos;2017-03-21T18:37:42&apos;, &apos;last_account_update&apos;: &apos;2017-03-21T18:37:42&apos;, &apos;created&apos;: &apos;2016-06-30T17:22:18&apos;, &apos;mined&apos;: True, &apos;owner_challenged&apos;: False, &apos;active_challenged&apos;: False, &apos;last_owner_proved&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;last_active_proved&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;recovery_account&apos;: &apos;steem&apos;, &apos;last_account_recovery&apos;: &apos;2016-07-21T21:48:03&apos;, &apos;reset_account&apos;: &apos;null&apos;, &apos;comment_count&apos;: 0, &apos;lifetime_vote_count&apos;: 0, &apos;post_count&apos;: 3605, &apos;can_vote&apos;: True, &apos;voting_power&apos;: 8793, &apos;last_vote_time&apos;: &apos;2018-06-15T11:50:45&apos;, &apos;balance&apos;: &apos;0.000 STEEM&apos;, &apos;savings_balance&apos;: &apos;0.000 STEEM&apos;, &apos;sbd_balance&apos;: &apos;0.000 SBD&apos;, &apos;sbd_seconds&apos;: 0, &apos;sbd_seconds_last_update&apos;: &apos;2018-06-15T10:22:51&apos;, &apos;sbd_last_interest_payment&apos;: &apos;2018-06-15T10:22:51&apos;, &apos;savings_sbd_balance&apos;: &apos;0.000 SBD&apos;, &apos;savings_sbd_seconds&apos;: 0, &apos;savings_sbd_seconds_last_update&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;savings_sbd_last_interest_payment&apos;: &apos;1970-01-01T00:00:00&apos;, &apos;savings_withdraw_requests&apos;: 0, &apos;reward_sbd_balance&apos;: &apos;0.014 SBD&apos;, &apos;reward_steem_balance&apos;: &apos;0.005 STEEM&apos;, &apos;reward_vesting_balance&apos;: &apos;135964.296711 VESTS&apos;, &apos;reward_vesting_steem&apos;: &apos;66.912 STEEM&apos;, &apos;vesting_shares&apos;: &apos;478748243.467364 VESTS&apos;, &apos;delegated_vesting_shares&apos;: &apos;365530704.381348 VESTS&apos;, &apos;received_vesting_shares&apos;: &apos;0.000000 VESTS&apos;, &apos;vesting_withdraw_rate&apos;: &apos;0.000000 VESTS&apos;, &apos;next_vesting_withdrawal&apos;: &apos;1969-12-31T23:59:59&apos;, &apos;withdrawn&apos;: 0, &apos;to_withdraw&apos;: 0, &apos;withdraw_routes&apos;: 0, &apos;curation_rewards&apos;: 4598591, &apos;posting_rewards&apos;: 6452787, &apos;proxied_vsf_votes&apos;: [&apos;17742276687445&apos;, 0, 0, 0], &apos;witnesses_voted_for&apos;: 29, &apos;average_bandwidth&apos;: &apos;54782946705&apos;, &apos;lifetime_bandwidth&apos;: &apos;3963019000000&apos;, &apos;last_bandwidth_update&apos;: &apos;2018-06-15T11:50:45&apos;, &apos;average_market_bandwidth&apos;: 2159935714, &apos;lifetime_market_bandwidth&apos;: &apos;253740000000&apos;, &apos;last_market_bandwidth_update&apos;: &apos;2018-06-15T10:23:27&apos;, &apos;last_post&apos;: &apos;2018-06-15T09:17:03&apos;, &apos;last_root_post&apos;: &apos;2018-06-10T20:14:24&apos;, &apos;vesting_balance&apos;: &apos;0.000 STEEM&apos;, &apos;reputation&apos;: &apos;39882771080971&apos;, &apos;transfer_history&apos;: [], &apos;market_history&apos;: [], &apos;post_history&apos;: [], &apos;vote_history&apos;: [], &apos;other_history&apos;: [], &apos;witness_votes&apos;: [&apos;abit&apos;, &apos;anyx&apos;, &apos;arcange&apos;, &apos;bhuz&apos;, &apos;blockchained&apos;, &apos;blocktrades&apos;, &apos;boatymcboatface&apos;, &apos;cervantes&apos;, &apos;chitty&apos;, &apos;clayop&apos;, &apos;drakos&apos;, &apos;followbtcnews&apos;, &apos;furion&apos;, &apos;good-karma&apos;, &apos;gtg&apos;, &apos;jesta&apos;, &apos;joseph&apos;, &apos;liondani&apos;, &apos;lukestokes.mhth&apos;, &apos;masteryoda&apos;, &apos;nextgencrypto&apos;, &apos;pfunk&apos;, &apos;pharesim&apos;, &apos;riverhead&apos;, &apos;roelandp&apos;, &apos;smooth.witness&apos;, &apos;steemed&apos;, &apos;themarkymark&apos;, &apos;timcliff&apos;], &apos;tags_usage&apos;: [], &apos;guest_bloggers&apos;: []} Automatic conversion of all dates, int and amounts in each account, block, comment, vote and witness object commit 50827b1and commit af113d2The json() function returns the original json dict. Signed_Transaction works with a datatime object as expiration date.12345678910from beem.block import Blockblock = Block(2000000)block[&quot;timestamp&quot;]datetime.datetime(2016, 6, 2, 23, 58, 45, tzinfo=&lt;UTC&gt;)block.json()[&quot;timestamp&quot;]&apos;2016-06-02T23:58:45&apos;block.transactions[0][&quot;expiration&quot;]datetime.datetime(2016, 6, 2, 23, 58, 54, tzinfo=&lt;UTC&gt;)block.json_transactions[0][&quot;expiration&quot;]&apos;2016-06-02T23:58:54&apos; 123456from beem.block import Blockblock1 = Block(2000000)block2 = Block(2000001)block2[&quot;timestamp&quot;] - block1[&quot;timestamp&quot;]datetime.timedelta(0, 3) Thread and worker for blocks(threading=True) implementedIn case of node failure, blocks were missing with the old implementation. The implementation incommit 3c0f1ccis a first step in improving thread-based block fetching in blocks() Commit historyPrepare next release and fixes two small bugs commit d0c91b8 Fix profile for empty json_metadata commit c86b3aa Fix handling of empty json_metadata commit 9d969d7 New operation structure for appbase commit 0260304Transactionbuilder Prepare broadcasting in new appbase format Force condenser_api by nowRPCUtils Improve detection of conenser_apiStreemnoderpc Improved error message for Assert Exception:v.is_object()beembase.Object Add new appbase Operation formatbeemgraphenebase.object Add handling of new appbase operation format Release 0.19.37 commit 99e3541 Fix unit tests and WitnessesRankedByVote Prepare next version and improve Account object handling commit c4a6febAccount Account handling is improved and it is assured that an Account object or an account string name can be used in every functionReadme Advantages over the official steem-python library added (fixes #25) Several improvements commit 01848a8Account json_metadata propertyBlockchain add addTzInfoComment fix meta edit of postSteem add use_stored_data poloniex removed and huobi and ubpit added to steem_btc_ticker() commit faae081 Prepare next release and improved bool variable handling for steemconnect link creation commit d59d379 Add timeout to websocket connections commit b8d8be1Comment Add exampleSteem improve docuException Add TimeoutExceptionGrapheneRPC add time_limit to implement a timeout for websocket connectionUnit test add test for timeout implementation several improvements and optimizations commit 50827b1 Account lazy and full are correctly passed _parse_json_data() added to parse jsonBlock lazy and full are correctly passed empty operations are handled op_statistics improvedBlockchain virtual ops and ops statistics are separately calculatedComment _parse_json_data() added to parse dates and amounts author_reputation is parsed to int lazy and full are correctly passedVote lazy and full are correctly passed _parse_json_data added to parse date and rshares and reputation vote.time is a datetime object json() returns the original stringWitness lazy and full are correctly passedGrapheneRPC time_limit removed, as it suppresses KeyboardInterrupt ws.settimeout() is set for websocket WebSocketTimeoutException handling addedUnit tests test_account fixed test_time_limit removed from test_steemnoderpc checks added to test_blockchain_batch add try catch to steem_btc_ticker() and btc_usd_ticker() commit 8219217 All dates, ints, and amounts are parsed in account, block, comment, vote and witness commit af113d2Account _parse_json_data improved and all missing ints and dates added json() adapted to _parse_json_data()Block _parse_json_data added, expiration and timestamp are now datetime objects property json_transactions and json_operations added, which return trx and ops with date strings BlockHeader improved and datetime parsing addedBlockchain adapted to new datetime objectsCLI adapted to code changesComment int and dates inside active_votes are parsed Missing dates and int are parsedMarket date parsing to datetime added to market_historyVote Some improvementsWitness _parse_json_data added all date and ints are parsed Demo added to Witnesses, WitnessesVotedByAccount, WitnessesRankedByVote and ListWitnesses beemgraphenebase/types datetime handling added to PointInTimeUnit tests test_account adapted test_export added to test_block test in test_comment fixed test_export added to test_witness Load missing blocks when using threads and fix issue #27 and #28 commit 8137a6a Unit test for issue #27 added Exception handling added to blocks using threads get_all_accounts fixed for appbase calls (fixes #28) Thread and Worker class for blocks(threading=True) commit 3c0f1cc Blockchain Check if all block could be fetched added Thread and Worker class for block fetching added GitHub Accounthttps://github.com/holgern If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘update for beem - several improvements and optimizations’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-several-improvements-and-optimizations/"},{"title":"Comedy Open Mic Round # 18: How to sucessfully introducing steemit to a friend","text":"Sometimes I imagine that I introduce steem to a friend…. It’s evening, I’m in bar with a friend trinking a beer.me: By the way, do you have a password manager?he: No, why? I’m using always the same password and It is something that I can easily remember.me: Oh, nevermind. How is work going? I will try again.. Now it is launch time and I’m eating a meal together with a colleague.me: Do you want to earn money by writing blog posts? There is a really awesome site.he: Ok, sound good. How much can I earn?me: In the beginning, not so much. But when you write consistently unique posts with original content, do proper image sourcing, It should be possible to earn 5 $ for each post. Provided, you dedicate at least one hour a day… I’m realizing that this is maybe not the best strategy convincing someone me: Let me start again. You love numbers right and mathematics right?he: You’re right.me: On steemit, you have three currencies, STEEM, SBD and VESTS. You can power up and convert STEEM into VESTS also called STEEM POWER. There is an internal market in which you can exchange SBD and STEEM. You have also a reputation score which increases when your posts are upvoted and decreases on downvotes. You have also voting power, which refills every day. When you have enough bandwidth, you can upvote other posts and earn curation rewards. The curation reward amount depends on the time and how many voter were before you. It will be higher when other upvote the post after you. Then after 7 days, you can claim your reward. Awesome right? Of course, you can earn only when you have enough STEEM POWER, which you could earn by writing consistently unique posts with original content, do proper image sourcing and then after some month of hard work ….. Seems, I’m not a sales person… Another day, dinner with a friend.me: Hey, you told me that you have some money left, right?he: Yeah…me: I know a really good opportunity. You create an account on steemit.com and buy a lot of STEEM. You are an early adopter, just think of Facebook in 2013. Addititionally, you can delegate your STEEM POWER to a bid bot, this means guuaranteed ROI for you. In a few years,, you will be rich, without any work! he: Thanks for the advice, I think I will do this… There you go Disclaimer: This is not a financial advice!Image source I nominate @paulag and @abh12345 (both are in charge of the steemcommunity witness) to join the fun! Content rulesComedy Open Mic Round # 18 This page is synchronized from the post: ‘Comedy Open Mic Round # 18: How to sucessfully introducing steemit to a friend’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/comedy-open-mic-round-18-how-to-sucessfully-introducing-steemit-to-a-friend/"},{"title":"Update for beem - missing API calls and ImageUploader added","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 526 unit tests and a coverage of 76 %. The current version is 0.19.39.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V New featuresImageUploaderThanks to @embrebeyler and his python library imagehoster-python-client I was able to add a ImageUploader class to beem. I could simplify the original code to:1234from beemgraphenebase.ecdsasig import sign_messagemessage = py23_bytes(self.challange, &quot;ascii&quot;) + image_datasignature = sign_message(message, posting_wif)signature_in_hex = hexlify(signature).decode(&quot;ascii&quot;) It is now possible to upload images in bytes representation directly to steemitimages.com:123456789101112131415161718192021from beem.imageuploader import ImageUploaderfrom beem import Steemimport iofrom matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvasimport matplotlib.figurefrom matplotlib.figure import Figurefig = Figure(figsize=(10, 10), dpi=100)canvas = FigureCanvas(fig)ax = fig.add_axes([.1, .1, .8, .8])ax.plot(range(15))ax.set_xlabel(&apos;x&apos;)ax.set_ylabel(&apos;y&apos;)buf = io.BytesIO()fig.savefig(buf, format=&apos;png&apos;)buf.seek(0)stm = Steem(keys=[&quot;xxx&quot;])io = ImageUploader(steem_instance=stm)io.upload(buf.read(), &quot;holger80&quot;) with the result:1{&apos;url&apos;: &apos;https://cdn.steemitimages.com/DQmXvmNs3UxXRYqwA7ieP3WMcTLJeRyN3UdvsejD46UqaMv/image&apos;} It’s then possible to embed this link into a post:1![](&apos;https://cdn.steemitimages.com/DQmXvmNs3UxXRYqwA7ieP3WMcTLJeRyN3UdvsejD46UqaMv/image) update_nodes() from NodeList improvedupdate_nodes calculates now the score for each node by:123score = (n - rank) / (n- 1) * 100weigthed_score = score * weights_dict[benchmark]sum_score += weigthed_score where rank is the rank of the node at the specific benchmark. n is the number of nodes and weights_dict[benchmark] the the weight for this benchmark. The sum of weights_dict is one.At the moment 5 benchmarks are calculated every hour are written into the metadata field of @fullnodeupdate.Available benchmarks: block history apicall block_diff config Api DefinitionsApi Definitions are created with examples for all available API calls defined here. Missing API calls were added get_expiring_vesting_delegations 12345from beem.account import Accountacc = Account(&quot;emrebeyler&quot;)print(acc.get_expiring_vesting_delegations())[{&apos;id&apos;: 2341553, &apos;delegator&apos;: &apos;emrebeyler&apos;, &apos;vesting_shares&apos;: &apos;2439949.303020 VESTS&apos;, &apos;expiration&apos;: &apos;2018-06-22T15:10:00&apos;}, {&apos;id&apos;: 2212414, &apos;delegator&apos;: &apos;emrebeyler&apos;, &apos;vesting_shares&apos;: &apos;20338.649992 VESTS&apos;, &apos;expiration&apos;: &apos;2018-06-25T23:48:45&apos;}] get_feed_entries 1234from beem.account import Accountacc = Account(&quot;gtg&quot;)for f in acc.get_feed_entries(): print(f) get_blog_authors 1234from beem.account import Accountacc = Account(&quot;gtg&quot;)for h in acc.get_blog_authors(): print(h) get_savings_withdrawals 1234from beem.account import Accountacc = Account(&quot;gtg&quot;)print(acc.get_savings_withdrawals(direction=&quot;from&quot;))print(acc.get_savings_withdrawals(direction=&quot;to&quot;)) get_escrow 123from beem.account import Accountacc = Account(&quot;gtg&quot;)print(acc.get_escrow()) get_account_reputations 1234from beem.blockchain import Blockchainb = Blockchain()for h in b.get_account_reputations(): print(h) Discussions_by_author_before_date 123from beem.discussions import Query, Discussions_by_author_before_datefor h in Discussions_by_author_before_date(limit=10, author=&quot;gtg&quot;): print(h) get_transaction_hex 12345from beem.blockchain import Blockchainb = Blockchain()block = b.get_current_block()trx = block.json()[&quot;transactions&quot;][0]print(b.get_transaction_hex(trx)) get_tags_used_by_author 123from beem.account import Accountacc = Account(&quot;gtg&quot;)print(acc.get_tags_used_by_author()) Replies_by_last_update 1234from beem.discussions import Query, Replies_by_last_updateq = Query(limit=10, start_author=&quot;steemit&quot;, start_permlink=&quot;firstpost&quot;)for h in Replies_by_last_update(q): print(h) Trending_tags 1234from beem.discussions import Query, Trending_tagsq = Query(limit=10, start_tag=&quot;steemit&quot;)for h in Trending_tags(q): print(h) get_vesting_delegations 1234from beem.account import Accountacc = Account(&quot;gtg&quot;)for v in acc.get_vesting_delegations(): print(v) Commit historyTry to improve blocks with threading and some more error caption commit 782544b get_expiring_vesting_delegations added to account commit dc18460Account get_expiring_vesting_delegations addedBlockchain thread_limit parameter removed batch_mode set to True for threaded blocks() block sanity check added for threaded blocks() Add missing api functions commit 093ab14Account get_feed_entries, get_blog_authors, get_savings_withdrawals, get_escrow Documentation improved Account parameter handling improvedBlockchain get_account_reputations added ImageUploader added commit 169dc2b ImageUploader can be used to upload an image file or an image in bytes Improved score calculated for update_nodes commit e669e14 Improved blocks with threads and improved unit test commit 61ddd1e Add Discussions_by_author_before_date and improve some other discussions class commit 6b5526Discussions Discussions_by_author_before_date addedbeemapi/Nodes add an option to freeze a node, in order to prevent switching to the next node get_vesting_delegations added and block date conversion improved commit ce9c512Account get_vesting_delegations added More functions added and a complete list of API definitions added to docs commit c955f2a Discussions Replies_by_last_update and Trending_tags addedBlockchain get_transaction_hex addedAccount get_tags_used_by_author addedDocs apidifinitions added Block and Blockchain improved and Readme adapted to changes commit 62fe18c Block identifier handling improved and test_blockchain_treading improved commit 347c7ba GitHub Accounthttps://github.com/holgern If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘Update for beem - missing API calls and ImageUploader added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-missing-api-calls-and-imageuploader-added/"},{"title":"steemhive.com - communities for steemit","text":"You probably have heard of hivemind, which will allow building communities inside of steem. In order to improve communities in steemit right now, I created a new site steemhive.com.This site allows you to select a community by its mainly used tag. E.g. for the german community, “deutsch”. At the moment, the selected community is used as tag in get_discussions_by_*, and the additionally defined tag selection filters the results. 100 results are fetched for each community, the additionally selected tag reduces the number of shown posts. When another tag is selected, e.g. “life” both tags will be combined. So all new posts with tags “deutsch” and “life” are shown. It is possible to directly set a community by adding its tag name with a # behind the domain name:1http://steemhive.com/#spanish and it is possible to define a tag with a ? by: 1http://steemhive.com/#spanish?life The certificate is not yet activated, therefore only http works. This site is only a first version. At the moment, the community selector was written by hand, and there might be missing some. Cookies are not supported, so the website does not remember settings. Please give me some feedback about my new project. What should I improve? How should I proceed? If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: This page is synchronized from the post: ‘steemhive.com - communities for steemit’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemhive-com-communities-for-steemit/"},{"title":"update for beem - discussions, post creation and threaded blocks improved","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 526 unit tests and a coverage of 76 %. The current version is 0.19.41.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug Fix for Connections errors with threaded Blockchain.stream() - #32The problem is described here.The problem was that b.stream(start=start, stop=stop, threading=True, thread_num=8) was much slower than the non-threaded version b.stream(start=start, stop=stop, threading=False).The problem was the usage of the non thread-safe websocket functionws.recv(). The bug could be solved by creating thread_num-1 steem instances: 1234567steem_instance = [self.steem]nodelist = self.steem.rpc.nodes.export_working_nodes()for i in range(thread_num - 1): steem_instance.append(stm.Steem(node=nodelist, num_retries=self.steem.rpc.num_retries, num_retries_call=self.steem.rpc.num_retries_call, timeout=self.steem.rpc.timeout)) By using return int(self[&apos;block_id&apos;][:8], base=16) as block_num reference, wrong numbered blocks could be completely prevented. By using 8 threads, the duration for fetching 200 blocks could be reduced to 10 seconds.12345Results:No Threads with wss duration: 27.43 s No Threads with https duration: 140.73 s 8 Threads with wss duration: 9.67 s 8 Threads with https duration: 10.60 s New FeaturesPost creation improvedThe tag limit was removed, It is now possible to define more than 5 tags.A new option parse_body was added and when set it to True (default value is False), the body is parsed for mentioned users, included images and links. All found entries will be written into the users, links and image arrays and will be included into the json_metadata structure. 12345678from beem import Steemstm = Steem(keys=[&quot;5xxxx...&quot;])title = &quot;Testing beem&quot;body = &quot;![beem-logo.png](https://cdn.utopian.io/posts/d563a408c062506aed88befbe7781399184fbeem-logo.png)&quot;body += &quot;\\n You can found the beem library from @holger80 on [github](https://github.com/holgern/beem).&quot;tags = [&quot;beem&quot;, &quot;python&quot;, &quot;steemdev&quot;, &quot;test&quot;, &quot;donotvotethis&quot;, &quot;pleasedonotflag&quot;]stm.post(title, body, author = &quot;beembot&quot;, tags=tags, parse_body=True) results in1{&apos;expiration&apos;: &apos;2018-06-28T15:47:11&apos;, &apos;ref_block_num&apos;: 63107, &apos;ref_block_prefix&apos;: 3297716676, &apos;operations&apos;: [[&apos;comment&apos;, {&apos;parent_author&apos;: &apos;&apos;, &apos;parent_permlink&apos;: &apos;beem&apos;, &apos;author&apos;: &apos;beembot&apos;, &apos;permlink&apos;: &apos;testing-beem&apos;, &apos;title&apos;: &apos;Testing beem&apos;, &apos;body&apos;: &apos;![beem-logo.png](https://cdn.utopian.io/posts/d563a408c062506aed88befbe7781399184fbeem-logo.png)\\n You can found the beem library from @holger80 on [github](https://github.com/holgern/beem).&apos;, &apos;json_metadata&apos;: &apos;{&quot;app&quot;: &quot;beem/0.19.41&quot;, &quot;tags&quot;: [&quot;beem&quot;, &quot;python&quot;, &quot;steemdev&quot;, &quot;test&quot;, &quot;donotvotethis&quot;, &quot;pleasedonotflag&quot;], &quot;users&quot;: [&quot;holger80&quot;], &quot;image&quot;: [&quot;https://cdn.utopian.io/posts/d563a408c062506aed88befbe7781399184fbeem-logo.png&quot;], &quot;links&quot;: [&quot;https://github.com/holgern/beem&quot;]}&apos;}]], &apos;extensions&apos;: [], &apos;signatures&apos;: [&apos;1f1f10c99dd8c47e8190ee9fbbfd2c15935935501517c04331e1848663607929a23975b5b2fbc586b1ed27ec472519970b9c2717839c8611ca3f3a9e4a43684751&apos;]} More than 5 tags are possible as can be seen here: Receiving more than 100 DiscussionsI added a new Discussions class to beem, which allow fetching of more than 100 posts.get_discussions uses yield for providing the results. As parameter for discussion_type the following values are possible: trending, author_before_date, payout, post_payout, created, active, cashout, votes, children, hot, feed, blog, comments, promoted, replies, tags.1234567from beem.discussions import Query, Discussionsquery = Query(limit=51, tag=&quot;steemit&quot;)discussions = Discussions()count = 0for d in discussions.get_discussions(&quot;tags&quot;, query, limit=1000): print((&quot;%d. &quot; % (count + 1)) + str(d)) count += 1 with the result:123451. {&apos;name&apos;: &apos;&apos;, &apos;total_payouts&apos;: &apos;56441280.045 SBD&apos;, &apos;net_votes&apos;: 4283609, &apos;top_posts&apos;: 296216, &apos;comments&apos;: 961106, &apos;trending&apos;: &apos;3995353899&apos;}2. {&apos;name&apos;: &apos;life&apos;, &apos;total_payouts&apos;: &apos;12372405.343 SBD&apos;, &apos;net_votes&apos;: 1690935, &apos;top_posts&apos;: 127436, &apos;comments&apos;: 40404, &apos;trending&apos;: &apos;530590415&apos;}....1000. {&apos;name&apos;: &apos;music&apos;, &apos;total_payouts&apos;: &apos;1498263.485 SBD&apos;, &apos;net_votes&apos;: 217679, &apos;top_posts&apos;: 14200, &apos;comments&apos;: 6615, &apos;trending&apos;: &apos;65817815&apos;} Commit historyAt some checks in block and blockchain.stream commit c9a0865 Try to improve blocks and streams with threading commit fe039357 stream_threading_performance example added to evaluate threading switch_to_next_node added to Steemnoderpc 5 tags restriction removed from post() Several fixes and improvements commit 7387a96Block switch to condenser when api call does not work on appbase node blocknum property returns Null when block is emptyBlockchain check improved in threading blocksDiscussions set_next_node_on_empty_reply set to FalseSteemnoderpc Request Timeout addedUnit tets test_account for appbase nodes improved New steem instance for each thread commit fe0bc6d “Bad or missing upstream response” is handled export_working_nodes added to node commit 0c4ac4b Use thread_num - 1 instances for blocks with threading commit a38865 Fix missing repsonses in market and add parse_body to post() commit c677f49 Discussions improved and Prepare release 0.19.41 commit e316a5eDiscussions Examples added to all classes Discussions add for fetching more than 100 posts GitHub Accounthttps://github.com/holgern If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘update for beem - discussions, post creation and threaded blocks improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-discussions-post-creation-and-threaded-blocks-improved/"},{"title":"The @blocktrades World Cup | My selections for the Last 16","text":"Link to announcement. I will try my luck in this contest. I’m not an expert, so my predictions are quite random. Good luck to all and may the luckiest win this :). Score Team vs Team Score 1 France vs Argentina 2 0 Uruguay vs Portugal 2 3 Spain vs Russia 1 1 Croatia vs Denmark 1 3 Brazil vs Mexico 1 1 Belgium vs Japan 2 1 Sweden vs Switzerland 1 0 Colombia vs England 2 This page is synchronized from the post: ‘The @blocktrades World Cup | My selections for the Last 16’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/the-blocktrades-world-cup-or-my-selections-for-the-last-16/"},{"title":"The account nijeah managed it to freeze the entire steem blockchain","text":"You can see that @nijeah managed it to withdraw a negative amount of vests. The fix to the steem github was released 4 h ago and fixes the operation from nijeah: and a check was added to prevent this: Gratulations @nijeah, you managed it to freeze the blockchain. This page is synchronized from the post: ‘The account nijeah managed it to freeze the entire steem blockchain’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/the-account-nijeah-managed-it-to-freeze-the-entire-steem-blockchain/"},{"title":"Witness update #2 - two missed blocks and node is running 0.19.5","text":"I wrote about my first produced block as witness 23 days ago (post). After updating my witness node to 0.19.5, I had to replay the complete blockchain. The process is now finished and my node is waiting for the next schedule slot. This was necessary due to the frozen blockchain due to a negative vesting amount. This event caused also my first two missed blocks. Witness rank and activityMy active rank is now 96 and my full rank is 137. This means that I’m close paying my server costs with the block producer rewards that I’m collecting. beemSince my last witness update, I released 7 new versions of beem. The last two releases make beem running smooth with 0.19.5 and 0.19.10. Please read also my last utopian-io post. You can also visit my discord-channel: https://discord.gg/4HM592V. fullnodeupdateI improved my @fullnodeupdate project even further. Every day, a post with statistics about all fullnode servers is posted. I added block delay as a performance measure.I’m pushing an account data update every hour to @fullnodeupdate with the following content:123456789101112131415{&quot;nodes&quot;: [&quot;wss://rpc.buildteam.io&quot;, &quot;wss://gtg.steem.house:8090&quot;, &quot;wss://steemd.privex.io&quot;, &quot;https://api.steemit.com&quot;, &quot;wss://rpc.steemliberator.com&quot;, &quot;https://api.steem.house&quot;], &quot;failing_nodes&quot;: {&quot;https://steemd.steemgigs.org&quot;: &quot;NumRetriesReached&quot;, &quot;wss://steemd.steemgigs.org&quot;: &quot;NumRetriesReached&quot;, &quot;wss://rpc.steemviz.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://api.steemitdev.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://seed.bitcoiner.me&quot;: &quot;NumRetriesReached&quot;, &quot;wss://seed.bitcoiner.me&quot;: &quot;NumRetriesReached&quot;, &quot;wss://steemd.minnowsupportproject.org&quot;: &quot;NumRetriesReached&quot;, &quot;wss://appbasetest.timcliff.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://rpc.steemviz.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://api.steemitstage.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://appbasetest.timcliff.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://steemd.minnowsupportproject.org&quot;: &quot;NumRetriesReached&quot;, &quot;wss://steemd.pevo.science&quot;: &quot;NumRetriesReached&quot;, &quot;https://steemd.privex.io&quot;: &quot;&quot;, &quot;https://rpc.steemliberator.com&quot;: &quot;NumRetriesReached&quot;, &quot;https://steemd.pevo.science&quot;: &quot;NumRetriesReached&quot;}, &quot;report&quot;: [{&quot;node&quot;: &quot;wss://rpc.buildteam.io&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: 1, &quot;ok&quot;: true, &quot;count&quot;: 236, &quot;time&quot;: 30.07}, &quot;history&quot;: {&quot;rank&quot;: 2, &quot;ok&quot;: true, &quot;count&quot;: 17373, &quot;time&quot;: 15.01}, &quot;apicall&quot;: {&quot;rank&quot;: 1, &quot;ok&quot;: true, &quot;time&quot;: 6.94, &quot;access_time&quot;: 0.151}, &quot;config&quot;: {&quot;rank&quot;: 1, &quot;ok&quot;: true, &quot;time&quot;: 0.54, &quot;access_time&quot;: 0.05}, &quot;block_diff&quot;: {&quot;rank&quot;: 2, &quot;ok&quot;: true, &quot;head_delay&quot;: 1.3, &quot;diff_head_irreversible&quot;: 17.0, &quot;time&quot;: 16.5}}, {&quot;node&quot;: &quot;https://api.steemit.com&quot;, &quot;version&quot;: &quot;0.19.10&quot;, &quot;block&quot;: {&quot;rank&quot;: 4, &quot;ok&quot;: true, &quot;count&quot;: 80, &quot;time&quot;: 30.25}, &quot;history&quot;: {&quot;rank&quot;: 6, &quot;ok&quot;: true, &quot;count&quot;: 3435, &quot;time&quot;: 15.16}, &quot;apicall&quot;: {&quot;rank&quot;: 3, &quot;ok&quot;: true, &quot;time&quot;: 2.0, &quot;access_time&quot;: 0.424}, &quot;config&quot;: {&quot;rank&quot;: 2, &quot;ok&quot;: true, &quot;time&quot;: 1.73, &quot;access_time&quot;: 0.1}, &quot;block_diff&quot;: {&quot;rank&quot;: 6, &quot;ok&quot;: true, &quot;head_delay&quot;: 5.93, &quot;diff_head_irreversible&quot;: 20.0, &quot;time&quot;: 19.0}}, {&quot;node&quot;: &quot;wss://gtg.steem.house:8090&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: 2, &quot;ok&quot;: true, &quot;count&quot;: 161, &quot;time&quot;: 30.12}, &quot;history&quot;: {&quot;rank&quot;: 3, &quot;ok&quot;: true, &quot;count&quot;: 12727, &quot;time&quot;: 38.13}, &quot;apicall&quot;: {&quot;rank&quot;: 2, &quot;ok&quot;: true, &quot;time&quot;: 3.63, &quot;access_time&quot;: 0.211}, &quot;config&quot;: {&quot;rank&quot;: 3, &quot;ok&quot;: true, &quot;time&quot;: 2.56, &quot;access_time&quot;: 0.05}, &quot;block_diff&quot;: {&quot;rank&quot;: 1, &quot;ok&quot;: true, &quot;head_delay&quot;: 1.21, &quot;diff_head_irreversible&quot;: 15.0, &quot;time&quot;: 16.81}},{&quot;node&quot;: &quot;https://rpc.buildteam.io&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: 7, &quot;ok&quot;: true, &quot;count&quot;: 3, &quot;time&quot;: 39.89}, &quot;history&quot;: {&quot;rank&quot;: 8, &quot;ok&quot;: true, &quot;count&quot;: 910, &quot;time&quot;: 16.81}, &quot;apicall&quot;: {&quot;rank&quot;: -1, &quot;ok&quot;: false, &quot;error&quot;: &quot;NumRetriesReached&quot;, &quot;time&quot;: 125.4, &quot;access_time&quot;: 30.0}, &quot;config&quot;: {&quot;rank&quot;: 4, &quot;ok&quot;: true, &quot;time&quot;: 3.02, &quot;access_time&quot;: 0.12}, &quot;block_diff&quot;: {&quot;rank&quot;: 7, &quot;ok&quot;: true, &quot;head_delay&quot;: 2.89, &quot;diff_head_irreversible&quot;: 23.0, &quot;time&quot;: 32.09}}, {&quot;node&quot;: &quot;https://api.steem.house&quot;, &quot;version&quot;: &quot;0.19.10&quot;, &quot;block&quot;: {&quot;rank&quot;: 5, &quot;ok&quot;: true, &quot;count&quot;: 32, &quot;time&quot;: 31.14}, &quot;history&quot;: {&quot;rank&quot;: 7, &quot;ok&quot;: true, &quot;count&quot;: 2223, &quot;time&quot;: 15.46}, &quot;apicall&quot;: {&quot;rank&quot;: 6, &quot;ok&quot;: true, &quot;time&quot;: 3.93, &quot;access_time&quot;: 1.201}, &quot;config&quot;: {&quot;rank&quot;: 5, &quot;ok&quot;: true, &quot;time&quot;: 3.2, &quot;access_time&quot;: 0.26}, &quot;block_diff&quot;: {&quot;rank&quot;: 4, &quot;ok&quot;: true, &quot;head_delay&quot;: 3.31, &quot;diff_head_irreversible&quot;: 20.0, &quot;time&quot;: 23.02}}, {&quot;node&quot;: &quot;https://gtg.steem.house:8090&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: -1, &quot;ok&quot;: false, &quot;error&quot;: &quot;Could not receive dynamic_global_properties!&quot;, &quot;count&quot;: 4, &quot;time&quot;: 12.0}, &quot;history&quot;: {&quot;rank&quot;: 5, &quot;ok&quot;: true, &quot;count&quot;: 3637, &quot;time&quot;: 15.15}, &quot;apicall&quot;: {&quot;rank&quot;: 7, &quot;ok&quot;: true, &quot;time&quot;: 4.24, &quot;access_time&quot;: 1.223}, &quot;config&quot;: {&quot;rank&quot;: 6, &quot;ok&quot;: true, &quot;time&quot;: 7.31, &quot;access_time&quot;: 0.33}, &quot;block_diff&quot;: {&quot;rank&quot;: -1, &quot;ok&quot;: false, &quot;error&quot;: &quot;output: None of identifier 23860331&quot;, &quot;head_delay&quot;: 0.0, &quot;diff_head_irreversible&quot;: 0.0, &quot;time&quot;: 23.32}}, {&quot;node&quot;: &quot;https://rpc.curiesteem.com&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: -1, &quot;ok&quot;: false, &quot;error&quot;: &quot;Could not receive dynamic_global_properties!&quot;, &quot;count&quot;: 0, &quot;time&quot;: 9.65}, &quot;history&quot;: {&quot;rank&quot;: 9, &quot;ok&quot;: true, &quot;count&quot;: 910, &quot;time&quot;: 18.01}, &quot;apicall&quot;: {&quot;rank&quot;: -1, &quot;ok&quot;: false, &quot;error&quot;: &quot;&apos;NoneType&apos; object is not subscriptable&quot;, &quot;time&quot;: 16.71, &quot;access_time&quot;: 30.0}, &quot;config&quot;: {&quot;rank&quot;: 7, &quot;ok&quot;: true, &quot;time&quot;: 9.23, &quot;access_time&quot;: 1.0}, &quot;block_diff&quot;: {&quot;rank&quot;: -1, &quot;ok&quot;: false, &quot;error&quot;: &quot;Could not receive dynamic_global_properties!&quot;, &quot;head_delay&quot;: 0.0, &quot;diff_head_irreversible&quot;: 0.0, &quot;time&quot;: 21.77}}, {&quot;node&quot;: &quot;wss://steemd.privex.io&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: 3, &quot;ok&quot;: true, &quot;count&quot;: 134, &quot;time&quot;: 30.31}, &quot;history&quot;: {&quot;rank&quot;: 1, &quot;ok&quot;: true, &quot;count&quot;: 21615, &quot;time&quot;: 15.02}, &quot;apicall&quot;: {&quot;rank&quot;: 4, &quot;ok&quot;: true, &quot;time&quot;: 26.27, &quot;access_time&quot;: 0.503}, &quot;config&quot;: {&quot;rank&quot;: 8, &quot;ok&quot;: true, &quot;time&quot;: 10.25, &quot;access_time&quot;: 0.05}, &quot;block_diff&quot;: {&quot;rank&quot;: 3, &quot;ok&quot;: true, &quot;head_delay&quot;: 1.41, &quot;diff_head_irreversible&quot;: 17.0, &quot;time&quot;: 16.96}}, {&quot;node&quot;: &quot;wss://rpc.steemliberator.com&quot;, &quot;version&quot;: &quot;0.19.5&quot;, &quot;block&quot;: {&quot;rank&quot;: 6, &quot;ok&quot;: true, &quot;count&quot;: 32, &quot;time&quot;: 30.41}, &quot;history&quot;: {&quot;rank&quot;: 4, &quot;ok&quot;: true, &quot;count&quot;: 4041, &quot;time&quot;: 15.17}, &quot;apicall&quot;: {&quot;rank&quot;: 5, &quot;ok&quot;: true, &quot;time&quot;: 6.56, &quot;access_time&quot;: 1.012}, &quot;config&quot;: {&quot;rank&quot;: 9, &quot;ok&quot;: true, &quot;time&quot;: 17.29, &quot;access_time&quot;: 0.25}, &quot;block_diff&quot;: {&quot;rank&quot;: 5, &quot;ok&quot;: true, &quot;head_delay&quot;: 4.7, &quot;diff_head_irreversible&quot;: 20.0, &quot;time&quot;: 52.14}}], &quot;parameter&quot;: {&quot;num_retries&quot;: 3, &quot;num_retries_call&quot;: 3, &quot;timeout&quot;: 30, &quot;threading&quot;: false, &quot;beem_version&quot;: &quot;0.19.43&quot;, &quot;start_time&quot;: &quot;2018-07-03T19:20:02&quot;, &quot;end_time&quot;: &quot;2018-07-03T19:39:03&quot;, &quot;script_version&quot;: &quot;1.2.3&quot;, &quot;benchmarks&quot;: {&quot;block&quot;: {&quot;data&quot;: [&quot;count&quot;]}, &quot;history&quot;: {&quot;data&quot;: [&quot;count&quot;]}, &quot;apicall&quot;: {&quot;data&quot;: [&quot;access_time&quot;]}, &quot;config&quot;: {&quot;data&quot;: [&quot;access_time&quot;]}, &quot;block_diff&quot;: {&quot;data&quot;: [&quot;diff_head_irreversible&quot;, &quot;head_delay&quot;]}}} pricefeedMy price feed is updated with beempy: 12beempy updatenodesbeempy witnessfeed holger80 beempy updatenodes updates the node list with the current node stats posted in @fullnodeupdate. steemhive.comI created a new website https://steemhive.com, on which it is easily possible to see new posts from a community: steemhive is opensource and available on github. comedy open micI’m also active in the @comedyopenmic community and I’m currently a judge in round 20. You can view new contribution using steemhive: http://steemhive.com/#comedyopenmic?allYou can find out more in the COM round 20 post. image source If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: This page is synchronized from the post: ‘Witness update #2 - two missed blocks and node is running 0.19.5’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-update-2-two-missed-blocks-and-node-is-running-0-19-5/"},{"title":"Steem price feed - What is going on with bithumb?","text":"As you may know, one duty of a witness is it to provide a price feed for steem. Based on the broadcasted pricefeeds, a median price from the last 3.5 days is calculated and influencing the author rewards and the vote value. At the moment the steem/USD price from the bithumb is way off in comparison to other exchanges. At other exchanges, the price is currently by 1.69 USD, but on bithumb it is 2.34 USD. This causes the price jumps on coincapmarket: You can see the Steem/USD price for different exchanges: Due to the high 24h volume, the price from bithumb influences strongly the average price.Poloniex and HitBTC show a price which is lower than the price listing on other exchanges. Due to the low 24h volume, they do no influence the average price. coinmarketcap.com removed the listing of bithumb shortly: The top 20 witnesses are doing a great job and broadcasting the correct steem price. Some witnesses are broadcasting a too low steem price as they including the exchange price from hitbtc (maybe without using the 24h volume for doing a weighting average). @busy.witness should check the price feed script: as well as @aizensou P.S.: Don’t get fooled by the price bias as I’am. Output from: https://steemd.com/witnesses:Result from http://steeme.com/witness: Sorry @pharesim for tagging! If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘Steem price feed - What is going on with bithumb?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-price-feed-what-is-going-on-with-bithumb/"},{"title":"holger80`s Curation League - please register for participation","text":"You properly know the The Curation and Engagement Leagues from abh12345. I plan to do something similar with the following differences: Programmed voting allowed Leasing or powering down/up of Steem Power is allowed After some feedback, I decided that there will be different classes based on effective SP and used upvote weight. I’m using my python library for steem in order to calculate the following quotient:collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 Collected curation rewards are determined by curation_reward virtual account operations.I will calculate the effective Steem power value for each received curation reward. Therefore, change in effective Steem Power over the week does not matter. To enter the contest, please write a comment with add me. A comment remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. The following image shows the curation over time for my account: Can you beat my 2.05 SP per week and 1k Steem power? If you want to know, then enter the contest by writing a comment with add me! The first contest will start next Sunday/Monday. This page is synchronized from the post: ‘holger80`s Curation League - please register for participation’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-please-register-for-participation/"},{"title":"update for beem - account snapshot added and fix for 0.19.5","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 527 unit tests and a coverage of 74 %. The current version is 0.19.47.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug FixesIn order to fix the frozen steem blockchain, steem was updated to 0.19.5 and 0.19.10. Due to this changes, beem stopped working. Commits 4523f59, a37f108,2795f9d, d1b15a9, andbedd1b1 where able to fix all problems. Problem was the appbase ready node detection which depends on the RPC-node version. Before the update, all nodes with a version below 0.19.4 were not appbase ready and 0.19.4 was appbase ready.After the blockchain fix, 0.19.5 was not appbase ready and 0.19.10 was appbase ready. This inconsitent versioning was addressed by implementing a version comparison function and by adding three different chains to chains.py (with min_version 0.0.0, 0.19.5 and 0.19.10). New FeaturesObjectCache is now threadsafeIn commits d56e822, 94a7c13, dd9b5b4, 6925794, and b1c3205, a robust solution was found to make all BlockchainObjects thread safe. In each cache function a with self.lock: where self.lock = threading.RLock() was added. This prevents that one thread add something to the cache while an other thread is reading at the same time. AccountSnapshot class addedIn commits bedd1b1, 29d685a, and c54180e a new class was implemented which can be used to access historic account states. The plot shows the effective SP and own SP of an account over time. The SP is only calculated based on account operation. In the end the difference is only 8958.65 SP - 8961.9 SP = 3.25 SP. 12345from beem.snapshot import AccountSnapshotacc_snapshot = AccountSnapshot(&quot;holger80&quot;)acc_snapshot.get_account_history()acc_snapshot.build()acc_snapshot.build_sp_arrays() get_account_history() fetches the complete account op history. build() goes then through every operation and adds or removes vests to internal state. Delegations are also tracked in a separate state variable. build_sp_arrays() creates then an array for plotting the effective and owning Steem power. AccountSnapshot can also be used to plot the curation rewards.1234acc_snapshot = AccountSnapshot(account)acc_snapshot.get_account_history()acc_snapshot.build(enable_rewards=True)acc_snapshot.build_curation_arrays() enable_rewards is now set True in the build() function. This creates an second internal state which trackes all curation_reward operations. build_curation_arrays() builds an array which contain the curation_reward per week and 1000 effective Steem Power. At the moment, AccountSnapshot is not well documented, but two examples were added the repository: account_curation_per_week_and_1k_sp.py account_sp_over_time.py AccountSnapshot is based on account_sp_over_time.py by @crokkon and was enhanced by tracking of Steem and Sbd balance as well as tracking of curation rewards. Some missing operation were added and some bugs fixed. Commit historyPrepare next release and improve parse_body for post() commit 8f87197 Add conversion of datetime objects to timestamp in get_steem_per_mvest commit c96afa4 Fix is_network_appbase_ready for newest steem update commit 4523f59 Fix known chains and network versions commit a37f108 Fix wrong version number in known_chains commit 2795f9d Prepare next release and add chain for testnet.steemitdev.com commit 552c9be Add lazy as option to all discussion classes commit 4c7c83d Fix start and stop for history_reverse commit 101bb1e Add option use_del to ObjectCache, for making the cache thread safe commit d56e822 Try to fix clear_expired_items commit 94a7c13 Add bool for clear_expired_items to make it thread safe commit dd9b5b4 Add RLock to Cache for make it thread safe commit 6925794 Remove use_del again from ObjectCache and optimize OpjectCache commit b1c3205Example A cache performance evaluation script was added to examplesBlockchain set_cache_auto_clean disabled Add support for nodes with version below 0.19.5 and fix node version comparision commit d1b15a9 Replace recursive call by while loop commit 3c78ac8 Update nodes in Nodelist Disable seed.bitcoiner.me node Release of 0.19.46 commit bedd1b1Snapshot added This class can be used to access old account states. At the moment, only changes in vests are tracked over time. example added for plotting SP over timeSteem last_node added and refresh of json_config data is forced on node switch snapshot improved and unit tests fixed commit 29d685aSnapshot improved STEEM and SBD history added Documentation added get_data, reset, build functions added Fix unit test and improve documentation commit 48f2b5e Snapshot improved commit c54180e get_data is now fast update_rewards added enable_rewards added to build build_curation_arrays added Add blocknumber check to wait_for_and_get_block commit a666910 If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘update for beem - account snapshot added and fix for 0.19.5’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-account-snapshot-added-and-fix-for-0-19-5/"},{"title":"Estimating when the next block is produced by a witness using beem","text":"You probably know http://steem.arcange.eu/schedule/, where a witness can see the virtual_sheduled_time difference, but what is this difference in hours, minutes and seconds? The following calculations are only correct for witnesses with a rank below 21! In order to calculate this, we need the total vote count, the number of top witnesses and the VIRTUAL_SCHEDULE_LAP_LENGTH2. VIRTUAL_SCHEDULE_LAP_LENGTH2 is a constant and is 340282366920938463463374607431768211455. When summing up all votes (I estimated the sum by calculating the witnesses with the most votes) we have the vote_sum which is currently (considering the first 400 witnesses)2692955397423812592. Currently we have 21 top witnesses.The conversion from virtual_shedule_time to block_numbers is then 1.661915774761242e-19. If we take then the virtual_scheduled_time of a witness and subtracting it from the current_virtual_time, we receive the number of blocks which have to pass until a new block is produced by the witness: As a new block time is 3 seconds, we can calculate the time difference until a new block is produced. source code The calculation result has an error when the active rank and the total rank of a witness is not equal. In this case, disabled witnesses are skipped which reduces the time until a new block is produced. I found out about this by reading the steem source code: If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘Estimating when the next block is produced by a witness using beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/estimating-when-the-next-block-is-produced-by-a-witness-using-beem/"},{"title":"New way of discounted account creation will be commited shortly to the steem develop branch","text":"I don’t know if this was already proper announced by the steemit team, but there is an interesting PR ready to be merged the development branch. There will be new poperties in witness_schedule: account_subsidy_print_rate // Per block print rate with precision 6 single_witness_subsidy_limit // Per witness limit The top19 are renamed to elected witness (there will be 20 elected witnesses in HF 20). There will be new properties in get_dynamic_global_properties: available_account_subsidies What does this mean?When an account should be created and the set fee is lower than the creation fee (currently 3 STEEM) if( paid_fee &lt; creation_fee ) it may be created when: the current block creation witness is an elected witness1FC_ASSERT( current_witness.schedule == witness_object::elected, &quot;Subsidized accounts can only be claimed by elected witnesses&quot; ); There is a decay when a witness creates too many accounts:1// linear decay to enforce no more than 10% max by a single witness over 48 hours. the current witness does not create already too many free accounts 1234new_subsidies += STEEM_ACCOUNT_SUBSIDY_PRECISION;FC_ASSERT( new_subsidies &lt;= wso.single_witness_subsidy_limit, &quot;Witness has claimed too many subsidized accounts recents. Claimed: ${claimed} Limit: ${limit}&quot;, sufficient available_account_subsidies is left 1FC_ASSERT( gpo.available_account_subsidies &gt;= percent_unpaid, &quot;There are not enough subsidized accounts to claim&quot; ); The VESTS amount of the created account is not zero, it is founded from the subsidies and equal to the account creation fee. Let’s go through the unit test, they explain quite sufficient what is going to change:Printing of subsidiesIn each block, new subsidies will be printed: Free account creationA new account with zero fee is created and the amount of vests is subtracted from the available subsidies: Discounted account creationA new account with a fee below the necessary fee is created and less subsidies are needed: It takes one block to generate a discounted accountAfter broadcasting the account creation op, the account is created but pending. After a block was generated, the account is fully working. ConclusionAn account creation operation with a fee lower than the required fee can only be broadcasted when the block signing witness is one of the top 20 and when the witness created not too many free accounts already. available_account_subsidies must also be greater than the necessary account creation fee. When the block signing witness is not a top 20 witness, the op is rejected. So when 19 of 20 witness already created too many accounts, I have to wait and broadcast the op in the correct timepoint, so that my op is broadcasted when this witness is signing. I don’t know If I correctly understand the source code, but his sounds quite strange to me. Instead of powering up the account creation fee to the new account, it should be “burned” by transferring it to the null account. # 1762 So it seems this creates then an account with zero vests inside it Minimum accounts (with 0 SP) should have a limit of certain operations over some unit time. # 2595 which is able to some basic stuff. This page is synchronized from the post: ‘New way of discounted account creation will be commited shortly to the steem develop branch’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/new-way-of-discounted-account-creation-will-be-commited-shortly-to-the-steem-develop-branch/"},{"title":"Reputation can be directly linked to the amount of received upvotes","text":"The account reputation level increases with each vote.How is the reputation increased, when an account was upvoted or flagged? 123if voter_rep &gt; 0: if rshares &gt; 0 or (rshares &lt; 0 and voter_rep &gt; votee_rep ): votee_rep += rshares &gt;&gt; 6 Using this formula, it can be calculated how much votes in SBD an account already has received in his lifetime. This calculation is only an estimation, reward_balance, and recent_claims is assumed to be fixed. It is also assumed that the account was never flagged and that all voter have a reputation level greater than 25. The reputation received from a vote is independent of the Steem price, as the ratio of rshares to Steem power is independent of the Steem price. An account with a Steem power of 1000 SP has a vote of 40572847921 rshares. Thus, a vote influences the reputation independent of the current Steem price. In the table below, the number of 100% upvotes from an account wiht 1000 Steem Power is shown. E.g. for a reputation score of 30.3 6.18 upvotes from a 1k SP account are needed. Reputation Needed 100% 1k SP votes Diff. to last level 25.0 0.00 0.00 26.0 2.04 2.04 27.0 2.63 0.59 28.0 3.40 0.77 29.0 4.39 0.99 30.0 5.67 1.28 31.0 7.32 1.65 32.0 9.46 2.13 33.0 12.21 2.76 34.0 15.77 3.56 35.0 20.37 4.60 36.0 26.31 5.94 37.0 33.98 7.67 38.0 43.89 9.91 39.0 56.69 12.80 40.0 73.22 16.53 41.0 94.56 21.35 42.0 122.13 27.57 43.0 157.74 35.61 44.0 203.73 45.99 45.0 263.13 59.40 46.0 339.84 76.72 47.0 438.93 99.08 48.0 566.89 127.97 49.0 732.17 165.28 50.0 945.64 213.46 51.0 1221.34 275.70 52.0 1577.42 356.08 53.0 2037.31 459.90 54.0 2631.29 593.98 55.0 3398.44 767.15 56.0 4389.26 990.81 57.0 5668.94 1279.69 58.0 7321.72 1652.78 59.0 9456.37 2134.65 60.0 12213.37 2757.00 61.0 15774.17 3560.80 62.0 20373.13 4598.95 63.0 26312.91 5939.78 64.0 33984.43 7671.52 65.0 43892.57 9908.15 66.0 56689.44 12796.87 67.0 73217.23 16527.79 68.0 94563.69 21346.46 69.0 122133.70 27570.01 70.0 157741.73 35608.04 71.0 203731.28 45989.55 72.0 263129.07 59397.79 73.0 339844.27 76715.19 74.0 438925.75 99081.48 75.0 566894.40 127968.65 76.0 732172.27 165277.87 77.0 945636.86 213464.58 78.0 1221336.96 275700.11 79.0 1577417.35 356080.38 80.0 2037312.85 459895.50 81.0 2631290.72 593977.88 82.0 3398442.65 767151.93 83.0 4389257.47 990814.82 84.0 5668944.02 1279686.55 85.0 7321722.74 1652778.73 86.0 9456368.56 2134645.81 87.0 12213369.64 2757001.09 88.0 15774173.47 3560803.83 89.0 20373128.46 4598954.99 90.0 26312907.24 5939778.78 The table was calculated with beem:123456789101112131415161718192021from beem import Steemimport numpy as npfrom beem.utils import reputation_to_scorefrom beem.amount import Amountfrom beem.constants import STEEM_100_PERCENTif __name__ == &quot;__main__&quot;: price = Amount(stm.get_current_median_history()[&quot;base&quot;]) reps = np.logspace(9, 16, 60) used_power = stm._calc_resulting_vote() last_sp = 0 for goal_rep in reps: score = reputation_to_score(goal_rep) needed_rshares = int(goal_rep) &lt;&lt; 6 needed_vests = needed_rshares / used_power / 100 needed_sp = stm.vests_to_sp(needed_vests) print(&quot;| %.1f | %.2f | %.2f | &quot; % (score, needed_sp / 1000, needed_sp/ 1000 - last_sp / 1000)) last_sp=needed_sp This page is synchronized from the post: ‘Reputation can be directly linked to the amount of received upvotes’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/reputation-can-be-directly-linked-to-the-amount-of-received-upvotes/"},{"title":"holger80`s Curation League - week 1","text":"Last week, I announced the start of my new Curation League. 11 accounts wanted to participate, thanks and welcome to my Curation Leaque. I will think about rewards and different classes, when more accounts will be registered. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Results for week 1Gratulations to mys for winning this round! Second place goes grzyb77 and the third place goes to me. eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hour, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 account eff_sp sum_weight median weight reward mys 2587.9 4552 0.82 4.74 grzyb77 217.2 6201 55.00 2.77 holger80 8910.5 6672 25.00 2.48 reazuliqbal 654.5 6545 100.00 2.26 jacekw 458.8 7100 100.00 1.68 doughtaker 694.5 8325 66.00 1.64 abh12345 11468.6 6953 5.00 1.22 yasu24 685.1 6443 50.00 0.88 jlordc 1265.4 7270 50.00 0.79 dexterdev 241.3 6230 100.00 0.74 isnochys 972.7 4013 11.00 0.72 hispeedimagins 140.2 2500 100.00 0.66 Top 10 curationThis table shows the best ten curation rewards. The reward calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Comments were skipped. reward voter author permlink 0.595 holger80 harpagon steem-smart-contracts-save-and-load-the-blockchain 0.472 mys endoprotocol what-is-the-endo-blockchain-protocol 0.283 mys tea-kyun tasteem-3812fe 0.248 mys adara-io adara-io-futuropia-a-glance-at-the-future-of-finance 0.175 grzyb77 rolsonpatison gameeit-pierwszy-steemitowy-magazyn-gamingowo-technologiczny-nr-4 0.171 reazuliqbal to-the-sun visual-hashmarks-on-the-gui-for-each-recorded-note-a-new-feature-for-the-open-source-project-the-amanuensis-automated 0.154 mys purna-ananda time-is-ticking-away-there-is-only-now-this-moment 0.143 grzyb77 foodini bsrolf9v 0.133 grzyb77 krasnalek postac-tytana-w-wybranych-dzielach-witkacego 0.131 holger80 bxute steemconnect4j-security-improvement-and-bug-fixes 0.123 jacekw annanowicka religia-egipska-w-zrodla-greckich-i-rzymskich-cz-2 Top 10 AuthorsThis table shows the post authors which received the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author 0.781 2 harpagon 0.472 1 endoprotocol 0.370 12 burnpost 0.349 7 krasnalek 0.337 3 to-the-sun 0.326 5 kit.andres 0.305 12 rolsonpatison 0.299 6 foodini 0.287 7 grski 0.283 1 tea-kyun Top 3 curationThis shows the top 3 curation posts of each participating account. holger80 reward author permlink 0.595 harpagon steem-smart-contracts-save-and-load-the-blockchain 0.131 bxute steemconnect4j-security-improvement-and-bug-fixes 0.089 hispeedimagins steemer-release-and-update abh12345 reward author permlink 0.030 paulag hf20-exploratory-data-analysis-on-proposed-payout-changes 0.030 abigail-dantes what-do-you-do-when-things-go-wrong 0.028 anomadsoul m8y2sn3y mys reward author permlink 0.472 endoprotocol what-is-the-endo-blockchain-protocol 0.333 heimindanger re-bidbot-now-earn-minimum-and-guaranteed-10-profits-for-the-bid-bots-out-there-at-post-payout-20180704t073952713z 0.283 tea-kyun tasteem-3812fe dexterdev reward author permlink 0.104 dexterdev let-us-cool-dmpc-bilayer-lipids-an-18-day-long-molecular-dynamics-experiment-on-hpc-facility 0.058 sathyasankar the-blocktrades-world-cup-or-my-selections-for-the-semi-finals 0.046 emperorhassy electric-eel-a-fish-that-has-enough-voltage-to-electrocute-a-man reazuliqbal reward author permlink 0.171 to-the-sun visual-hashmarks-on-the-gui-for-each-recorded-note-a-new-feature-for-the-open-source-project-the-amanuensis-automated 0.116 davidmind my-contribution-to-tedit-application-merged-and-used 0.097 sourovafrin hede-io-unable-to-upload-image-on-comment jlordc reward author permlink 0.047 ascheriit spring-2018-anime-recommendation-part-1 0.033 oliverschmid sendy-send-newsletters-100x-cheaper 0.028 dexteriousity ambitious-and-dumb hispeedimagins reward author permlink 0.244 codingdefined re-hispeedimagins-steemer-release-and-update-20180708t054307517z 0.086 hispeedimagins steemer-release-and-update 0.057 braaiboy 9d84hc8l yasu24 reward author permlink 0.110 yasu 4 0.035 yasu tasteem-3849b7 0.025 yasu 68ntpm-tasteem doughtaker reward author permlink 0.112 to-the-sun visual-hashmarks-on-the-gui-for-each-recorded-note-a-new-feature-for-the-open-source-project-the-amanuensis-automated 0.101 kit.andres copropiedad-integral-or-development-update 0.089 jinzo imacros-scripts-twitter-advanced-follow-twitter-accounts-creator-new-version-mm grzyb77 reward author permlink 0.175 rolsonpatison gameeit-pierwszy-steemitowy-magazyn-gamingowo-technologiczny-nr-4 0.143 foodini bsrolf9v 0.133 krasnalek postac-tytana-w-wybranych-dzielach-witkacego jacekw reward author permlink 0.123 annanowicka religia-egipska-w-zrodla-greckich-i-rzymskich-cz-2 0.115 davidspol napoj-orzezwiajacy-wibaja 0.100 assayer pozegnanie-z-zyciem-czym-roznimy-sie-od-skal-maszyn-i-wodospadow isnochys reward author permlink 0.052 emrebeyler itty-bitty-websites-on-url-fragments 0.043 emrebeyler wikitry-a-collaborative-wiki-for-travelers 0.034 isnochys 9f854ef4-80c2-11e8-8918-0242ac110002 This page is synchronized from the post: ‘holger80`s Curation League - week 1’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-1/"},{"title":"update for beem - several improvements and bug fixes","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 536 unit tests and a coverage of 74 %. The current version is 0.19.49.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Bug FixesDiscussions.get_discussions(“blog”, …) returns the same two comments over and overThe bug was fixed in commit 0416477.The limitation of get_discussions_by_blog is that only 100 entries can be fetched at once. More entries can be obtained by setting start_author and start_permlink the last obtained post.This post is then obtained twice. Once in the previous call and once in the next call. In beem, a logic was implemented to skip this doubled post. The observed error could be observed in some special cases. The bug was fixed by implementing a better logic:123456if query_count != 0 and rpc_query_count == 0 and (d[&quot;author&quot;] == start_author and d[&quot;permlink&quot;] == start_permlink): double_result = True if len(dd) == 1: found_more_than_start_entry = Falsestart_author = d[&quot;author&quot;]start_permlink = d[&quot;permlink&quot;] get_all_replies and get_parent were added to beem.comment.CommentTwo important functions for which no RPC-API call exists were added. get_all_replies returns all replies from a comment. All comments are returned in list. depth, parent_permlink and parent_author are included into each comment. Using these three values, the complete reply structure can be reconstructed (Building a reply tree is planned for one of the next updates). 12345from beem.comment import Commentbyteball_post = Comment(&quot;@punqtured/official-byteball-airdrop-to-steemians&quot;)all_replies = byteball_post.get_all_replies()len(all_replies)2481 Let’s take a look on the 1000th reply: get_parent() can now be used to find the parent post:1234reply = Comment(&quot;@samhamou/re-tincho-re-gaurav9971-re-punqtured-official-byteball-airdrop-to-steemians-20180712t225124402z&quot;)parent = reply.get_parent()parent.authorperm&apos;@punqtured/official-byteball-airdrop-to-steemians&apos; Reconstruct vote power since account creationWith the newest improvements (commit 305491f) for beem.snapshot.AccountSnapshot it is now possible to reconstruct the vote power since account creation. Only weight and timestamp of all outgoing votes is used to reconstruct the vote power: Last reconstructed vote power for my account is 93.64. The current vote power of my account is1234from beem.account import Accountacc = Account(&quot;holger80&quot;)acc.get_voting_power(False)93.65 The difference is only 0.01 %. Reconstruct account reputation over timeReconstruction of account reputation was added incommit fa2675bThe account reputation is calculated from all incoming votes using the vote timestamp, rshares and voter reputation: The last reconstructed reputation value is:1last reputation 62.581168 whereas my current repution is:1234from beem.account import Accountacc = Account(&quot;holger80&quot;)acc.get_reputation()62.604815023975625 The difference between my current and the reconstructed repution is only 0.0236. Commit historyPrepare next release and fix Amount for condenser broadcast ops (used for appbase right now) commit 812155c fixes issue #45 commit fc85671 Fixes issue #45 by checking the timestamp of last_payout instead of net_rshares. With these changes, voting of unvoted posts/comments is possible. Refactoring of Transactionbuilder and adding of _use_condenser_api for defining the use of condenser api on broadcasting when using appbase nodes Add get_all_replies to comment for fetching all replies commit 664bbaa Fix formatToTimestamp for python 2.7 commit 49012f3 Refactor Amount detection in account, claimreward improved commit 6d9181c Several improvements and fixes commit 305491fCLI upvote and downvote fixedSnapshot refactoring update_vote and build_vp_arrays added for showing vote power historyExamples account_vp_over_time added Prepare next release and add next_witness_block_countdown example commit ef18f9e add get_parent to comment and fix for beempy reward commit 8d0e364 Fix issue #51 commit 0416477 Fixes replies for Discussions commit 1f8c90c Fixes Discussions, when only one reply is returned commit aa74d03 snapshot improved and unit test fixed commit fa2675bSnapshot update_in_vote added enable_votes changed to enable_in_votes and enable_out_votes build_rep_arrays addedExample account_vp_over_time added account_reputation_by_SP addedDiscussion check if parameter exists in discussion_query added Fix #57 and try to improve error “Client returned invalid format. Expected JSON!” handling commit dea8826 Fix unit tests and improve json export for account commit d655d66 depth property added for comments Fix flake8 and improve steemconnect fix for #57 commit 7220734 If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘update for beem - several improvements and bug fixes’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-several-improvements-and-bug-fixes/"},{"title":"holger80`s Curation League - week 2","text":"source You can read more about the start of my new Curation League.17 accounts wanted to participate, thanks and welcome to my Curation League. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 2Gratulations to mys for winning this round! arabson1990 for the second place! reazuliqbal for the third place! All three did a great job in selecting undervalued posts for curation. Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hour, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This asures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2599.9 6293 1.19 6.22 6.22 2. arabson1990 195.2 6200 100.00 3.41 3.41 3. reazuliqbal 676.8 6370 50.00 2.98 2.98 4. grzyb77 217.9 5940 55.00 2.66 2.66 5. holger80 8980.6 6604 25.00 2.02 2.02 6. diosbot 2348.6 8241 38.00 2.06 1.75 7. doughtaker 697.7 9320 100.00 2.13 1.60 8. jacekw 466.1 5900 100.00 1.40 1.40 9. emrebeyler 6533.5 7059 2.00 1.13 1.12 10. abh12345 11567.3 7904 5.00 1.25 1.11 11. jlordc 1262.8 7090 50.00 1.09 1.07 12. yasu24 711.6 5169 30.00 0.92 0.92 13. annaburska 1032.4 6313 100.00 0.87 0.87 14. isnochys 1067.0 3695 10.00 0.68 0.68 15. dexterdev 252.4 4805 100.00 0.59 0.59 16. lelon 61.2 2000 100.00 0.51 0.51 17. hispeedimagins 152.3 3150 100.00 0.47 0.47 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. This section is dominated by mys, nice work! Top 10 curation reward voter author permlink 0.803 mys economicvictim how-to-get-bitcoin-with-paypal 0.570 mys sohaibomer you-need-to-fit-your-body-have-some-tips 0.519 mys naufal esteemians-e-f-a-premiere-class-5-activity-report-the-registration-mechanism-221fc54af4ebbest 0.429 yasu24 katakoto steemit 0.405 mys dreamants the-fall-of-the-united-states-of-america-we-are-the-next-rome 0.391 mys sohaibomer do-you-understand-bitcoin-difficult-with-calculate 0.384 mys steem-untalented steem-untalented-feature-posts-for-friday-july-13th-2018-untalented 0.367 mys osmanaga yalnizlik-ve-mutluluk 0.365 mys intheair animal-love 0.331 reazuliqbal singhpratyush busy-api-adding-support-for-expo-notifications 0.310 emrebeyler pars11 remote-ok-get-a-remote-job-you-can-do-anywhere Top 10 AuthorsThis table shows the post authors which received the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author 0.585 18 veggie-sloth 0.519 1 naufal 0.478 2 sohaibomer 0.439 25 zwora 0.393 2 steem-untalented 0.391 13 burnpost 0.363 9 adelair 0.334 10 mkt 0.326 3 codingdefined 0.322 9 wrestlingworld Top 3 curationThis shows the top 3 curation posts of each participating account.The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. The accounts are sorted by league entry date. Only posts are shown. holger80 reward author permlink 0.151 to-the-sun specific-note-selection-and-deletion-a-new-feature-for-the-open-source-project-the-amanuensis-automated-songwriting-and 0.148 snwolak steemblr-development-update-05-theme-editor 0.134 mightypanda steem-curator-mvp-comments-curation abh12345 reward author permlink 0.130 stimp1024 gb-9th-july-wolverhampton-50-of-winnings-paid-in-steem 0.110 steemonkey moroccan-memories-celebrity-smokes-comedy-open-mic-round-22 0.104 holybranches the-blocktrades-world-cup-or-my-selections-for-the-semi-finals mys reward author permlink 0.803 economicvictim how-to-get-bitcoin-with-paypal 0.570 sohaibomer you-need-to-fit-your-body-have-some-tips 0.519 naufal esteemians-e-f-a-premiere-class-5-activity-report-the-registration-mechanism-221fc54af4ebbest dexterdev reward author permlink 0.099 mathowl math-art-5-the-sound-of-integer-sequences 0.067 mscdigital free-12-week-mooc-in-digital-currencies-or-offered-by-the-university-of-nicosia 0.032 mathowl mka81ufw reazuliqbal reward author permlink 0.331 singhpratyush busy-api-adding-support-for-expo-notifications 0.254 psikoz logo-proposal-for-lector 0.192 codingdefined letsdisc-create-question-upvotes-and-more jlordc reward author permlink 0.105 adelair 7124e520-874f-11e8-a7c2-0242ac110003 0.080 legendchew becausetogetherwecanbuildthefuture-funditionambassadormalaysia-7d6c8l2r79 0.068 vaansteam walking-in-wonderland-colored-pencils-drawing-tips hispeedimagins reward author permlink 0.099 holger80 update-for-beem-account-snapshot-added-and-fix-for-0-19-5 0.034 jasonbu iforgotmysteemiversaryima1yearoldsteemian-gqfxnlk9ty 0.033 eroche steemr-is-now-steemrdata-and-has-new-features yasu24 reward author permlink 0.429 katakoto steemit 0.159 cafelate en-ja-water-color-penguin 0.108 shogo tasteem-460d4c doughtaker reward author permlink 0.099 cryptohazard cryptohedge-cryptocurrency-porfolio-hedge-fund 0.079 snwolak steemblr-development-update-05-theme-editor 0.077 mightypanda steem-curator-mvp-comments-curation grzyb77 reward author permlink 0.250 wrestlingworld kraniki-czy-warto-korzystac-i-ktore-wykorzystywac-fart-jaki-mnie-spotkal-w-niefajnej-sytuacji 0.200 foodini x18qi7jj 0.158 veroniq 6-jak-sobie-radzic-w-sytuacji-zagrozenia-atak-ze-strony-osoby-chorej-psychicznie jacekw reward author permlink 0.092 lukas346 junior-i-elektronika-wyswietlamy-temperature-na-ekranie-lcd 0.083 veggie-sloth leniwiec-nasluchuje-7-pielegniarka-chce-mnie-zmienic-w-stereo 0.075 anka post-konkursowy-film-serial-ktory-nigdy-mi-sie-nie-znudzi-m-a-s-h-alf-mistrz-kierownicy-ucieka-selena isnochys reward author permlink 0.095 altobee the-blocktrades-world-cup-or-my-selections-for-the-finals 0.064 altobee steem-on 0.057 pipiczech military-technical-museum-lesany emrebeyler reward author permlink 0.310 pars11 remote-ok-get-a-remote-job-you-can-do-anywhere 0.308 leotrap s1a4cuyu 0.304 theghost1980 secretos-de-hacer-dinero-1 diosbot reward author permlink 0.169 psychepl pracujacujesz-za-granica-a-w-polsce-nie-zarabiasz-bedziesz-musial-skladac-deklaracje-zerowe-prawo-9 0.121 lokibalboa historyjka-o-nauce-historii-w-szkole 0.106 psychepl kolejka-gorska-emocji-w-chorobie-afektywnej-dwubiegunowej-fazy-choroby arabson1990 reward author permlink 0.181 see-it-feel-itpl tt5-ostatnia-plywajaca-kopalnia 0.166 ayatollah zoroastryzm-dualistyczna-religia-iranczykow-perspektywa-historyczna 0.164 annaburska malinowo-bananowe-lody-na-mleku-kokosowym-bez-cukru lelon reward author permlink 0.098 jamesartville geb-garden-of-the-gods-cover-artwork-process-drawing 0.049 connor-russo bocetos-de-anatomia-proceso 0.049 ocisly planowany-wielki-teleskop-nasa-poleci-na-pokladzie-big-falcon-rocket annaburska reward author permlink 0.057 arabson1990 wybrane-ptaki-lowne-wystepujace-w-polsce 0.048 kepkeeper pora-szykowac-sie-na-wojne-or-boty-na-steemit 0.044 flocki relaks-w-ogrodzie This page is synchronized from the post: ‘holger80`s Curation League - week 2’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-2/"},{"title":"How long does it take to stream the entire steem blockchain?","text":"source I was asking me, how long does it take to stream the entire steem blockchain to my computer? In order to find out, I wrote the following script: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849from beem.blockchain import Blockchainfrom beem.nodelist import NodeListfrom beem import Steemfrom beem.instance import set_shared_steem_instanceimport timeif __name__ == &quot;__main__&quot;: # Update current node list from @fullnodeupdate nodes = NodeList() setup = [{&quot;appbase&quot;: True, &quot;https&quot;: True, &quot;threading&quot;: False, &quot;max_batch_size&quot;: 50}, {&quot;appbase&quot;: True, &quot;https&quot;: False, &quot;threading&quot;: False, &quot;max_batch_size&quot;: 50}, {&quot;appbase&quot;: False, &quot;https&quot;: False, &quot;threading&quot;: True, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: False, &quot;https&quot;: False, &quot;threading&quot;: False, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: True, &quot;https&quot;: False, &quot;threading&quot;: True, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: True, &quot;https&quot;: False, &quot;threading&quot;: False, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: False, &quot;https&quot;: True, &quot;threading&quot;: True, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: False, &quot;https&quot;: True, &quot;threading&quot;: False, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: True, &quot;https&quot;: True, &quot;threading&quot;: True, &quot;max_batch_size&quot;: None}, {&quot;appbase&quot;: True, &quot;https&quot;: True, &quot;threading&quot;: False, &quot;max_batch_size&quot;: None}] result_setup_days =[] start_block_list = [1000, 10e6, 20e6] for s in setup: print(s) nodes.update_nodes(weights={&quot;hist&quot;: 1}) stm = Steem(node=nodes.get_nodes(appbase=s[&quot;appbase&quot;], https=s[&quot;https&quot;], wss=not s[&quot;https&quot;])) set_shared_steem_instance(stm) b = Blockchain() end_block = b.get_current_block_num() for start_block in start_block_list: print(start_block) last_block_num = None block_diff = 1000 result_days = [] print(&quot;Starting to stream at block %d.&quot; % start_block) for op in b.stream(start=int(start_block), max_batch_size=s[&quot;max_batch_size&quot;], threading=s[&quot;threading&quot;], thread_num=8): block_num = op[&quot;block_num&quot;] if last_block_num is None: start_time = time.time() last_block_num = block_num if (block_num - last_block_num) &gt; block_diff: time_for_blocks = time.time() - start_time print(&quot;\\n---------------------\\n&quot;) running_days = (end_block - 1) * time_for_blocks / block_diff / 60 / 60 / 24 print(&quot;Duration for %d blocks: %.2f s (%.3f s per block) -- %.2f days to go&quot; % (end_block, time_for_blocks, time_for_blocks / block_diff, running_days)) start_time = time.time() last_block_num = block_num result_days.append(running_days) break result_setup_days.append(result_days) I’m measuring for each setup three times 1000 blocks and I calculate based on this measurement, how long it would take. Setups https with 0.19.10 nodes, max_batch_size=50 wss with 0.19.10 nodes, max_batch_size=50 wss with 0.19.5 nodes, 8 threads wss with 0.19.5 nodes wss with 0.19.10 nodes, 8 threads wss with 0.19.10 nodes https with 0.19.5 nodes, 8 threads https with 0.19.5 nodes https with 0.19.10 nodes, 8 threads https with 0.19.10 nodes ResultsThis table should the mean duration calculated from the three block streaming durations. # appbase https threading max_batch_size days 1 True True False 50 1.837 2 True False False 50 - 3 False False True None 4.973 4 False False False None 11.583 5 True False True None 7.54 6 True False False None 11.99 7 False True True None 193.966 8 False True False None 433.633 9 True True True None 14.67 10 True True False None 85.63 In this table, the estimated duration to stream the entire blockchain was calculated based on the time duration to stream 1000 blocks starting at the given block numer. # Block: 1000 Block: 10000000 Block: 20000000 1 0.96 1.32 3.23 2 - - - 3 3.36 1.74 9.82 4 7.96 8.65 18.14 5 3.67 1.52 9.89 6 9.27 8.90 17.80 7 276.56 145.90 159.44 8 434.91 430.40 435.59 9 31.49 5.82 6.72 10 84.87 85.05 86.98 ConclusionsThe fastest way to stream the entire blockchain with beem is using batched calls on a 0.19.10 https node. It takes then only around 2 days. The result could be improved even more, by adding also threading to batched block streaming. Using https nodes without batch calls is not recommended, it takes at least 14.6 days (0.19.10 node with threading). Using Websocket nodes is also an alternative, using threading it takes 5 days on a 0.19.5 node and 7 days on a 0.19.10 node. Batch calls on a 0.19.10 Websocket node did not work, as fetching 1000 blocks did take more than several hours. I aborted this test run for this configuration. Streaming 1000 blocks around block 10 million takes less time and streaming around block 20 million takes longer. The reason for this is the increased block size over time. Sometimes, streaming blocks starting from 1000 takes longer, this could be caused by the fact that these old blocks were not cached in the nodes. This page is synchronized from the post: ‘How long does it take to stream the entire steem blockchain?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-long-does-it-take-to-stream-the-entire-steem-blockchain/"},{"title":"Account names in follow operation are not checked by design","text":"I was asking me, what will be the output of the following script 123456789101112from beem import Steemfrom beem.account import Accountif __name__ == &quot;__main__&quot;: stm = Steem(keys=[&quot;5BEEMBOTPOSTINGKEY&quot;]) account = Account(&quot;beembot&quot;, steem_instance=stm) account.follow(&quot;holger80\\u0020&quot;) account.follow(&quot;holger80+&quot;) account.follow(&quot;holger80_that_is_great&quot;) print(account.get_following()) The output is1[&apos;holger80 &apos;, &apos;holger80+&apos;, &apos;holger80_that_is&apos;] Is holger80 now followed by beembot?123account2 = Account(&quot;holger80&quot;, steem_instance=stm)&quot;beembot&quot; in account2.get_followers()False No beembot does not follow holger80, but three non existing accounts.1account.follow(&quot;holger80&quot;) Now beembot follows holger8012&quot;beembot&quot; in account2.get_followers()True 12345for h in account.history_reverse(only_ops=[&quot;custom_json&quot;]): print(h){&apos;required_auths&apos;: [], &apos;required_posting_auths&apos;: [&apos;beembot&apos;], &apos;id&apos;: &apos;follow&apos;, &apos;json&apos;: &apos;[&quot;follow&quot;, {&quot;follower&quot;: &quot;beembot&quot;, &quot;following&quot;: &quot;holger80&quot;, &quot;what&quot;: [&quot;blog&quot;]}]&apos;, &apos;trx_id&apos;: &apos;daa6ee4a808d37fc0348cee11ada95b6d558d2d2&apos;, &apos;block&apos;: 24537865, &apos;trx_in_block&apos;: 34, &apos;op_in_trx&apos;: 0, &apos;virtual_op&apos;: 0, &apos;timestamp&apos;: &apos;2018-07-27T08:36:00&apos;, &apos;account&apos;: &apos;beembot&apos;, &apos;type&apos;: &apos;custom_json&apos;, &apos;_id&apos;: &apos;b5aeae7e5cd4190d6c3c37d90c156aafeec4142a&apos;, &apos;index&apos;: 31}{&apos;required_auths&apos;: [], &apos;required_posting_auths&apos;: [&apos;beembot&apos;], &apos;id&apos;: &apos;follow&apos;, &apos;json&apos;: &apos;[&quot;follow&quot;, {&quot;follower&quot;: &quot;beembot&quot;, &quot;following&quot;: &quot;holger80_that_is_great&quot;, &quot;what&quot;: [&quot;blog&quot;]}]&apos;, &apos;trx_id&apos;: &apos;dee2f27051e0ba3090c332d1503ac8cd88e5a1a2&apos;, &apos;block&apos;: 24537774, &apos;trx_in_block&apos;: 18, &apos;op_in_trx&apos;: 0, &apos;virtual_op&apos;: 0, &apos;timestamp&apos;: &apos;2018-07-27T08:31:27&apos;, &apos;account&apos;: &apos;beembot&apos;, &apos;type&apos;: &apos;custom_json&apos;, &apos;_id&apos;: &apos;64e4791010c3039b0e3fc33edcc5abf48ea22fed&apos;, &apos;index&apos;: 30}{&apos;required_auths&apos;: [], &apos;required_posting_auths&apos;: [&apos;beembot&apos;], &apos;id&apos;: &apos;follow&apos;, &apos;json&apos;: &apos;[&quot;follow&quot;, {&quot;follower&quot;: &quot;beembot&quot;, &quot;following&quot;: &quot;holger80+&quot;, &quot;what&quot;: [&quot;blog&quot;]}]&apos;, &apos;trx_id&apos;: &apos;98c0d36c57789924345171f5a058dfa0758ea702&apos;, &apos;block&apos;: 24537759, &apos;trx_in_block&apos;: 18, &apos;op_in_trx&apos;: 0, &apos;virtual_op&apos;: 0, &apos;timestamp&apos;: &apos;2018-07-27T08:30:42&apos;, &apos;account&apos;: &apos;beembot&apos;, &apos;type&apos;: &apos;custom_json&apos;, &apos;_id&apos;: &apos;0f0a637bc89b4c4e88c4c88dac4c92c1076a25ee&apos;, &apos;index&apos;: 29}{&apos;required_auths&apos;: [], &apos;required_posting_auths&apos;: [&apos;beembot&apos;], &apos;id&apos;: &apos;follow&apos;, &apos;json&apos;: &apos;[&quot;follow&quot;, {&quot;follower&quot;: &quot;beembot&quot;, &quot;following&quot;: &quot;holger80 &quot;, &quot;what&quot;: [&quot;blog&quot;]}]&apos;, &apos;trx_id&apos;: &apos;cc33218787cc7708d3f43ea9da7d0f1114a63cd5&apos;, &apos;block&apos;: 24537735, &apos;trx_in_block&apos;: 54, &apos;op_in_trx&apos;: 0, &apos;virtual_op&apos;: 0, &apos;timestamp&apos;: &apos;2018-07-27T08:29:30&apos;, &apos;account&apos;: &apos;beembot&apos;, &apos;type&apos;: &apos;custom_json&apos;, &apos;_id&apos;: &apos;4e59c7246f786c1e88180551c097e5a34e7c1846&apos;, &apos;index&apos;: 28} I’m able to unfollow the non-existing accounts:123account.unfollow(&quot;holger80_that_is_great&quot;)account.get_following()[&apos;holger80&apos;, &apos;holger80 &apos;, &apos;holger80+&apos;] @holger80 is also not working123456account.unfollow(&quot;holger80&quot;)account.follow(&quot;@holger80&quot;)account.get_following()[&apos;@holger80&apos;, &apos;holger80 &apos;, &apos;holger80+&apos;]&quot;beembot&quot; in account2.get_followers()False I opened a new issue on github but closed it. It seems this is the intended behavior and won’t be fixed. So check twice before you broadcast follow operations. This page is synchronized from the post: ‘Account names in follow operation are not checked by design’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/account-names-in-follow-operation-are-not-checked-by-design/"},{"title":"holger80`s Curation League - week 3","text":"source You can read more about the start of my new Curation League.17 accounts wanted to participate, thanks and welcome to my Curation League. There are no new participants from last week. Seems, I have to think about some prices :). I added the vote delay time in minutes to the top3 section, as this is an important information. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 3Gratulations to (the same winner from week 2) mys for winning this round! arabson1990 for the second place! reazuliqbal for the third place! All three did a great job in selecting undervalued posts for curation. Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hour, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2611.5 5123 1.44 4.83 4.83 2. arabson1990 210.4 7100 100.00 4.37 4.31 3. reazuliqbal 940.8 6636 50.00 2.94 2.94 4. grzyb77 218.6 6480 55.00 2.82 2.82 5. diosbot 2382.6 8817 37.00 2.64 2.09 6. holger80 9052.5 7119 25.00 1.89 1.85 7. jacekw 471.5 9070 100.00 2.36 1.82 8. yasu24 733.1 6402 30.00 1.34 1.34 9. jlordc 1269.3 6978 50.00 1.26 1.26 10. doughtaker 700.0 9098 66.00 1.55 1.19 11. abh12345 11792.7 7804 5.00 1.26 1.13 12. annaburska 1142.1 6589 50.00 0.87 0.87 13. emrebeyler 6280.0 6186 2.00 0.82 0.82 14. hispeedimagins 175.8 3538 100.00 0.73 0.73 15. dexterdev 254.0 6565 100.00 0.68 0.68 16. isnochys 1100.8 3332 10.00 0.54 0.54 17. lelon 61.8 1500 100.00 0.40 0.40 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. This section is dominated this week by mys and emrebeyler, nice work! reward voter author permlink 0.752 mys ajaysahani trip-to-nepal-1abb130cd7ce1 0.378 mys pennyalbritton trial 0.364 mys szrociak elon-musk-pokazuje-swoje-prawdziwe-ja 0.348 reazuliqbal arslanshn a-new-logo-for-crossroad 0.326 mys lonemalay yamnmasa-aeyaatha 0.326 emrebeyler leotrap last-saturday-fair-to-fund-steem-4-the-kids-project 0.324 emrebeyler fingersik decentralizationtotherescuedecenternetthevisionpt1of6-qbd77zigc6 0.324 emrebeyler kalvas co172s87 0.321 emrebeyler leotrap cookin-time-in-the-fair-steem-4-the-kids-project 0.319 emrebeyler fingersik decentralizationtotherescuedecenternetthemostvaluableresourceontheplanetandhowspyceisconnectedpt2of6-hcwq46fvaw 0.317 emrebeyler leotrap fqnjmnry Top 10 AuthorsThis table shows the post authors which received the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author 0.513 14 bowess 0.457 11 krasnalek 0.450 9 wrestlingworld 0.360 6 yasu 0.349 8 adelair 0.346 14 burnpost 0.327 12 flocki 0.327 5 zuur 0.320 20 grecki-bazar-ewy 0.314 13 barbarossastudio Top 3 curationThis shows the top 3 curation posts of each participating account.The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. The accounts are sorted by league entry date. Only posts are shown. holger80 reward delay [min] author permlink 0.150 47.9 jingis07 on-a-mission-to-keep-steemit-clean-or-or 0.148 131.2 snwolak steemblr-development-update-05-theme-editor 0.117 26.9 stmdev beem-unable-to-get-replies-to-an-account-via-discussions-repliesbylastupdate abh12345 reward delay [min] author permlink 0.265 26.7 eastmael ulog-the-art-of-giving-back 0.074 25.8 asbear steempayco-usd3 0.071 19.9 surfermarly steemians-giving-feedback-on-steem-here-are-the-results-of-the-summer-survey-0cb1b1a5686eeest mys reward delay [min] author permlink 0.752 34.8 ajaysahani trip-to-nepal-1abb130cd7ce1 0.378 30.4 pennyalbritton trial 0.364 29.0 szrociak elon-musk-pokazuje-swoje-prawdziwe-ja dexterdev reward delay [min] author permlink 0.043 37.0 effofex my-reading-log-interesting-stuff-from-the-past-few-days-2018-07-20 0.043 105.2 buckydurddle utopian-open-source-radio-episode-7-full-show-recording 0.043 2197.9 sathyasankar the-fallen-jackfruit-in-the-heavy-rain-c9c5aedf5cbc2 reazuliqbal reward delay [min] author permlink 0.348 57.1 arslanshn a-new-logo-for-crossroad 0.168 8.9 theuxyeti sugarsteem-update 0.163 26.8 midun logo-design-for-storage-server-aaf4d70b818fdest jlordc reward delay [min] author permlink 0.104 111.2 tegoshei steemit-milestone-it-s-my-first-steemit-anniversary-let-me-tell-you-my-story-ulog-day-52 0.093 30.2 adelair 6n5s2fye 0.090 30.2 adelair howl-moving-castle-fanart hispeedimagins reward delay [min] author permlink 0.182 48.5 shaphir steemer-v-1-4-4-the-app-will-crash-when-deleting-some-the-draft 0.091 6.0 buckydurddle utopian-open-source-radio-episode-7-full-show-recording 0.045 253.9 thewritersblock writingpromptartcontest13-ontg4h6eb8 yasu24 reward delay [min] author permlink 0.202 1090.2 afukichi 100km-2018-memories-of-saromako-100-km-ultramarathon-2018 0.201 22.9 yasu tasteem-fe83a0 0.174 23.2 steemit-jp japan-daily-curation-44 doughtaker reward delay [min] author permlink 0.097 1771.3 bflanagin edusteem-student-interface-dashboard 0.086 30.9 techtek blinkit-or-standalone-device-v1-0-heltek-wifi-kit-8 0.079 1070.7 snwolak steemblr-development-update-05-theme-editor grzyb77 reward delay [min] author permlink 0.250 26.2 wrestlingworld kraniki-czy-warto-korzystac-i-ktore-wykorzystywac-fart-jaki-mnie-spotkal-w-niefajnej-sytuacji 0.191 26.1 bowess rozpoznajemy-motyle-1 0.158 26.2 bartheek moja-przygoda-z-kasetami-magnetofonowymi-cz-1 jacekw reward delay [min] author permlink 0.100 16.9 krasnalek analiza-i-interpretacja-wiersza-zbigniewa-herberta-pt-przeslanie-pana-cogito 0.097 19.2 krasnalek lenin-napisal-przeciez-o-wszystkim-czyli-satyryczne-spojrzenie-na-socrealizm-w-powiesciach-andrzeja-pilipiuka-wampir-z-m3-i 0.097 26.0 flocki robot-na-bazie-raspberry-pi-3 isnochys reward delay [min] author permlink 0.069 19.8 emrebeyler y-productive-personal-productivity-tracker 0.063 16.9 ahmadmanga rpg-concepts-2-enemy-encounters 0.055 966.4 cryptoeater in-sydney-for-a-few-days-i-ll-be-slightly-inactive-for-a-few-days emrebeyler reward delay [min] author permlink 0.326 30.3 leotrap last-saturday-fair-to-fund-steem-4-the-kids-project 0.324 30.2 fingersik decentralizationtotherescuedecenternetthevisionpt1of6-qbd77zigc6 0.324 30.4 kalvas co172s87 diosbot reward delay [min] author permlink 0.126 30.1 postcardsfromlbn vacationland-and-the-poetry-of-50-mm-or-photo-series 0.106 30.1 psychepl kolejka-gorska-emocji-w-chorobie-afektywnej-dwubiegunowej-fazy-choroby 0.097 28.1 ciapo retro-reanimacja-pad-x-box-360 arabson1990 reward delay [min] author permlink 0.165 26.6 mespanta annapurna-circuit-trek-cz14-odpoczynek 0.156 26.6 thermomania ciasto-bez-pieczenia–grysikowe-z-galaretk-i-owocami 0.152 26.5 jo-hannes co-cesarz-etiopii-hajle-syllasje-mial-wspolnego-z-rastafarianami lelon reward delay [min] author permlink 0.081 112.8 who-knock hazard-or-or-czym-jest-czym-nie-jest 0.049 108.3 jacekw.dev analysis-of-non-english-communities-on-steem 0.049 42.1 arifmunandar72 owl-ilustration-art-drawing annaburska reward delay [min] author permlink 0.101 28.3 maxofp2p 7f820b81-8aa6-11e8-86a8-0242ac110003 0.068 29.6 flocki robot-na-bazie-raspberry-pi-2 0.045 23.9 grecki-bazar-ewy moja-letnia-makaronada-pl-kuchniakonkurs Just at a comment with add me in order to participate. This page is synchronized from the post: ‘holger80`s Curation League - week 3’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-3/"},{"title":"How to secretly follow/unfollow accounts","text":"When an account is followed or unfollowed, a notification may broadcast to the account. Services that provide this, are GINAbot or the busy.org site for example. When beembot is following me, i will receive a notification like: busy.org GINAbot steemd Follow/Unfollow notification can be prevented by using beem and by creating the follow ops in a special wayFollow / unfollow operations are custom_json operations, this means they will not be checked when broadcasting. When a follow/unfollow operation is embedded into a list, notification services will not notice, as they do not recognize them as valid follow operation. beembot is currently following me:Lets beembot secretly unfollow me using beem (notice the double [ and ]):12345678from beem import Steemfrom beem.account import Accountstm = Steem(keys=[&quot;POSTINGKEYBEEMBOT&quot;])account = Account(&quot;beembot&quot;, steem_instance=stm)what = &quot;&quot; # &quot;blog&quot; for followjson_body = [[&apos;follow&apos;, {&apos;follower&apos;: &apos;beembot&apos;, &apos;following&apos;: &apos;holger80&apos;, &apos;what&apos;: [what]}]]stm.custom_json(&quot;follow&quot;, json_body, required_posting_auths=[account[&quot;name&quot;]]) The operation was sucessfull:Link to steemd steemd does not recognize the valid unfollow op: I did not receive a notification from GINAbot or from busy.org. Let’s secretly unfollow all followed accountsbeembot is following three accounts now:Let`s secretly unfollow all in one batch by broadcasting a valid list of unfollow operation embedded into a single custom_json operation:12345678910111213from beem import Steemfrom beem.account import Accountstm = Steem(keys=[&quot;POSTINGKEYBEEMBOT&quot;])account = Account(&quot;beembot&quot;, steem_instance=stm)following_list = account.get_following()json_body = []what = &apos;&apos; # unfollow# what = &apos;blog&apos; # followfor following in following_list: follow_op = [&apos;follow&apos;, {&apos;follower&apos;: account[&quot;name&quot;], &apos;following&apos;: following, &apos;what&apos;: [what]}] json_body.append(follow_op)stm.custom_json(&quot;follow&quot;, json_body, required_posting_auths=[account[&quot;name&quot;]]) There is a maximum custom_json size, this example may not work with many accounts in following_list. It worked for three accounts: The code of GINAbot, busy.org and steemd may be adapted, so check first if the secret follow/unfollow operation still works. This page is synchronized from the post: ‘How to secretly follow/unfollow accounts’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-secretly-follow-unfollow-accounts/"},{"title":"holger80`s Curation League - week 4","text":"source You can read more about the start of my new Curation League.23 accounts wanted to participate, thanks and welcome to my Curation League. There are six new participants from last week. Thank you all for participating! To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 4Gratulations to arabson1990 for winning this round! mys for the second place! reazuliqbal for the third place! All three did a great job in selecting undervalued posts for curation. Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. arabson1990 212.0 7400 100.00 4.51 4.27 2. mys 2632.9 4473 2.00 3.48 3.48 3. reazuliqbal 799.6 7150 50.00 3.54 3.46 4. jacekw 504.3 8265 50.00 2.60 2.20 5. diosbot 2393.1 8707 40.00 2.34 1.88 6. grzyb77 220.0 5560 55.00 1.84 1.84 7. doughtaker 732.1 9485 66.00 2.45 1.81 8. holger80 9095.5 7430 49.00 1.61 1.51 9. yasu24 748.6 6433 25.00 1.40 1.40 10. abh12345 15191.7 7348 4.00 1.30 1.23 11. jlordc 1298.7 7223 50.00 1.23 1.19 12. blanchy 345.3 5740 100.00 1.10 1.10 13. crypto-econom1st 62.9 1600 100.00 1.00 1.00 14. annaburska 1206.0 6592 35.00 0.98 0.98 15. emrebeyler 5998.5 7366 15.00 0.89 0.84 16. lelon 61.8 1900 100.00 0.82 0.82 17. yailinbel 22.3 1200 100.00 0.78 0.78 18. dexterdev 254.2 4885 100.00 0.64 0.64 19. isnochys 1137.4 3643 10.00 0.62 0.62 20. hispeedimagins 176.8 3900 100.00 0.48 0.48 21. isarmoewe 721.2 4300 25.00 0.41 0.41 22. ajayyy 126.3 1500 100.00 0.33 0.33 23. cryptoyzzy 56.1 825 100.00 0.30 0.30 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. This section is dominated this week by mys nice work! Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.550 mys 28.9 xright PL/ENG Wbijaj! Fortnite Nowe wyzwania tygodniowe!!! 0.514 yasu24 23.5 hiradate HI-CACAO CHOCOLATE STAND （ ハイ カカオ チョコレートスタンド ）代官山 0.457 mys 29.0 xright PL Fortnite Battle Royale DUO Komp i PS4 0.452 mys 58.7 alireza-tili crypto price 0.448 mys 348.4 dreamfirefly Love Band-aid (Shortmovie about love and Karma) 2018 0.418 mys 29.0 gpcx86  LIVE  FORTNITE  Luźne Gierki  PL\\En 0.400 mys 28.9 jogin Pokexgames vs PokeOne, w jakie poki grać o to jest pytanie? 0.380 reazuliqbal 28.8 adam-saudagar DriveSoftwarePublisher Software Publisher using Google Drive Developement update #2 0.379 mys 82.7 erstwhilen erstwhilen 0.366 reazuliqbal 22.7 sintoniz Analysis of the Resteem feature 0.364 mys 82.7 sonrhey Traffic really really sucks! Top 10 AuthorsThis table shows the post authors which received the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author 0.461 3 customuser 0.454 3 adam-saudagar 0.450 25 hallmann 0.419 18 psychepl 0.399 3 matthias-green 0.397 18 barbarossastudio 0.377 25 zwora 0.374 16 veggie-sloth 0.311 3 darties 0.309 12 postcardsfromlbn Top 3 curationThis shows the top 3 curation posts of each participating account.The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. The accounts are sorted by league entry date. Only posts are shown. holger80 reward delay [min] author title 0.197 18.3 gregory.latinier How to achieve the highest score for a better Utopian reward for development contributions 0.116 176.0 ragepeanut @Checky 0.1.0 - Suggestions, Delayed Comments and More ! 0.110 28.5 jga The user guide for a newbie on how to build a private Steem blockchain for corporate projects abh12345 reward delay [min] author title 0.134 23.4 glenalbrethsen I Wear Many Hats 0.116 15.9 actifit Actifit Month One: Stats, App v0.3, Charity Support, ~50k SP and more 0.113 25.1 enjar RIP: TI-89 Titanium Calculator mys reward delay [min] author title 0.550 28.9 xright [PL/ENG] Wbijaj! Fortnite Nowe wyzwania tygodniowe!!! 0.457 29.0 xright [PL] Fortnite Battle Royale DUO Komp i PS4 0.452 58.7 alireza-tili crypto price dexterdev reward delay [min] author title 0.069 84.9 scienceblocks Why are we not spherical - Breaking the symmetry of embryo with Alan Turing. 0.062 1372.0 scienceblocks Type 2 Diabetes - from the eyes of immune cells. 0.027 364.6 crokkon Can’t remember which email/phone you signed up with Steemit? Look it up with Beem! isnochys reward delay [min] author title 0.071 18.6 ackza Inspirational Ackza is here to inspire you to become more rational and produce intelectual content using cryptographic distributed Databases. Steem is a Human Skinner Box for Operant and Classical Pavlovian conditioning. 0.070 47.0 chuuuckie SteemHunt “Virtual Reality Games” on 7-26-18 0.070 190.4 colovhis Mi experiencia en los videojuegos en línea #1 : MU crypto-econom1st reward delay [min] author title 0.207 23.5 minimining Win SBI - upvotes forever 0.162 19.1 matthias-green On Trump’s Property Tax, Jimmy Sez… 0.126 27.9 matthias-green Womp, Wooooomp! He Did it Again…Tax Cut Follies reazuliqbal reward delay [min] author title 0.380 28.8 adam-saudagar DriveSoftwarePublisher Software Publisher using Google Drive Developement update #2 0.366 22.7 sintoniz Analysis of the Resteem feature 0.235 27.6 genrbe [koajs Tutorial #1] First static app with basic authentication, free hosting, free domain, advertising-free jlordc reward delay [min] author title 0.212 25.8 tegoshei My Grandma and Family Are Knocking at The Door Of Your Hearts &lt;3 0.204 29.9 ascheriit Is Fate/ Grand Order the best anime game on mobile? 0.100 30.1 adelair Lee Joon Gi Digital Painting (video process) hispeedimagins reward delay [min] author title 0.057 20.8 diebitch Food returns your love 0.051 99.1 incubot This week’s @PlayDice recipients of @SteemBasicIncome shares 0.028 56.8 vishalsingh4997 My Actifit Report Card: July 24 2018 yasu24 reward delay [min] author title 0.514 23.5 hiradate HI-CACAO CHOCOLATE STAND （ ハイ カカオ チョコレートスタンド ）代官山 0.336 73.5 teensonsteem WELCOME TO TOS! INTRODUCTION POST 0.138 25.7 djynn My entry for @steemit-jp contest #7 / コンテスト#7 私の好きな家電製品 - もみたいむ doughtaker reward delay [min] author title 0.231 30.1 emtecks We can be heroes just for one day, even for more than that, possibly… 0.127 1059.8 brindeds JarvisHub - A bot to find similar issues. 0.105 423.6 jtomes123 FirebaseWebTemplate: Easily create a personal website using firebase grzyb77 reward delay [min] author title 0.182 26.2 wrestlingworld Jak zrobić sobie pseudo Smart TV samemu. 0.141 26.4 franino Wyprawa Napoleona na Moskwę 1812 - “Za kilka tygodni Rosja będzie błagać o pokój” 0.133 26.2 veggie-sloth Leniwiec i kiełbasa quorn, czyli tradycyjne angielskie śniadanie jacekw reward delay [min] author title 0.139 22.2 foodini  ABC by Foodini! Poznaj 7 prostych trików na jajka! 0.112 25.1 matima Ekranizacja “Harry Potter i Kamień Filozoficzny”/ Co sądzę? 0.103 29.2 matima Ekranizacja “Harry Potter i Komnata Tajemnic”/ Co sądzę? emrebeyler reward delay [min] author title 0.339 30.4 guyfawkes4-20 How I became a world-class spammer in under an hour 0.333 30.3 crypto3d [Making of] Horizon: Zero Dawn - Recreating Aloy in Augmented Reality! Speedrun. 0.192 10.3 datilla AY BEN GÜLERİM diosbot reward delay [min] author title 0.145 26.9 flocki Sterowanie oświetleniem przez sieć LAN #2 0.113 27.3 flocki Sterowanie oświetleniem przez sieć LAN #1 0.113 26.9 mespanta Zrób to sama - naprawa spłuczki arabson1990 reward delay [min] author title 0.238 29.8 customuser Niezwykłe zdjęcia Neptuna wykonane z Ziemi 0.156 26.7 customuser Ekscytujący kosmos w drugiej połowie 2018 roku 0.145 26.6 darties #FreeTommy - Akcja w obronie Tommiego Robinsona! Włącz się! Udostępnij! lelon reward delay [min] author title 0.129 28.9 tomii Moje miejsce w architekturze i sztuce. Zgłoszenie do konkursu. 0.129 232.4 yogjoshi Night Hut - Photoshop Painting 0.129 69.5 aci7 Quick watercolour landscape annaburska reward delay [min] author title 0.066 96.2 veggie-sloth Leniwiec i kiełbasa quorn, czyli tradycyjne angielskie śniadanie 0.066 30.4 jozef230 ULOG 6: Cudowny dzień 0.060 125.5 flocki Sterowanie oświetleniem przez sieć LAN #2 cryptoyzzy reward delay [min] author title 0.072 76.8 kalypso56 Un petit fugitif 0.048 28.1 cryptoyzzy curart38 0.048 61.7 french-tech [STEEM] Comparatif Steemit, Busy, eSteem et Steempeak isarmoewe reward delay [min] author title 0.044 8.1 altobee steem.cache Schlageter-Denkmal 0.039 235.4 fehmarn Kite und Schafe / Kite and sheep 0.033 85.0 joel0101 Selfie moment blanchy reward delay [min] author title 0.133 1303.4 petesays Treasure in family 0.082 108.8 cryptoandcoffee THE LAST POST BUT A HAPPY ONE 0.061 110.9 cryptoandcoffee YOU ARE THE ONLY TOOL REQUIRED TO MAKE IT ON STEEMIT ajayyy reward delay [min] author title 0.095 56.6 gregory.latinier How to achieve the highest score for a better Utopian reward for development contributions 0.075 1151.7 ggabogarcia New logo for UNIVERSALE 0.025 25.6 utopian-io Utopian.io Weekly - [July 27th 2018] - Partnering Up with Fundition, Celebrating a Record in Number of Followers and more yailinbel reward delay [min] author title 0.179 209.4 gabrielb La mordida de un perro (Anécdotas de mi vida). 0.097 17.6 goya Posts votados por el equipo @goya: 21.07.2018, 23:32 / 22.07.2018, 23:32 0.090 32.1 simon.bolivar Posts votados por el equipo @simon.bolivar: 24.07.2018, 23:31 / 25.07.2018, 23:31 If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 4’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-4/"},{"title":"Witness node updated to 0.19.6 for my witness server","text":"Updating to 0.19.6/0.19.11 is strongly encourage for all witnesses. Bug Fixes for 0.19.6There was a bug in how witness nodes were heuristically calculating the block size when generating a block that could lead a node to produce a block that was too large. (#2632) Authority membership size was not being enforced and is now checked. After disabling my witness and stopping steemd, I updated the steem repository to 0.19.6. Compilation and installation works without problems. The compilation and installation of 0.19.6 was smooth. After doing systemctl start steemd.service, steemd runs 0.19.6. In around ten hours, I will sign my next block. My witness server version will then be correctly be shown as 0.19.6. I will switch to 0.19.11 in the near future. This page is synchronized from the post: ‘Witness node updated to 0.19.6 for my witness server’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-node-updated-to-0-19-6-for-my-witness-server/"},{"title":"holger80`s Curation League - week 5","text":"source You can read more about the start of my new Curation League.25 accounts wanted to participate, thanks and welcome to my Curation League. There are two new participants from last week. Thank you all for participating! The curation of the last seven days starting with 12.08.2018 7:00:00 UTC are included in this analysis.Sorry for the delay (I had not access to my laptop on sunday). To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 5Gratulations to mys for winning this round! 9.32 is a really great score! amosbastian for the second place! arabson1990 for the third place! All three did a great job in selecting undervalued posts for curation. Good start, amosbastian! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2656.7 5524 2.00 9.32 9.32 2. amosbastian 1499.7 6870 34.12 3.89 3.89 3. arabson1990 200.8 6900 100.00 3.81 3.81 4. reazuliqbal 801.0 6615 100.00 2.78 2.78 5. jacekw 506.6 7795 50.00 2.24 2.01 6. grzyb77 221.9 5346 55.00 1.93 1.93 7. diosbot 2403.7 8321 41.00 2.21 1.86 8. holger80 9212.7 6675 25.00 1.70 1.70 9. crypto-econom1st 72.1 2600 100.00 1.64 1.64 10. yasu24 767.8 5999 25.00 1.62 1.62 11. doughtaker 736.2 8856 66.00 1.80 1.42 12. abh12345 15697.9 7217 5.00 1.19 1.15 13. jlordc 1320.3 6571 50.00 1.03 1.03 14. annaburska 1216.1 9235 100.00 1.29 0.97 15. hispeedimagins 177.7 5495 100.00 0.78 0.78 16. emrebeyler 5619.3 7855 15.00 0.85 0.76 17. yailinbel 24.2 1200 100.00 0.67 0.67 18. lelon 62.2 2400 100.00 0.65 0.65 19. dexterdev 196.0 3345 70.00 0.64 0.64 20. isarmoewe 735.8 5900 25.00 0.62 0.62 21. isnochys 1164.8 3510 10.00 0.58 0.58 22. blanchy 546.4 5088 100.00 0.54 0.54 23. ajayyy 153.7 800 100.00 0.37 0.37 24. cryptoyzzy 58.5 950 100.00 0.26 0.26 25. mariusclaassen 15.0 200 100.00 0.13 0.13 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. This section is dominated this week by mys nice work! Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.545 mys 29.0 xright PL/ENG Fortnite Battle Royale Poduczyłem się budowania to i skill wzrósł 0.451 mys 29.0 xright PL/ENG Fortnite Battle Royale 4 tydzien wyzwan!!! 0.448 mys 276.0 te02035 소고기는 사줘도 먹지말고 돼지고기는 사주면 먹고, 양고기는 사서라도 먹자 0.404 mys 5191.1 sonrhey ULOG: Entry #4, Sunday Bondate with fam  0.357 mys 276.0 gpcx86  LIVE  PALADINS  Luźne Gierki  DUO TS⚡ 0.357 reazuliqbal 31.4 happyksu My Logo Contribution for Japanese Phrasebook 0.357 mys 276.0 ankarlie ULOG: Let’s Do Airdrops and Bounties Together 0.355 mys 42.5 heartwalk Nigerians think human and save lives 0.348 mys 42.5 lpninja Comments on Ideology, Intelligence, and Capital with Nick Land 0.331 emrebeyler 30.2 fingersik Decentralization to the Rescue: Decenternet – Decenternet Vs. Internet (pt. 5 of 5) 0.306 ajayyy 578.0 iauns Metal GPU Programming 02 - Shading a Triangle Top 10 AuthorsThis table shows the post authors which received the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author 0.521 4 iauns 0.503 8 yasu 0.483 21 veggie-sloth 0.448 1 te02035 0.447 19 bowess 0.383 14 burnpost 0.345 8 steempytutorials 0.345 12 strefanetu 0.336 2 happyksu 0.331 8 august84 Top 3 curationThis shows the top 3 curation posts of each participating account.The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. The accounts are sorted by league entry date. Only posts are shown. holger80 reward delay [min] author title 0.150 51.0 ajayyy Watching Your Roller Coasters Voster Coaster VR Roller Coaster Builder Tycoon Game 0.112 25.2 scrooger The new Bot on the block @bid.bot Promising a positive ROI 0.106 188.1 mightypanda [Steem Curator] - Sorting feature and Utopian posts abh12345 reward delay [min] author title 0.197 17.8 holoz0r It’s not my blockchain birthday yet… 0.087 19.1 nomadicsoul Your Favorite Games On The Blockchain? +20 SBD Giveaway 0.072 17.4 goldendawne The Cultivated Apothecary: Week 3 Edition 1- Double-Tinctured Feverfew &amp; Bottling Up Lacto-Fermented Raspberry Soda mys reward delay [min] author title 0.545 29.0 xright [PL/ENG] Fortnite Battle Royale Poduczyłem się budowania to i skill wzrósł 0.451 29.0 xright [PL/ENG] Fortnite Battle Royale 4 tydzien wyzwan!!! 0.448 276.0 te02035 소고기는 사줘도 먹지말고 돼지고기는 사주면 먹고, 양고기는 사서라도 먹자 dexterdev reward delay [min] author title 0.127 46.0 dhimmel Automatic compression when saving files in Pandas! How changing a default parameter ballooned into a monster PR. 0.073 26.6 scienceangel Peto’s Paradox, or Why Elephants Do Not Get Cancer? 0.066 162.9 dhimmel Double life plus forty for creating a voluntaryist website. Sign the Free Ross clemency petition! isnochys reward delay [min] author title 0.043 28.9 flugschwein Steemnova - error in deut consumption calculation 0.043 28.2 trdaily STEEM ve SBD - Günlük rapor (2018-07-29) 0.039 735.6 rainite Path of Exile Act 2: The Clumsy Shadow Continues His Adventure crypto-econom1st reward delay [min] author title 0.196 1151.5 totyahmed731993 Top gainers in the last twenty four hours 0.152 7.8 steemspoker Poker on a Hot Day - Deep run in the “Big” $7,50 0.127 135.2 matthias-green Trump Threatens Drastic Measures to Force Wall Construction reazuliqbal reward delay [min] author title 0.357 31.4 happyksu My Logo Contribution for Japanese Phrasebook 0.162 45.1 mightypanda [Steem Curator] - Sorting feature and Utopian posts 0.158 50.4 mightypanda Tutorial: Building enterprise applications with Angular 6, NgRx and RxJs - Lesson 3 jlordc reward delay [min] author title 0.156 29.2 legendchew STEEM Food Tours #23: Wonderland Village Restaurant - PG, MY 0.099 30.1 adelair 3d Animated Game Trailer: Rivalry Rush 0.077 86.4 dammie Happy Sunday hispeedimagins reward delay [min] author title 0.090 317.1 hispeedimagins Steemer Update - Features and bug fixes 0.073 731.6 ggcarlosr State of the Sndbox Competition Entry - Competition #12 0.051 141.2 dreemsteem Such is life - Ulog 22 yasu24 reward delay [min] author title 0.300 23.2 crypto.hack 夏といえばお蕎麦”新宿高島屋の小松庵総本家” 0.260 25.6 katakoto 【Steemit News】Applications Team Update: Steemitにまもなく通知機能が追加！ 0.222 23.4 hiradate 新世界菜館 （シンセカイサイカン） 神保町の中華料理 doughtaker reward delay [min] author title 0.151 701.2 iauns Metal GPU Programming 02 - Shading a Triangle 0.133 259.4 brindeds JarvisHub 0.2.0 - Queue system, Refacting routes structure, etc. 0.130 30.2 kit.andres Copropiedad Integral - Leaseholders data update grzyb77 reward delay [min] author title 0.180 70.5 remind-me My Actifit Report Card: July 31 2018 0.180 53.4 bizarreart My Actifit Report Card: July 31 2018 0.180 47.9 honeybeeee My Actifit Report Card: July 31 2018 jacekw reward delay [min] author title 0.173 22.6 nieidealna.mama Zawód: PROFILER. Znajomość ofiary prowadzi do mordercy 0.144 26.3 matima Ekranizacja “Harry Potter i Zakon Feniksa”/ Co sądzę? 0.138 241.8 kevlar.dogs #pl-blog / odpowiedzi konkursowe. Zabawa u @rozku emrebeyler reward delay [min] author title 0.331 30.2 fingersik Decentralization to the Rescue: Decenternet – Decenternet Vs. Internet (pt. 5 of 5) 0.180 30.2 aaronli Traditional Chinese translation of WarriorJS - 989 words completed (4) 0.179 30.3 eurogee Understanding the working mechanisms of bullets and missiles diosbot reward delay [min] author title 0.093 26.4 barreloflaughs Czy warto obejrzeć pierwszą serię Naruto? 0.087 26.3 postcardsfromlbn Parszywa 17, czyli zawiłe odpowiedzi na proste pytania. 0.080 27.9 krasnalek WSPÓŁCZESNA POLSZCZYZNA W TELEWIZJI arabson1990 reward delay [min] author title 0.167 19.2 mespanta Annapurna Circuit Trek cz15 0.134 26.7 conven Krótka historia polskiego jedzenia 0.124 26.8 karolczyk1987 FotoJadło #13 Spaghetti z pepperoni i oliwkami ️️️ lelon reward delay [min] author title 0.079 72.2 rizada  Drawing ✏ “Vampire Girl”  by @rizada 0.048 30.0 romualdd Gdzieniegdzie widać ich, jak pływają po bezkresnej głębinie… 0.048 42.4 bowess Czytam sobie #11. Donoszę z biblioteki. Lipiec annaburska reward delay [min] author title 0.076 33.4 mykitchenlab DŻEM TRUSKAWKOWY Z NUTKĄ RUMU! Konkurs “Owoce Sezonowe” 0.052 36.6 zdrowie  PRZEPIS na: Najbardziej Oryginalną (i Najzdrowszą) PIZZĘ  0.049 30.6 strefanetu Wizjer… #2 cryptoyzzy reward delay [min] author title 0.070 18.6 sebbbl Prendre soin des nouveaux arrivants 0.047 27.9 planetenamek Avis aux Steemians Fr ! Bénéficiez du trail @bloguable ! 0.035 28.1 thekitchenfairy Making Asian Shaved Ice Dessert // Mau Es Teler? isarmoewe reward delay [min] author title 0.071 114.0 feuerelfe sugar mit ihren 3 entenkindern – mama ist mama – 0.070 18.1 robertgelbmann Tagebuch des kleinen Wirt - 5 Tage Toskana 0.054 52.5 resqonline Rezepte mit Sauerampfer blanchy reward delay [min] author title 0.071 3.2 joeparys 4 DAYS IN SAN FRANCISCO TRAVEL VLOG #024 0.064 1.9 ibringawareness [Edit Added] Starbucks Preparing to Accept Crypto, as NYSE/ICE Forms New Exchange Integrating Microsoft Cloud 0.037 16.3 wallpaperflower A Fluid Motion ajayyy reward delay [min] author title 0.306 578.0 iauns Metal GPU Programming 02 - Shading a Triangle 0.008 531.7 wehmoen VIP.D.Tube - An Onboarding Platform for DTube 0.007 1615.8 irakrakow How to Fix Git and GitHub Mistakes and Bad Commits yailinbel reward delay [min] author title 0.133 4.7 quevedo Posts votados por el equipo @quevedo: 28.07.2018, 23:30 / 29.07.2018, 23:30 0.088 43.5 tashidelek [ES] ¡Vamos a Francia! Puerto de Larros - Gujan-Mestras. Parte II 0.077 28.1 tashidelek [ES] Practicando con mi nuevo juguete mariusclaassen reward delay [min] author title 0.067 196.2 ehizzy Let Him That Have Ears Hear 0.067 45.0 cryptonewslife Paysage-0184 amosbastian reward delay [min] author title 0.192 4224.8 harry-heightz Creation of privacy policy document for AB-Music-Player. 0.180 2399.6 microoo Run Substratum Node on a $5 Raspberry Pi Zero and Enjoy Breakfast at Milliways 0.159 501.9 ceruleanblue Quantum Information Science Kit - Qiskit: Programming A Quantum Emoticon! If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 5’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-5/"},{"title":"How to install and use beempy using anaconda","text":"beempy is a python based command line tool for doing stuff on the steem blockchain. It is based on my python library beem and provides several useful commands:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273Commands: addkey Add key to wallet When no [OPTION] is given,... addtoken Add key to wallet When no [OPTION] is given,... allow Allow an account/key to interact with your... approvewitness Approve a witnesses balance Shows balance broadcast broadcast a signed transaction buy Buy STEEM or SBD from the internal market... cancel Cancel order in the internal market changewalletpassphrase Change wallet password claimreward Claim reward balances By default, this will... config Shows local configuration convert Convert STEEMDollars to Steem (takes a week... createwallet Create new wallet with a new password curation Lists curation rewards of all votes for... currentnode Sets the currently working node at the first... delkey Delete key from the wallet PUB is the public... delprofile Delete a variable in an account&apos;s profile deltoken Delete name from the wallet name is the... disallow Remove allowance an account/key to interact... disapprovewitness Disapprove a witnesses downvote Downvote a post/comment POST is... featureflags Get the account&apos;s feature flags. follow Follow another account follower Get information about followers following Get information about following importaccount Import an account using a passphrase info Show basic blockchain info General... interest Get information about interest payment keygen Creates a new random brain key and prints its... listaccounts Show stored accounts listkeys Show stored keys listtoken Show stored token mute Mute another account muter Get information about muter muting Get information about muting newaccount Create a new account nextnode Uses the next node in list openorders Show open orders orderbook Obtain orderbook of the internal market parsewif Parse a WIF private key without importing pending Lists pending rewards permissions Show permissions of an account pingnode Returns the answer time in milliseconds power Shows vote power and bandwidth powerdown Power down (start withdrawing VESTS from... powerdownroute Setup a powerdown route powerup Power up (vest STEEM as STEEM POWER) pricehistory Show price history resteem Resteem an existing post rewards Lists received rewards sell Sell STEEM or SBD from the internal market... set Set default_account, default_vote_weight or... setprofile Set a variable in an account&apos;s profile sign Sign a provided transaction with available... ticker Show ticker tradehistory Show price history transfer Transfer SBD/STEEM unfollow Unfollow/Unmute another account updatememokey Update an account&apos;s memo key updatenodes Update the nodelist from @fullnodeupdate upvote Upvote a post/comment POST is... userdata Get the account&apos;s email address and phone... verify Returns the public signing keys for a block votes List outgoing/incoming account votes walletinfo Show info about wallet witness List witness information witnesscreate Create a witness witnessdisable Disable a witness witnessenable Enable a witness witnesses List witnesses witnessfeed Publish price feed for a witness witnessupdate Change witness properties The python anaconda distribution is an easy and fast solution to gain fast access to beempy on a computer without dealing with system packages. 1. Download the anaconda GUI installerDownload the anaconda for python 3.6 for your operating system: anaconda download. 2. Run the installer and follow the stepsThe installer looks similar for other operation systems. 3. Start the Anaconda Prompt and add the conda-forge channelStart the Anaconda Prompt ( You find it under Anaconda3 (64-bit))Add the conda-forge channel by entering the following into the prompt:1conda config --add channels conda-forge 4. Install beem inside the Anaconda Prompt1conda install beem 5. Using beempyAll available commands can be printed by1beempy --help The help for an individual command can be printed by:1beempy claimreward --help 6. Tips and tricksUpdate the node list:1beempy updatenodes --show Set your account as default account:1beempy set default_account holger80 Check your settings by:1beempy config Create a new wallet for storing posting, active or memo keys:1beempy createwallet --wipe enter a password twiceand add your posting key and/or your active key:1beempy addkey Enter the wallet password to unlock and paste your key You can now use beempy to broadcast! For example, we will use beempy to claim all rewards:1beempy claimreward 7. Read the manualYou can find a complete command listing here: https://beem.readthedocs.io/en/latest/cli.html This page is synchronized from the post: ‘How to install and use beempy using anaconda’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-install-and-use-beempy-using-anaconda/"},{"title":"How to write a post with image using beem","text":"This tutorial is about writing a post with beem. You learned in my last post how to install beem. Let’s use it now. Storing the posting key inside the beem walletAt first we need to store the posting key (safely encrypted in a sqlite wallet):At first we need a wallet (This step is only necessary once):1beempy createwallet --wipe Now we can check, if the wallet was sucessfully created:1beempy walletinfo For publishing a post, we need to store the posting key:1beempy addkey We can check if this has worked by:1beempy listaccounts I will use beembot for testing, so I added the posting key of beembot: As we do not wan’t to write down our wallet password, we will temporarily store it as environment variable for windows:1set UNLOCK=yourpassword and for linux:1export UNLOCK=&apos;yourpassword&apos; We can check if this had worked by:1beempy walletinfo --test-unlock A similar table should be displayed now (after setting UNLOCK inside the terminal) without entering a password: Writing a python script with all information:At first, I used ImageUploader for uploading a png image to steemit:1img_link = image_uploader.upload(image_path, author, image_name=&quot;beem-logo.png&quot;) image_path contains an image filename, author is a account (its posting key needs to be stored).The function returns a dict, img_link[&quot;url&quot;] contains the url, which can be used inside the post for displaying the uploaded image. Then I created all necessary variables and entered them into the post function of steem: author: post author (steem account name) title: post title (the permlink is automatically created from this) parse_body: Is set to True, which will means that all image, url and mentions are correctly handled. self_vote: I disabled self-vote here. tags: list with tags, There is no limit and more than 5 tags can be set. The following script was used to create an example post: 12345678910111213141516171819202122#!/usr/bin/pythonfrom beem.imageuploader import ImageUploaderfrom beem import Steemif __name__ == &quot;__main__&quot;: stm = Steem() author = &quot;beembot&quot; image_path = &quot;beem-logo.png&quot; image_uploader = ImageUploader(steem_instance=stm) img_link = image_uploader.upload(image_path, author, image_name=&quot;beem-logo.png&quot;) title = &quot;Example for writing a post with beem&quot; body = &quot;This is an example for a post, created with beem by @beembot.&quot;\\ &quot;We will also upload an image:&quot;\\ &quot;%s&quot; % img_link[&quot;url&quot;] parse_body = True self_vote = False tags = [&quot;python&quot;, &quot;test&quot;, &quot;this&quot;, &quot;is&quot;, &quot;just&quot;, &quot;a&quot;, &quot;post&quot;] stm.post(title, body, author=author, tags=tags, parse_body=parse_body, self_vote=self_vote) Save your python script now as file (I choose write_post_with_image.py) and run it with python:1python write_post_with_image.py Remember to set the UNLOCK variable at first. Otherwise you will get a beem.exceptions.WalletLocked exception. How to install and use beempy using anaconda This page is synchronized from the post: ‘How to write a post with image using beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-write-a-post-with-image-using-beem/"},{"title":"Access steemit conveyor for reading account information with beempy","text":"conveyor is a steemit API for reading: Feature flags User data (email, phone, etc) When an account is registered through steemit inc., email and phone data are stored and can be read (only with the account or admin credentials) by conveyor. beempy supports the get_user_data API call: You can read how to install beempy here. For accessing the data, we need to store the posting key in beempy.If1beempy listaccounts does not show a table with the user account and its posting key, please add the key as described in my last post. get_user_data1beempy userdata beembot Replace beembot with your account name.beembot was not created by steemit inc., thus we see no data here. Let’s repeat this with my account. I added my posting key with beempy addkey and checked it with beempy listaccounts: Now I can check my user data by 1beempy userdata holger80 get_feature_flagsYou probably read about Yotifications. When the new Yotifications is rolled out, it will be done using this new feature flag system. I’m checking now my feature_flags, maybe my account is already selected for Yotifications ?1beempy featureflags holger80 No flag yet…. I will recheck later. How to install and use beempy using anaconda How to write a post with image using beem This page is synchronized from the post: ‘Access steemit conveyor for reading account information with beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/access-steemit-conveyor-for-reading-account-information-with-beempy/"},{"title":"holger80`s Curation League - week 6","text":"source You can read more about the start of my new Curation League.26 accounts wanted to participate, thanks and welcome to my Curation League. There are one new participants from last week. Thank you all for participating! The curation of the last seven days ending by 16.08.2018 7:00:00 UTC are included in this analysis. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 6Gratulations to mys for winning this round! 7.10 is a really great score! reazuliqbal for the second place! crypto-econom1st for the third place! All three did a great job in selecting undervalued posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2828.7 5564 2.00 7.10 7.10 2. reazuliqbal 655.1 7300 80.00 5.83 5.59 3. crypto-econom1st 331.7 6769 100.00 4.96 4.96 4. arabson1990 185.6 7000 100.00 3.95 3.95 5. amosbastian 1560.8 6317 35.96 3.24 3.24 6. jacekw 549.0 8335 25.00 3.45 2.90 7. grzyb77 224.0 5580 50.00 2.02 2.02 8. yasu24 2057.6 6559 15.00 1.96 1.96 9. diosbot 2407.1 8340 42.00 2.19 1.84 10. holger80 9239.2 6947 25.00 1.70 1.70 11. sourovafrin 958.2 6374 100.00 1.33 1.33 12. abh12345 15808.0 6920 5.00 1.29 1.29 13. doughtaker 759.7 8821 66.00 1.63 1.29 14. lelon 136.3 2800 100.00 0.87 0.87 15. isnochys 1198.0 4886 10.00 0.84 0.84 16. annaburska 1226.6 5829 48.00 0.84 0.84 17. emrebeyler 5900.6 8181 100.00 0.94 0.80 18. blanchy 547.2 5735 100.00 0.70 0.70 19. yailinbel 28.1 1200 100.00 0.54 0.54 20. jlordc 1330.6 3190 50.00 0.52 0.52 21. cryptoyzzy 65.6 2250 100.00 0.44 0.44 22. isarmoewe 750.9 3000 25.00 0.40 0.40 23. dexterdev 196.6 2595 100.00 0.37 0.37 24. hispeedimagins 177.8 1750 100.00 0.17 0.17 25. mariusclaassen 15.1 100 100.00 0.07 0.07 26. ajayyy 144.8 300 100.00 0.04 0.04 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. This section is dominated this week by mys and yasu24 nice work! Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.607 yasu24 25.3 tonpa 辛さで暑さを吹っ飛ばすラーメン！ 0.491 yasu24 22.9 hiradate いきなりステーキ數ワイルドステーキで夏バテ知らず 0.452 yasu24 25.9 tonpa コンテスト#9僕の好きな文房具は・・・ 0.425 reazuliqbal 309.9 chrstnv Contribution For Actifit Graphics Task. Enhance Logo &amp; Actifit Report Card 0.395 mys 28.9 xright Fortnite Battle Royale Duo!! Live ON wbijac!!! 0.389 mys 28.9 kapitanrejven Exploration for new technology 0.385 mys 6615.9 sonrhey ULOG: ENTRY #7 - When you, and your Officemates having the same mental disabilities, wow disaster! 0.378 yasu24 25.3 tonpa 『おすすめランチ』納豆食べ放題のお店！ 0.378 mys 2342.5 tranquoccuong my choice - tocotoco Thai Nguyen 0.372 mys 28.9 josegaldame Nano relatos 0.356 yasu24 24.8 crypto.hack 並んででも食べたくなるスープカレー Top 25 AuthorsThis table shows the post authors which leaded to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 0.630 8 robertbira 0.465 4 aree-vanier 0.460 12 mkt 0.446 4 mdsamad 0.427 19 shogunma 0.387 21 lesiopm 0.385 1 sonrhey 0.372 13 burnpost 0.372 3 m00m 0.369 6 hiradate 0.368 9 swapsteem 0.366 13 bowess 0.363 17 grzyb77 0.335 6 zuur 0.312 1 sisaket 0.311 3 aneilpatel 0.300 5 ismailkah 0.297 1 chrstnv 0.286 4 teneresa 0.283 6 flmh49 0.276 1 thevn.darkstar 0.276 3 ety001 0.273 19 zwora 0.273 4 hitenkmr 0.270 5 ilona3 Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. mys reward delay [min] author title 0.395 28.9 xright Fortnite Battle Royale Duo!! Live ON wbijac!!! 0.389 28.9 kapitanrejven Exploration for new technology 0.385 6615.9 sonrhey ULOG: ENTRY #7 - When you, and your Officemates having the same mental disabilities, wow disaster! reazuliqbal reward delay [min] author title 0.425 309.9 chrstnv Contribution For Actifit Graphics Task. Enhance Logo &amp; Actifit Report Card 0.241 23.9 teneresa My logo contribution for Coloring kids app 0.222 11.4 juecoree Is steem power delegation still coming to @steemph.cebu? crypto-econom1st reward delay [min] author title 0.253 54.1 aneilpatel [Development SwapSteem] - Swapsteem API Development Update 0.252 32.4 tykee Improvement with the inclusion of React to noncontacts and Silent on Position on Polite 0.214 50.6 wolfofnostreet Tried and Trusted: COM25 arabson1990 reward delay [min] author title 0.225 26.8 themarhio “Rzeka świadomości” – Ostatnia książka autora “Mężczyzny, który pomylił swoją żonę z kapeluszem”. 0.139 14.6 mespanta Annapurna Circuit Trek cz16 - Pokhara 0.118 19.7 minprawdy Reakcja reakcji nr 4 (posty wsparte przez Perpetuum Mobile) amosbastian reward delay [min] author title 0.180 1332.8 aree-vanier KSP Profile Manager updates 0.153 84.8 muhammadarif suggestions for adding features of distance, times and steps goals 0.147 778.9 curtwriter The Actifit Series - Actifit Development Update V.0.3.1 And other Updates [Episode 3] jacekw reward delay [min] author title 0.188 18.2 photographxx Historia Gorsetu, Czyli Modnego Narzędzia Tortur 0.171 25.3 mespanta Nobody needs 25 / Nikt nie potrzebuje 25 / Nikdo nepotřebuje 25 0.141 20.1 photographxx Historia Komory Gazowej grzyb77 reward delay [min] author title 0.160 24.1 konradz16 Nocny Kochanek - Poniedziałek (Guitar Cover by Kondzik) 0.115 24.2 konradz16 Sabaton - The Last Stand RECENZJA#4 0.114 26.2 bartheek [# 6] Filmy, które mną wstrząsnęły : Noc żywych trupów (1968) - reż. George A. Romero yasu24 reward delay [min] author title 0.607 25.3 tonpa 辛さで暑さを吹っ飛ばすラーメン！ 0.491 22.9 hiradate いきなりステーキ數ワイルドステーキで夏バテ知らず 0.452 25.9 tonpa コンテスト#9僕の好きな文房具は・・・ diosbot reward delay [min] author title 0.083 25.9 ytedimeq Co jadł twój prapraprapraprapraprapraprapraprapraprapradziadek? (jak żyli nasi przodkowie około 1500 r.?). 0.078 26.8 flocki Smartfon Motorola Moto G3, wymiana złącza karty SIM 0.076 26.2 ytedimeq Żołnierz Wehrmachtu 1939 (Ekwipunek) holger80 reward delay [min] author title 0.105 143.1 lokomotion Analysis of the Steem Power Up/Down Flow 0.094 49.2 chbartist Right Before The Dawn - Elevate Your Thinking And Mindset 0.092 84.2 stmdev Beem: Account.get_tags_used_by_author failed on appbase sourovafrin reward delay [min] author title 0.165 35.4 ozraahamad Rain, Rain Don’t Go Away! 0.147 28.9 sourovafrin [Actifit Fitness Tracker] [0.3.1] Should not allow special character on tags 0.119 32.4 mamun123456 Save travel on malaysia taxi [dtube vlog post #28] abh12345 reward delay [min] author title 0.107 22.3 maverickinvictus Cooking Anime shows I grew up with 0.102 150.7 annalorin28 Create Handcrafts Out Of “Quotes By @surpassinggoogle” -Quote #1 first entry 0.099 20.1 goldendawne Tribesteemup Bi-Weekly Question: What Does It Mean To Be Human? doughtaker reward delay [min] author title 0.146 63.2 hitenkmr Actifit App iOS Version 0.130 70.7 aree-vanier KSP Profile Manager updates 0.090 266.6 ety001 DogePay – A payment gateway like Alipay or Paypal lelon reward delay [min] author title 0.110 200.1 flmh49 Ameryka Trumpa - czyli obecny stan gospodarki USA. 0.063 37.0 tommytwohats Robin Williams portrait 0.063 29.7 steem-hikers-pl Reykjadalur, czyli dolina gorącej rzeki isnochys reward delay [min] author title 0.167 786.8 yasayanoluler SBD Sen Nerdesin ? 0.127 487.0 rainite My Dream Game Bring Back the Sun Piece by Piece 0.079 30.2 ellis.marell Underground Ballerina U5 annaburska reward delay [min] author title 0.082 435.6 jacekw.dev Machine learning and Steem #3: Account classification - accuracy improvement up to 95% 0.080 396.2 karolczyk1987 FotoJadło #14 Krewetkowa Przekąska/ Shrimp Snack  0.053 57.9 cezarys “Dla Amerykanów świat jest blokiem marmuru, który mogą dowolnie kształtować” - mówi dr Tadeusz Matuszkiewicz, doktor nauk ekonomicznych, nauczyciel akademicki, sekretarz Klubu Inteligencji Katolickiej w Mielcu emrebeyler reward delay [min] author title 0.118 31.5 electrobro [ TEAM TFGC ] LoL Starting Game Night DLive.io 0.085 422.5 goktug0814 Göreme’yi Görme 0.068 207.9 hurcell Old Car in Arachova Village, Greece blanchy reward delay [min] author title 0.068 13.4 cryptoandcoffee THERE ARE TWO KINDS OF USERS. GIVERS AND TAKERS. 0.058 504.8 petesays Where do you find them 0.053 101.8 conformity  Alive in Joburg - Neill Blomkamp (District 9) yailinbel reward delay [min] author title 0.071 203.9 pavelnunez Mi análisis preliminar del #Reto12Votos semana 1 0.070 115.7 charitybot Delegate to @bid.bot or buy votes through it and win HUGEEE steem and SBI prizes! Week 1 Thread 8-9-2018 0.068 12.2 coliraver Sobre el Petro y la reconversión monetaria jlordc reward delay [min] author title 0.155 29.2 legendchew STEEM Food Tours #24: Kopitan Classic - PG, MY 0.052 254.2 iamjadeline Helicopter (5-minute Freewrite) 0.040 4.0 adelair Behind the Scenes: 3D Short Film “An Apple Tale” If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 6’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-6/"},{"title":"Create a systemd timer for claiming rewards twice a day","text":"Do you want to claim rewards for a steem account automatically twice a day? When: you use a linux system with python and systemctl have beem installed a wallet created (beempy createwallet --wipe) and a posting key stored (beempy addkey)then you can follow this tutorial to add a systemd timer for claiming rewards. WarningInstalling a timer for claiming rewards twice a day is convenient, but involves some risks. We are storing the posting key of an account on a (remote) server. Everyone that manages it to log in as root on the server will be able to receive the posting key. (The wallet password is stored in the script. After copying the wallet-sql library, the attacker can decrypt the stored posting key with the wallet password.) Never store an owner key or a master key in a beem wallet! Knowing this, it is advised to immediately change the posting key, when something unusual happens. At first we need three files: steem-claimreward.timer 1234567891011[Unit]Description=Claim rewards twice daily[Timer]OnCalendar=*-*-* 00,12:00:00RandomizedDelaySec=43200Persistent=true[Install]WantedBy=timers.target` steem-claimreward.service 123456789101112[Unit]Description=Claim reward serviceAfter=syslog.target[Service]Type=oneshotUser=rootGroup=rootExecStart=/root/claimreward.shSyslogIdentifier=steem-claimrewardStandardOutput=syslogStandardError=syslog claimreward.sh 1234#!/bin/bashbeempy updatenodesexport UNLOCK=&apos;Your-Wallet-Password&apos;beempy claimreward yoursteemacc We store steem-claimreward.timer and steem-claimreward.service in /etc/systemd/system.1cp steem-claimreward.* /etc/systemd/system The bash script is moved to /root. In order to increase security, we assure that only root can read this file:1chmod 700 /root/claimreward.sh It is also possible to replace the root user by another user in the steem-claimreward.service. The claimreward.sh has than to moved to a place the user can access. Now, replace yoursteemacc with the account name from which you want to claim (posting key of this account has to be stored into the beempy wallet). Then you have to replace Your-Wallet-Password with your beempy wallet password. Activate the timer1systemctl reenable --now steem-claimreward.timer activates the timer. With1systemctl list-timers or1systemctl status steem-claimreward.timer you can check for the next execution time point. The log file can be viewed by:1journalctl -f -u steem-claimreward Controlling the timer enable 1systemctl enable steem-claimreward.timer disable 1systemctl disable steem-claimreward.timer start 1systemctl start steem-claimreward.timer stop 1systemctl stop steem-claimreward.timer How to install and use beempy using anaconda How to write a post with image using beem Access steemit conveyor for reading account information with beempy This page is synchronized from the post: ‘Create a systemd timer for claiming rewards twice a day’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/create-a-systemd-timer-for-claiming-rewards-twice-a-day/"},{"title":"holger80`s Curation League - week 8","text":"source You can read more about the start of my new Curation League.34 accounts wanted to participate, thanks and welcome to my Curation League. There are six new participants from last week. Thank you all for participating! The curation of the last seven days ending by 02.09.2018 7:00:00 UTC are included in this analysis.To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 8Gratulations to mys for winning this round! 8.28 is a really great score! pomocnik for the second place! arabson1990 for the third place! All three did a great job in selecting undervalued posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2953.6 6134 0.50 8.28 8.28 2. pomocnik 16.1 8000 100.00 8.85 7.75 3. arabson1990 155.1 7100 100.00 5.13 5.06 4. reazuliqbal 730.6 7175 100.00 3.82 3.73 5. jacekw 611.0 8204 30.00 3.76 3.20 6. amosbastian 1731.1 5130 16.25 3.19 3.19 7. sourovafrin 976.5 6591 100.00 2.85 2.85 8. grzyb77 223.8 6530 55.00 2.15 2.15 9. diosbot 2427.7 8507 44.00 2.27 1.86 10. jlordc 211.1 6600 100.00 1.43 1.43 11. doughtaker 765.4 6711 50.00 1.41 1.41 12. rose98734 28.9 2200 100.00 1.38 1.38 13. abh12345 15601.5 7570 5.00 1.44 1.33 14. crypto-econom1st 266.5 3900 100.00 1.27 1.27 15. cryptoyzzy 357.6 6290 100.00 1.14 1.14 16. cryptoandcoffee 625.5 7910 50.00 1.19 1.05 17. holger80 6963.1 6860 25.00 1.03 1.03 18. yasu24 2117.0 6513 15.00 1.02 1.02 19. mariusclaassen 15.0 100 100.00 1.00 1.00 20. annaburska 1229.2 6603 50.00 0.93 0.93 21. codingdefined 1977.5 6599 100.00 0.78 0.78 22. yailinbel 32.5 1100 100.00 0.76 0.76 23. isnochys 1282.2 4529 10.00 0.75 0.75 24. marvinix 15.0 600 100.00 0.73 0.73 25. lelon 136.5 3500 100.00 0.72 0.72 26. emrebeyler 6699.2 7708 100.00 0.72 0.66 27. blanchy 563.6 5574 100.00 0.51 0.51 28. ajayyy 191.0 2300 100.00 0.49 0.49 29. synergysteem 153.1 800 100.00 0.29 0.29 30. dexterdev 198.5 2865 70.00 0.27 0.27 31. coretan.aksara 22.9 200 100.00 0.21 0.21 32. hispeedimagins 188.3 1896 100.00 0.18 0.18 33. isarmoewe 762.4 1500 50.00 0.16 0.16 34. katamori 15.6 100 100.00 0.06 0.06 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped.This section is dominated this week by mys. Nice work! Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.999 mariusclaassen 40.8 superheroes All heroes dont wear cape 0.682 pomocnik 128.9 igsgheiughe Comme meat me steemian at Steemfest 3!!! 0.478 mys 45.5 thisorthese Game 0.414 reazuliqbal 33.5 quasarframework The Quasar Framework joins forces with Utopian.io and the Steem Community 0.400 yasu24 8.1 kiyosui ラーメン二郎一之江店 0.341 mys 4273.4 dolphinscute Bia Hai Xom 0.340 yasu24 333.5 suminohou マンゴーかき氷 0.325 mys 1216.2 lucillefranke white reindeer 0.310 pomocnik 11.4 trampmad Anatolia Zachodnia 0.271 mys 24.0 selfvotejustice @tipU is wasting its investors’ voting power to man-slaughter others. 0.270 mys 5487.6 bichdao Chen by Namchen restaurant - My weekly choice . Top 25 AuthorsThis table shows the post authors which leaded to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 1.001 2 superheroes 0.846 4 quasarframework 0.796 11 kuchniawedwoje 0.723 7 coinbrew 0.690 32 krasnalek 0.682 1 igsgheiughe 0.680 34 hallmann 0.662 7 duddnr33 0.532 21 burnpost 0.489 21 sndbox 0.472 7 trampmad 0.431 6 love-peace 0.424 25 zwora 0.373 7 programarivm 0.360 5 ireenchew 0.353 10 nieidealna.mama 0.349 7 ilona3 0.349 9 dinver 0.345 5 mrcn-86 0.343 6 mdsamad 0.340 5 photographxx 0.340 5 neiwem 0.338 8 josephace135 0.337 14 matima 0.337 4 svirus Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. mys reward delay [min] author title 0.478 45.5 thisorthese Game 0.341 4273.4 dolphinscute Bia Hai Xom 0.325 1216.2 lucillefranke white reindeer pomocnik reward delay [min] author title 0.682 128.9 igsgheiughe Comme meat me steemian at Steemfest 3!!! 0.310 11.4 trampmad Anatolia Zachodnia 0.248 23.9 robertartfoto Włocławek moje miasto z mojej perspektywy . arabson1990 reward delay [min] author title 0.167 14.8 austenballard Beat Demo - Pastel Sonic Beat 006 [Original Music] 0.161 24.3 august84 Tajlandia i jej dawna stolica! Ayutthaya!!! [PL] 0.155 14.9 smashedturtle LIFESTYLE: Bałtyk- Bieszady Tour 2018 reazuliqbal reward delay [min] author title 0.414 33.5 quasarframework The Quasar Framework joins forces with Utopian.io and the Steem Community 0.180 389.5 genievot Steem-js and Materialize Css Join Forces, Tutorial to get created posts #1 0.126 16.1 buckydurddle Utopian Open Source Radio - Episode 11 - Full Show Recording jacekw reward delay [min] author title 0.305 16.8 quasarframework The Quasar Framework joins forces with Utopian.io and the Steem Community 0.175 30.3 mrcn-86 [Przepis] Styropian - ciasto szybkie, smaczne i łatwe w przygotowaniu!!! 0.169 1060.8 bfx Bitfinex Block Producer Disclosure amosbastian reward delay [min] author title 0.304 35.1 quasarframework The Quasar Framework joins forces with Utopian.io and the Steem Community 0.118 2631.7 harry-heightz Creating a Privacy Policy for Phone Saver Android Software. 0.113 3566.4 harry-heightz FAQs document created for Jockey Android Software. sourovafrin reward delay [min] author title 0.225 30.2 svirus Flower photography - First mobile photography post 0.173 28.1 coinbrew BTC: A small bounce? 0.169 28.1 coinbrew BTC: Final call before the next movement grzyb77 reward delay [min] author title 0.187 24.1 maxofp2p [PL/ENG] MAXOFP2P LIVESTREAM 0.113 24.1 ptaku Dębki #1 0.106 24.1 ptaku My Actifit Report Card: sierpnia 20 2018 diosbot reward delay [min] author title 0.113 27.0 trampmad Anatolia Zachodnia 0.108 26.2 customuser Najpiękniejsze zdjęcia Jowisza i najważniejsze odkrycia dzięki pracy sondy Juno 0.079 26.6 verticallife Jak prawidłowo się rozgrzewać oraz czy rozgrzewka może nam zaszkodzić jlordc reward delay [min] author title 0.248 29.1 legendchew STEEM Food Tours #25: Euphoria Kitchen - PG, MY 0.141 53.4 musing Musing.io Reintroduction 0.112 30.2 adelair Live Stream : Trial by Comics Art Contest Entry doughtaker reward delay [min] author title 0.212 29.4 ajayyy UI Elements and Building Improvements Voster Coaster VR Roller Coaster Building and Tycoon Game Development Update 0.154 495.9 programarivm PHP Command to Check the Syntax of a Chess PGN File 0.112 132.3 gabox My anger, rage and frustration in video games rose98734 reward delay [min] author title 0.138 30.1 alyssas Ancient Egyptian style still survives in modern Africa 0.104 1178.2 marena5 Técnica de pintura sobre porcelana 0.104 198.1 khandve Turtles captured on my phone Redmi 4 abh12345 reward delay [min] author title 0.130 17.1 mountainjewel DIY Pocket Pond: Catching Water on the Homestead 0.123 14.2 fyrstikken Devil on my back! OnklP/Damien/Fyrstikken 0.078 19.9 hitmeasap [Fortnite HUNGRY Challenge] EU Duos. SWE/ENG. crypto-econom1st reward delay [min] author title 0.122 28.1 mdsamad Md abdus samad photography photo 0.095 25.7 vikashvgm Ye sahi hai ����????? 0.093 28.1 mdsamad Eid festival picture me and my brather cryptoyzzy reward delay [min] author title 0.114 12.8 therealwolf Don’t waste your hard earned STEEM &amp; SBD 0.061 24.1 curart38 La Muse Hic by Piet Rodriguez 0.057 27.2 cryptogainsfr Airdrops update #34 cryptoandcoffee reward delay [min] author title 0.064 10.1 meno Just a little bit longer - Vlog 0.062 13.0 mistakili Pact With The Grave 0.062 17.6 mistakili Self Motivation holger80 reward delay [min] author title 0.077 15.2 steemstem Introducing Members of the Meetup! 0.069 17.2 guyfawkes4-20 NeuroNation - Turn your brain into a beast! 0.066 18.4 curie Curie Author Showcase (August 19, 2018) yasu24 reward delay [min] author title 0.400 8.1 kiyosui ラーメン二郎一之江店 0.340 333.5 suminohou マンゴーかき氷 0.227 333.5 aitommylr コンテスト#11:好きな動物「ペガサス（ユニコーン・一角獣）」 mariusclaassen reward delay [min] author title 0.999 40.8 superheroes All heroes dont wear cape annaburska reward delay [min] author title 0.059 65.5 jacekw.dev Machine learning and Steem #4: Account classification - comparison of available classifiers + 3D visualization of features 0.050 42.2 mykitchenlab Fuksjowy Las - Sezon Smoothie Bowls Czas Start !! 0.038 176.4 kuchniawedwoje Sok ze śliwek - przepis krok po kroku codingdefined reward delay [min] author title 0.154 1629.3 flodner CASPIAN’S TOKEN CHALLENGE - Airdrop Is Going On! 0.027 1412.7 profit-shooter � WHAT TO DO AT THE WEEKEND? - WATCH “BILLIONS” (2016) 0.025 1101.2 nurulafsar03 Pictures from Spain. yailinbel reward delay [min] author title 0.211 18.4 eltrompetista Lección de Trompeta (Escala Do Mayor y Figuras musicales) 0.092 6.9 tashidelek Holanda 0.092 69.8 pavelnunez Exposición fotográfica / Compartir lo que te gusta isnochys reward delay [min] author title 0.062 366.1 zaxan 7 Sins Sloth 0.047 417.6 vimukthi World’s Third Largest ICO is Giving Away $50 Million Worth Tokens 0.039 38.4 rivalzzz FotoFreitag - Steem.Camp Special marvinix reward delay [min] author title 0.267 339.4 sirmiraculous STEEMCHURCH: THE CHURCH. 0.200 21.3 joeparys Join us at the Steem Creators Conference in Toronto! 0.067 153.8 owoblow-steemit Start Something Today….The Conclusion Of The Whole Matter lelon reward delay [min] author title 0.124 44.7 maysi-art The Pixie-Fairy Miniature Sculpture is done :-) 0.081 247.8 feoluwart “Tranquility” 0.059 141.9 yoogyart Flame Motion emrebeyler reward delay [min] author title 0.052 24.6 monajam 200 Steem Sponsored Writing Contest - Vertex Market 0.051 10.1 datilla KAZIYA DEVAM! 0.045 10.2 datilla ÜZÜCÜ GAMİNG blanchy reward delay [min] author title 0.096 379.0 petesays Tuesday thinking 0.039 317.4 frogman18 Political Correctness- Has It Gone Too Far? 0.035 1680.7 petesays Moving, what a schlep If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 8’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-8/"},{"title":"Obtain the number of active, ghost and dead followers using beem","text":"After visiting http://www.steemspectacles.com/@holger80/followers, I wanted to calculate the number of my ghost, dead and active followers with beem. Definition dead follower: not posted (post or comment) or voted within the last 30 days ghost follower: did not vote or reply to any of the last 100 posts active follower: is not a dead or ghost follower Python scriptI solved this by fetching my last 100 post with get_blog and stored all active votes and all replies of these 100 posts using get_votes and get_all_replies.Then I go through all followers. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687from beem.account import Accountfrom beem.comment import Commentfrom beem.utils import addTzInfo, resolve_authorperm, formatTimeStringfrom datetime import datetimeif __name__ == &quot;__main__&quot;: account = Account(&quot;holger80&quot;) followers = account.get_followers(raw_name_list=False) blog = [] all_received_votes = {} all_received_replies = {} for b in account.get_blog(limit=100): if b[&quot;authorperm&quot;] != &apos;@/&apos;: blog.append(b) c = Comment(b) c.refresh() for v in c.get_votes(): if v[&quot;voter&quot;] in all_received_votes: all_received_votes[v[&quot;voter&quot;]].append(v) else: all_received_votes[v[&quot;voter&quot;]] = [v] for c in c.get_all_replies(): if c[&quot;author&quot;] in all_received_replies: all_received_replies[c[&quot;author&quot;]].append(c) else: all_received_replies[c[&quot;author&quot;]] = [c] n_votes = 0 n_replies = 0 for a in all_received_votes: n_votes += len(all_received_votes[a]) for a in all_received_replies: n_replies += len(all_received_replies[a]) own_mvest = [] eff_sp = [] rep = [] last_vote_h = [] last_post_d = [] no_vote = 0 no_post = 0 last_votes = [] last_posts = [] last_comments = [] returned_rshares = [] returned_votes = [] returned_replies = [] for f in followers: rep.append(f.rep) own_mvest.append(f.balances[&quot;available&quot;][2].amount / 1e6) eff_sp.append(f.get_steem_power()) last_votes.append((addTzInfo(datetime.utcnow()) - (f[&quot;last_vote_time&quot;])).total_seconds() / 60 / 60 / 24) last_posts.append((addTzInfo(datetime.utcnow()) - (f[&quot;last_root_post&quot;])).total_seconds() / 60 / 60 / 24) last_comments.append((addTzInfo(datetime.utcnow()) - (f[&quot;last_post&quot;])).total_seconds() / 60 / 60 / 24) votes = f.get_account_votes() returned_vote = 0 returned_rshare = 0 if f[&quot;name&quot;] in all_received_votes: for v in all_received_votes[f[&quot;name&quot;]]: returned_vote += 1 returned_rshare += v[&quot;rshares&quot;] returned_rshares.append(returned_rshare) returned_votes.append(returned_vote) returned_reply = 0 if f[&quot;name&quot;] in all_received_replies: for c in all_received_replies[f[&quot;name&quot;]]: returned_reply += 1 returned_replies.append(returned_reply) ghost_followers = 0 dead_followers = 0 active_followers = 0 active_sp = 0 for i in range(len(followers)): if returned_votes[i] == 0 and returned_replies[i] == 0: ghost_followers += 1 if last_votes[i] &gt; 30 and last_posts[i] &gt; 30 and last_comments[i] &gt; 30: dead_followers += 1 elif returned_votes[i] &gt; 0 or returned_replies[i] &gt; 0: active_sp += eff_sp[i] active_followers += 1 print(&quot;%s has %d (%d active, %d ghosts and %d dead) followers.&quot; % (account[&quot;name&quot;], len(followers), active_followers, ghost_followers, dead_followers)) print(&quot;%.2f %% are active (not ghost or dead).&quot; % (active_followers / len(followers) * 100)) print(&quot;%.2f %% of all %d votes are from followers.&quot; % (sum(returned_votes) / n_votes * 100, n_votes)) print(&quot;%.2f %% of all %d replies are from followers.&quot; % (sum(returned_replies) / n_replies * 100, n_replies)) print(&quot;%.2f %% of all effective SP owned by followers are from active followers.&quot; % (active_sp / sum(eff_sp) * 100)) Resultsholger80 has 916 (237 active, 663 ghosts and 197 dead) followers.25.87 % are active (not ghost or dead).13.50 % of all 9729 votes are from followers.39.79 % of all 1616 replies are from followers.96.44 % of all effective SP owned by followers are from active followers. The obtained ghost followers are different from the result shown at http://www.steemspectacles.com:The difference could be explained by a different obtained reply depth. Whereas my script took all replies into account, steemspectacles may only analyze first level replies. This page is synchronized from the post: ‘Obtain the number of active, ghost and dead followers using beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/obtain-the-number-of-active-ghost-and-dead-followers-using-beem/"},{"title":"beem version 0.19.55 released","text":"beem is a python library for steem. I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V Version 0.19.55 contains the following changes: Added an example to the custom_json section for documentation by @jrswab (#74) Add get_vote_pct_for_SBD, sbd_to_vote_pct and sbd_to_rshares by @flugschwein (#76) beembase/objects: fix serialization of appbase trx by @crokkon (#77) Fix many documentation errors (based on error messages when building) by @flugschwein (#78) Fix of unit tests Fix appbase detection Fix error in check_asset in amount limit parameter added to get_following, get_followers, get_muters and get_mutings All 548 unit tests run through (https://circleci.com/gh/holgern/beem/1099). By the way, the beem github has now over 1000 commits. Many thanks to all who contributed something to the new release. This page is synchronized from the post: ‘beem version 0.19.55 released’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beem-version-0-19-55-released/"},{"title":"holger80`s Curation League - week 9","text":"sourceYou can read more about the start of my new Curation League.34 accounts wanted to participate, thanks and welcome to my Curation League. There are two new participants from last week and two wanted to be removed. Thank you all for participating! The curation of the last seven days ending by 09.09.2018 7:00:00 UTC are included in this analysis.To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 9Gratulations to pomocnik for winning this round! 6.61 is a really great score! reazuliqbal for the second place! algo.coder for the third place! All three did a great job in selecting undervalued posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. pomocnik 16.2 6700 100.00 6.61 6.61 2. reazuliqbal 1242.9 7968 5.00 5.57 4.90 3. algo.coder 286.1 6871 50.00 4.80 4.80 4. rose98734 29.0 4000 100.00 4.45 4.45 5. amosbastian 1865.5 6775 18.05 3.57 3.57 6. mys 2979.4 4188 0.50 3.25 3.25 7. jacekw 615.3 6136 30.00 2.81 2.81 8. sourovafrin 996.4 6694 100.00 2.46 2.46 9. holger80 4542.6 5722 25.00 1.78 1.78 10. diosbot 2438.2 8247 45.00 2.03 1.72 11. cryptoyzzy 363.1 6433 100.00 1.47 1.47 12. abh12345 17505.3 7826 5.00 1.65 1.47 13. crypto-econom1st 263.6 4800 100.00 1.46 1.46 14. grzyb77 227.7 4513 40.00 1.39 1.39 15. cryptoandcoffee 643.5 6263 50.00 1.23 1.23 16. rivalzzz 1304.7 7160 50.00 1.18 1.15 17. ajayyy 197.8 4000 100.00 1.10 1.10 18. doughtaker 772.5 9285 50.00 1.39 1.05 19. jlordc 252.2 7900 100.00 1.18 1.05 20. annaburska 1229.6 7082 100.00 0.99 0.98 21. yasu24 2142.5 6396 15.00 0.97 0.97 22. emrebeyler 6920.8 7534 100.00 0.99 0.92 23. celfmagazine 3427.9 3630 100.00 0.88 0.88 24. codingdefined 2036.0 7913 100.00 0.96 0.85 25. isnochys 1321.0 4788 10.00 0.78 0.78 26. yailinbel 37.6 1170 100.00 0.77 0.77 27. blanchy 591.1 4975 50.00 0.66 0.66 28. dexterdev 198.6 3475 70.00 0.58 0.58 29. isarmoewe 764.5 5075 100.00 0.45 0.45 30. katamori 36.9 500 100.00 0.35 0.35 31. hispeedimagins 188.4 3000 100.00 0.33 0.33 32. synergysteem 153.3 1200 100.00 0.25 0.25 33. mariusclaassen 15.0 200 100.00 0.20 0.20 34. coretan.aksara 25.7 400 100.00 0.16 0.16 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.367 amosbastian 78.2 knacksteem.org Knacksteem for investors and the talented 0.311 rose98734 211.8 aenor Germany was responsible for Russia turning Soviet 0.310 pomocnik 3.9 foodini  Polowa Kuchnia - Płaszczka z patelni w 5 minut! 0.302 dexterdev 54.1 scienceblocks Type 2 diabetes - mechanistic insights on how psychology changes physiology(part 2 - The plot) 0.302 mys 763.7 surfknasen My @steemmonsters Game Jam Submission! (SM: Tap Monsters) 0.279 yasu24 23.6 katakoto バトンをつなごう企画 jp-Friendship#2「生活の中で感じた自然」 0.266 amosbastian 78.9 n42k Steem Dominion – Release! 0.263 yailinbel 28.8 sashas Nos veremos al otro lado ¡Mamá! 0.260 yasu24 333.5 sallyfun 今年もあと4ヶ月 ～ 4 months to go before New Year 0.248 mys 428.5 kittima เช้าๆ กับเมนูกาแฟร้อน ที่ Coffee House in Buriram 0.248 pomocnik 13.0 darkheromatiz 1 CZŁOWIEK, 50 GŁOSÓW (50 Głosów DHM’a ) Top 25 AuthorsThis table shows the post authors which led to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 0.648 9 bobokyaw 0.619 18 burnpost 0.576 12 dinver 0.535 9 mdsamad 0.514 31 hallmann 0.467 9 sourovafrin 0.465 11 amosbastian 0.459 8 tysler 0.448 12 anomadsoul 0.423 10 samuellmiller 0.409 16 kapitanrosomak 0.397 11 pkocjan 0.387 15 curart38 0.382 5 foodini 0.381 8 crokkon 0.352 6 surfknasen 0.350 7 aibolit66 0.342 2 barcrofttv 0.333 8 yasu 0.329 3 legko 0.311 1 aenor 0.310 9 quasarframework 0.305 2 darkheromatiz 0.302 1 scienceblocks 0.287 6 justatouchfey Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. pomocnik reward delay [min] author title 0.310 3.9 foodini  Polowa Kuchnia - Płaszczka z patelni w 5 minut! 0.248 13.0 darkheromatiz 1 CZŁOWIEK, 50 GŁOSÓW (50 Głosów DHM’a ) 0.186 17.8 akordeon Gerardo Matos Rodriguez - La Cumparsita tango Muzyka Akordeonowa reazuliqbal reward delay [min] author title 0.136 3.3 desh2 শিশুদের পূর্ণ মানুষিক বিকাশে বাবা মায়ের কর্তব্য 0.128 18.0 crokkon What is the reward pool share of vote sellers, bid bots and autovotes? 0.125 16.6 buckydurddle Utopian Open Source Radio - Episode 12 - Full Show Recording algo.coder reward delay [min] author title 0.237 28.8 barcrofttv I Fell In Love With My Wife’s Girlfriend EXTREME LOVE 0.219 28.9 barcrofttv Inventor builds sex robots with his wife EXTREME LOVE 0.183 28.9 samuellmiller [Translation][Spanish] Node.js (1016 words) (Part 11) rose98734 reward delay [min] author title 0.311 211.8 aenor Germany was responsible for Russia turning Soviet 0.104 151.0 kelly12 Naturaleza 2018 0.069 39.4 alyssas How did knowledge of the Ancient Egyptian language disappear? amosbastian reward delay [min] author title 0.367 78.2 knacksteem.org Knacksteem for investors and the talented 0.266 78.9 n42k Steem Dominion – Release! 0.149 53.4 tykee Improvement by adding more detailing functions to actifit mys reward delay [min] author title 0.302 763.7 surfknasen My @steemmonsters Game Jam Submission! (SM: Tap Monsters) 0.248 428.5 kittima เช้าๆ กับเมนูกาแฟร้อน ที่ Coffee House in Buriram 0.243 1713.8 bichdao Gyu Shige - Japanese Grill Restaurant. jacekw reward delay [min] author title 0.190 29.9 darkheromatiz 1 CZŁOWIEK, 50 GŁOSÓW (50 Głosów DHM’a ) 0.174 7.5 foodini  Polowa Kuchnia - Płaszczka z patelni w 5 minut! 0.158 24.2 trampmad Muzyka i taniec sourovafrin reward delay [min] author title 0.206 32.0 mamun123456 Easily earn on steemhunt tips video [dtube tutorial post # 45] 0.181 29.1 steemitbd Steemit Bangladesh Curation Support - Issue #41 0.122 28.1 aibolit66 Kiwi - macro! holger80 reward delay [min] author title 0.152 896.0 surfknasen My @steemmonsters Game Jam Submission! (SM: Tap Monsters) 0.147 17.2 utopian-io Giving you more through partnerships and collaborations! Steem-UA, SteemPlus and more. Awesome new Incentives! 0.130 347.8 carsonroscoe Seed - Development - Transaction Squashing &amp; Blocks diosbot reward delay [min] author title 0.088 25.2 customuser Chiny wylądują w grudniu na Księżycu 0.082 24.8 niekarany List do domu 0.081 24.9 barreloflaughs O czym jest One piece? cryptoyzzy reward delay [min] author title 0.128 11.5 clement.poiret Sciences, pseudosciences et croyances de la méditation : piste de réflexion 0.093 25.2 helo Steem Montreal Meetup September 2018! 0.092 23.1 crunchymomqc Les autobus électriques : Encore trop peu utilisés et fabriqués abh12345 reward delay [min] author title 0.147 16.8 mountainjewel Adventures in Foraging Fruit: the Delicious Paw Paw 0.136 27.4 amosbastian Releasing fpl 0.5.0 0.118 18.7 pennsif Here Comes The News - 30 August 2018 [recording] - with @breakoutthecrazy, @yidneth, @morkrock, @breezin, @krnel, @johnvibes, @gregorypatrick &amp; @flauwy crypto-econom1st reward delay [min] author title 0.114 28.2 mdsamad Bidhan kumer 0.099 28.1 mdsamad Eid ar namaj pore sobi chola jayor picture 0.087 23.4 stimp1024 29th August Betting Update grzyb77 reward delay [min] author title 0.164 24.1 maxofp2p [PL/ENG] MAXOFP2P LIVESTREAM 0.154 24.1 krasnalek An extraordinary discovery of Canadian scientists! 0.154 24.2 romualdd Biography of Bernhard Riemann (1826 — 1866) cryptoandcoffee reward delay [min] author title 0.126 14.4 phoneinf Steem Future Price Prediction! 0.099 9.5 gooddream Kingpin (film): great fun if you appreciate Harrelson and Bill Murray 0.083 9.3 gooddream A Simple Plan (film): Great movie you probably haven’t seen rivalzzz reward delay [min] author title 0.072 14.3 louis88 Steemit D-A-CH - Discord Meetup 12 (30.08.2018) Live-Mittschnitt 0.045 14.3 louis88 Fußball-Session beim Steem.Camp - Deutschland vs. Österreich 0.044 29.3 vladimir-simovic Was gegen Insektenstiche (Wespen, Mücken, Bremsen) wirklich hilft ajayyy reward delay [min] author title 0.129 43.7 clayjohn Godot Documentation: Shader Migration Guide 0.126 110.8 amosbastian Writing unit tests for pygame 0.118 5.5 nothingismagick #qcensus2018 Campaign - Graphics Breakdown doughtaker reward delay [min] author title 0.105 1936.2 surfknasen My @steemmonsters Game Jam Submission! (SM: Tap Monsters) 0.101 61.2 to-the-sun AUTOMATICALLY SHUFFLE YOUR INSTRUMENT AND SOUND: a new feature for the open-source project The Amanuensis: Automated Songwriting and Recording 0.087 119.8 ajayyy Smooth Window Movement And Manipulation Voster Coaster VR Roller Coaster Building And Tycoon Game jlordc reward delay [min] author title 0.101 25.9 voronoi BLOCKTOWER [30] : An Interactive Game of Digital Architecture [Play and Win SBD] 0.086 29.2 legendchew Meetup &amp; Support Steemit &amp; Fundition (Round 6) 0.084 29.1 ifeoluwa88 BOOST YOUR DOSE OF CONFIDENCE annaburska reward delay [min] author title 0.070 34.3 astromaniac Organic compounds found on Enceladus! 0.047 557.0 grzyb77 My Actifit Report Card: sierpnia 30 2018 0.037 40.0 ilovecryptopl ❗ EDUKUJEMY POLSKIE INSTYTUCJE ❗ yasu24 reward delay [min] author title 0.279 23.6 katakoto バトンをつなごう企画 jp-Friendship#2「生活の中で感じた自然」 0.260 333.5 sallyfun 今年もあと4ヶ月 ～ 4 months to go before New Year 0.187 24.9 katakoto Daily FML #69 - NO EXCUSE いいわけできない emrebeyler reward delay [min] author title 0.070 20.8 tahirozgen 1 Dakika 0.067 566.6 amosbastian Releasing fpl 0.5.0 0.057 25.2 muratkbesiroglu Sci-Fi Novel: The Ultimate Debate - Part 38: Resistance celfmagazine reward delay [min] author title 0.116 179.8 elsll [ES/EN] Demoniangel (Ilustración y proceso) / Demoniangel (Illustration and process) 0.072 505.6 ferjart Illustration of Saint Francis of Assisi (commission) 0.071 73.0 aidarojaswriter Rock and Roll Talks 3rd edition Charly García: an iconic legend of the argentine rock (Part one) codingdefined reward delay [min] author title 0.191 100.3 knacksteem.org Knacksteem for investors and the talented 0.118 970.9 ajayyy Smooth Window Movement And Manipulation Voster Coaster VR Roller Coaster Building And Tycoon Game 0.072 2028.8 zularizal Logo For Checklist isnochys reward delay [min] author title 0.082 1227.2 johnstone Saturday Dinner with @johnstone. Spending time together. 0.061 28.9 themarkymark Why are you still using Steemit.com? 0.060 370.4 horpey The Web and The Assailants yailinbel reward delay [min] author title 0.263 28.8 sashas Nos veremos al otro lado ¡Mamá! 0.133 19.6 anomadsoul Pensamientos en el asiento trasero de un auto 0.053 593.9 nakary @reveur: Inglés Conversacional Jueves 30/08/2018 a las 6:00pm blanchy reward delay [min] author title 0.081 39.3 gabriel90sson How the Political Class Cripples the Masses 0.064 12.2 balticbadger “Donnerstag” A Poem by @balticbadger 0.046 169.2 stevelivingston What’s Your Moat? dexterdev reward delay [min] author title 0.302 54.1 scienceblocks Type 2 diabetes - mechanistic insights on how psychology changes physiology(part 2 - The plot) 0.025 253.1 effofex My Reading Log: Interesting Stuff From the Past Few Days (2018-08-28) 0.015 196.4 steemstem Introducing members of the SteemSTEM / Utopian.io Meetup - part 2 If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 9’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-9/"},{"title":"How much curation did my post voter earn?","text":"I wanted to know how much my post curators did earn by voting my last 100 posts (If you also want to know this, just leave a short comment and I will reply with the script results). After fetching all my blog posts with get_blog, I’m going through all votes and use the beem function get_curation_rewards. As I did not wanted to fetch all historic STEEM price data, I calculate all curation rewards in SBD. As the vote is also known in SBD, a curation performance can be calculated: curation_SBD / vote_SBD * 100. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869from beem import Steemfrom beem.account import Accountfrom beem.comment import Commentif __name__ == &quot;__main__&quot;: stm = Steem() account = Account(&quot;holger80&quot;, steem_instance=stm) all_received_votes = {} all_received_replies = {} blog = [] rows = [] sum_curation = {&quot;vote_sbd&quot;: 0, &quot;vote_panelty&quot;: 0, &quot;curation_sbd&quot;: 0} for b in account.get_blog(limit=100): if b[&quot;authorperm&quot;] != &apos;@/&apos;: blog.append(b) comment = Comment(b) comment.refresh() curation_rewards_SBD = comment.get_curation_rewards(pending_payout_SBD=True, pending_payout_value=None) for vote in comment[&quot;active_votes&quot;]: vote_sbd = stm.rshares_to_sbd(int(vote[&quot;rshares&quot;])) curation_SBD = curation_rewards_SBD[&quot;active_votes&quot;][vote[&quot;voter&quot;]] if vote_sbd &gt; 0: penalty = ((comment.get_curation_penalty(vote_time=vote[&quot;time&quot;])) * vote_sbd) performance = (float(curation_SBD) / vote_sbd * 100) else: performance = 0 penalty = 0 vote_time_min = (((vote[&quot;time&quot;]) - comment[&quot;created&quot;]).total_seconds() / 60) sum_curation[&quot;vote_sbd&quot;] += vote_sbd sum_curation[&quot;vote_panelty&quot;] += penalty sum_curation[&quot;curation_sbd&quot;] += float(curation_SBD) row = {&quot;voter&quot;: vote[&quot;voter&quot;], &quot;authorperm&quot;: comment[&quot;authorperm&quot;], &quot;vote_time_min&quot;:vote_time_min, &quot;vote_sbd&quot;: vote_sbd, &quot;vote_penalty&quot;: penalty, &quot;curation_sbd&quot;: float(curation_SBD), &quot;performance&quot;: performance} rows.append(row) sorted_curation_perf = sorted(rows, key=lambda x: x[&apos;performance&apos;], reverse=True) sorted_curation_cur = sorted(rows, key=lambda x: x[&apos;curation_sbd&apos;], reverse=True) print(&quot;Overall curation performance: %.2f %% earned from given votes with a total value of %.2f SBD&quot; % (sum_curation[&quot;curation_sbd&quot;] / sum_curation[&quot;vote_sbd&quot;] * 100, sum_curation[&quot;vote_sbd&quot;])) print(&quot;The voter earned %.2f SBD curation rewards in the last 100 posts.&quot; % (sum_curation[&quot;curation_sbd&quot;])) print(&quot;%.2f SBD were removed from the 25%% curation share by voting within the first 30 min. (%.2f %%)&quot; % (sum_curation[&quot;vote_panelty&quot;], sum_curation[&quot;vote_panelty&quot;] / sum_curation[&quot;vote_sbd&quot;] * 100)) curation_voter = {} vote_sbd = [] curation_sbd = [] performance = [] for v in rows: if v[&quot;vote_sbd&quot;] &gt; 0: vote_sbd.append(v[&quot;vote_sbd&quot;]) curation_sbd.append(v[&quot;curation_sbd&quot;]) performance.append(v[&quot;curation_sbd&quot;]/v[&quot;vote_sbd&quot;] * 100) if v[&quot;voter&quot;] not in curation_voter: curation_voter[v[&quot;voter&quot;]] = {&quot;vote_sbd&quot;: v[&quot;vote_sbd&quot;], &quot;vote_penalty&quot;: v[&quot;vote_penalty&quot;], &quot;curation_sbd&quot;: v[&quot;curation_sbd&quot;]} else: curation_voter[v[&quot;voter&quot;]][&quot;vote_sbd&quot;] += v[&quot;vote_sbd&quot;] curation_voter[v[&quot;voter&quot;]][&quot;vote_penalty&quot;] += v[&quot;vote_penalty&quot;] curation_voter[v[&quot;voter&quot;]][&quot;curation_sbd&quot;] += v[&quot;curation_sbd&quot;] if account[&quot;name&quot;] in curation_voter: print(&quot;Self vote percentage %.2f %% (%.2f SBD)&quot; % (curation_voter[account[&quot;name&quot;]][&quot;vote_sbd&quot;] / sum_curation[&quot;vote_sbd&quot;], curation_voter[account[&quot;name&quot;]][&quot;vote_sbd&quot;])) print(&quot;%d different voter&quot; % len(curation_voter)) print(&quot;Maximum achieved curation performance %.2f %%&quot; % sorted_curation_perf[0][&quot;performance&quot;]) print(&quot;Maximum achieved curation reward %.2f SBD&quot; % sorted_curation_cur[0][&quot;curation_sbd&quot;]) ResultsOverall curation performance: 50.47 % earned from given votes with a total value of 2492.89 SBD.The voter earned 1258.12 SBD curation rewards in the last 100 posts.59.81 SBD were removed from the 25% curation share by voting within the first 30 min. (2.40 %).Self vote percentage (SBD value) 0.01 % (13.64 SBD). 5236 different voter.Maximum achieved curation performance 8808.12 %.Maximum achieved curation reward 50.55 SBD. ConclusionThe curation performance of my voter is quite high at 50%. As I stopped self-voting some time ago, I did not reduce the 25% curation share for my voters. My self-voting share across the last 100 posts is only 0.01%. It will not change much for me and my voters when HF20 is live. The 2.4% which is now removed from the curation rewards and added to my author rewards will then be moved back to the reward pool instead. The highest curation performance is achieved by small and early votes and the highest curation amount was achieved by utopian-io. I will run the script for everyone who asks in a comment and will print the result in a comment as reply. This page is synchronized from the post: ‘How much curation did my post voter earn?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-much-did-my-post-voter-earn-by-curation/"},{"title":"Which active accounts do my follower follow that I'm not following?","text":"I’m always looking for interesting accounts to follow. I want to know which accounts do my followed accounts following? As I’m only interested in active accounts (posted in the last 30 days), I will limit the search to active accounts. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677from beem.account import Accountfrom beem.nodelist import NodeListfrom beem import Steemfrom beem.utils import addTzInfofrom datetime import datetimeif __name__ == &quot;__main__&quot;: nodes = NodeList() nodes.update_nodes() node_list = nodes.get_nodes(normal=False, appbase=True) stm = Steem(node=node_list, num_retries=5, call_num_retries=3, timeout=15) following_1 = Account(&quot;holger80&quot;, steem_instance=stm).get_following() following_2 = [] following_1_cnt = {} following_2_cnt = {} cnt = 0 for a in following_1: cnt += 1 try: acc = Account(a, steem_instance=stm) except: continue count = acc.get_follow_count() if count[&quot;following_count&quot;] &gt; 5000: print(&quot;skipping %s as following_count to huge (%d)&quot; % (acc[&quot;name&quot;], count[&quot;following_count&quot;])) continue new_list = acc.get_following(limit=1000) for n in new_list: if n not in following_1 + following_2: following_2.append(n) if n in following_1: if n in following_1_cnt: following_1_cnt[n] += 1 else: following_1_cnt[n] = 1 if n in following_2: if n in following_2_cnt: following_2_cnt[n] += 1 else: following_2_cnt[n] = 1 if cnt % 100 == 0: print(&quot;2. degree following added %s (len %d), %d/%d&quot; % (a, len(following_2), cnt, len(following_1))) following_1_cnt_list = [] for n in following_1_cnt: try: f = Account(n, steem_instance=stm) last_post = (addTzInfo(datetime.utcnow()) - (f[&quot;last_root_post&quot;])).total_seconds() / 60 / 60 / 24 if last_post &lt; 30: following_1_cnt_list.append({&quot;name&quot;: n, &quot;cnt&quot;: following_1_cnt[n], &quot;last_post&quot;: last_post}) except: continue following_2_cnt_list = [] for n in following_2_cnt: try: f = Account(n, steem_instance=stm) last_post = (addTzInfo(datetime.utcnow()) - (f[&quot;last_root_post&quot;])).total_seconds() / 60 / 60 / 24 if last_post &lt; 30: following_2_cnt_list.append({&quot;name&quot;: n, &quot;cnt&quot;: following_2_cnt[n], &quot;last_post&quot;: last_post}) except: continue sorted_list_1 = sorted(following_1_cnt_list, key=lambda x: x[&apos;cnt&apos;], reverse=True) sorted_list_2 = sorted(following_2_cnt_list, key=lambda x: x[&apos;cnt&apos;], reverse=True) print(&quot;| type | acounts | active accounts |&quot;) print(&quot;| --- | --- | --- |&quot;) print(&quot;| my followings | %d | %d |&quot; % (len(following_1), len(following_1_cnt_list))) print(&quot;| followings of my followings | %d | %d |&quot;% (len(following_2), len(following_2_cnt_list))) print(&quot;| followed count | account | last post [days] |&quot;) print(&quot;| --- | --- | --- |&quot;) for a in sorted_list_2[:25]: print(&quot;| %d | %s | %.2f |&quot; % (a[&quot;cnt&quot;], a[&quot;name&quot;], a[&quot;last_post&quot;])) Results type acounts active accounts my followings 215 157 followings of my followings 30951 8873 I follow 215 accounts from which 157 posts during the last 30 days. The unique count of all accounts that my followings follow is 30951. 8873 (28.7 %) accounts are active. Let’s see which active accounts that I’m currently not following are followed most often by my followings: followed count account last post [days] 75 good-karma 3.71 71 roelandp 6.32 70 aggroed 0.75 60 blocktrades 19.85 59 kevinwong 17.31 58 reggaemuffin 9.56 57 kingscrown 0.15 50 drakos 12.61 49 officialfuzzy 3.29 47 klye 7.43 45 flauwy 0.34 45 holger80 2.44 44 inertia 0.52 44 papa-pepper 0.08 43 gavvet 0.56 43 minnowbooster 2.97 42 fabien 21.68 42 jerrybanfield 1.78 41 abit 21.25 41 dollarvigilante 1.48 41 heiditravels 3.66 41 neoxian 2.34 41 rok-sivante 1.24 39 hilarski 0.28 39 nanzo-scoop 0.94 So I have 25 new accounts to check out. Seems that I missed a lot of interesting accounts. When you also want to see these both tables for your account, leave a comment and I will post the results for your account as reply. This page is synchronized from the post: ‘Which active accounts do my follower follow that I’’m not following?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/which-active-accounts-do-my-follower-follow-that-i-m-not-following/"},{"title":"Witness updated and voting for Hardfork 20","text":"HF20 is scheduled for Tuesday, September 25, 2018 15:00:00 UTC. A duty of a witness is now to vote for the hardfork by updating to it or to vote against it by not updating to it. I decided to vote for HF20 and updated my witness server to 0.20.0. I’m exciting for the several changes that HF20 brings to steem. My top3 changes are: Curation “Reverse Auction” Window reduced from 30min to 15min. The linear penalty that occurs within the first 30min/15min is not given to the author anymore and is released to the reward pool. Resource Credits and voting manabar system There are also important security fixes and the new account creation system. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: This page is synchronized from the post: ‘Witness updated and voting for Hardfork 20’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-updated-and-voting-for-hardfork-20/"},{"title":"holger80`s Curation League - week 10","text":"sourceYou can read more about the start of my new Curation League.35 accounts wanted to participate, thanks and welcome to my Curation League. There are one new participant from last week and nobody wanted to be removed. Thank you all for participating! The curation of the last seven days ending by 16.09.2018 7:00:00 UTC are included in this analysis.To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 10Gratulations to mys for winning this round! 7.29 is a really great score! reazuliqbal for the second place! amosbastian for the third place! All three did a great job in selecting undervalued posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2991.2 6173 2.00 7.29 7.29 2. reazuliqbal 1248.2 7585 5.00 7.07 6.52 3. amosbastian 1881.4 8897 11.00 7.56 5.95 4. algo.coder 262.4 6485 50.00 5.94 5.94 5. pomocnik 16.3 4200 100.00 4.78 4.78 6. sourovafrin 1005.9 6645 100.00 3.53 3.53 7. rose98734 29.2 2300 100.00 2.84 2.84 8. crypto-econom1st 264.5 4825 100.00 2.52 2.52 9. jacekw 617.6 6600 30.00 2.50 2.50 10. espoem 3518.8 5356 15.00 2.29 2.29 11. holger80 4606.6 5638 28.00 2.24 2.24 12. cryptoyzzy 371.5 6355 100.00 1.72 1.72 13. diosbot 2454.2 8152 41.00 1.93 1.66 14. doughtaker 803.7 6404 50.00 1.59 1.59 15. jlordc 145.6 6000 100.00 1.47 1.47 16. grzyb77 232.3 5604 40.00 1.44 1.44 17. cryptoandcoffee 671.1 7078 50.00 1.41 1.40 18. abh12345 17940.7 7542 5.00 1.33 1.24 19. katamori 168.9 3340 100.00 1.19 1.19 20. rivalzzz 1334.8 8231 50.00 1.35 1.14 21. the.nervi 14.7 700 100.00 1.09 1.09 22. emrebeyler 7510.7 7057 100.00 0.96 0.95 23. codingdefined 1955.9 6450 100.00 0.88 0.88 24. yasu24 2172.1 6272 15.00 0.84 0.84 25. celfmagazine 4914.4 4420 100.00 0.77 0.77 26. ajayyy 232.9 2500 100.00 0.73 0.73 27. annaburska 1238.3 6201 100.00 0.72 0.72 28. isnochys 1359.5 4215 10.00 0.68 0.68 29. blanchy 569.3 5379 50.00 0.53 0.53 30. coretan.aksara 34.9 1200 100.00 0.51 0.51 31. yailinbel 38.4 840 100.00 0.40 0.40 32. isarmoewe 767.7 3650 25.00 0.39 0.39 33. dexterdev 198.8 3625 65.00 0.32 0.32 34. hispeedimagins 206.7 3299 100.00 0.25 0.25 35. synergysteem 153.4 1200 100.00 0.16 0.16 36. mariusclaassen 15.0 100 100.00 0.07 0.07 37. stevescoins -1634.4 5979 15.00 0.00 0.00 Top 25 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 1.700 amosbastian 30.6 gigatoride Introducing Node.js API wrapper for Utopian.rocks 0.966 crypto-econom1st 28.1 beer32 Matcha Latte เครื่องดื่มแก้วโปรด 0.742 mys 101.7 bountywolf Rouge Summer(Jam Entree) 0.732 algo.coder 28.8 wizzdom My first trip to Venice, Italy: part 5 0.718 algo.coder 28.8 wizzdom My first trip to Venice, Italy: part 4 0.485 katamori 22.7 makowrites Incorruptible - Chapter 1 - Part 1 0.448 mys 2237.3 binhlinh What do superheroes do after retirement? 0.447 mys 104.6 felicianor About Riches 0.429 pomocnik 30.8 samarek69 Pokazy ratownictwa technicznego PSP- Dolina Charlotty 0.414 mys 370.8 stuffbyspencer Steem Monsters: SNAP! a casual picture taking game 0.382 mys 2237.3 pandakhairul Bambu resort 0.380 amosbastian 30.6 hede-io Updates on Hede: New Design, New Features, New Communities and Roadmap 0.380 mys 279.9 emilianara Moral Wealth World 0.349 amosbastian 30.9 byteball.org Steem Use-a-Thon by Byteball - Weekly update 1 0.343 amosbastian 30.9 zlatkamrs Translation Spanish Node.js (1016 words) (Part 2) 0.341 amosbastian 30.2 dalzphoto My Journey with Actifit August 2018 – App Info, Activities, Earnings, Tokens 0.340 the.nervi 7.5 foggymeadow Dziewczyńskość, kobiecość, dojrzałość? 0.319 algo.coder 28.8 alejohannes Translation Spanish The Curious Expedition, from English (1137 words) N’04 0.313 mys 104.6 drakey Income Level 0.313 amosbastian 30.6 mcyusuf Steemer 1.4.6: App crashes when the add as follower button is clicked on one’s profile page. 0.311 amosbastian 30.9 navx Node.js Translation to Spanish - 1613 words (Part 2) 0.307 mys 66.8 rosdianadewi Alam yang begitu indah 0.307 pomocnik 28.8 wojciechsiryk TEN ŚWIAT JEST NASZ - ARCHIWUM. Część 7/60 0.303 mys 87.0 liaulfa1992 Tujuan saya 0.296 algo.coder 28.8 wildtrader August31Webinar 0.296 algo.coder 28.8 elohim4 (ENG/ITA) Speculative attack on Italy third part/ Attacco speculativo all’Italia terza parte Top 25 AuthorsThis table shows the post authors which led to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 1.435 9 beer32 0.947 14 dinver 0.927 3 wizzdom 0.648 8 sourovafrin 0.554 8 mdsamad 0.546 4 samarek69 0.516 7 alejohannes 0.514 16 burnpost 0.485 1 makowrites 0.461 6 razu788 0.457 4 elohim4 0.434 7 mikehamm 0.428 2 jemytruong0402 0.417 35 hallmann 0.403 5 mizej 0.382 1 pandakhairul 0.372 3 karmachela 0.365 2 wildtrader 0.360 4 foggymeadow 0.356 5 tysler 0.343 16 kuchniawedwoje 0.333 4 stuffbyspencer 0.326 4 wojciechsiryk 0.326 15 jestemkioskiem 0.325 8 muratkbesiroglu Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. mys reward delay [min] author title 0.742 101.7 bountywolf Rouge Summer(Jam Entree) 0.448 2237.3 binhlinh What do superheroes do after retirement? 0.447 104.6 felicianor About Riches reazuliqbal reward delay [min] author title 0.246 16.4 bflanagin eduSteem update 3-9-2018 0.182 14.5 dimitrisp ReactOS Greek Translation - Part 10 (~1103 words) 0.132 16.5 jrswab The Curators’ Helper Update :: Web App Now Live :: [v1.2.0] amosbastian reward delay [min] author title 1.700 30.6 gigatoride Introducing Node.js API wrapper for Utopian.rocks 0.380 30.6 hede-io Updates on Hede: New Design, New Features, New Communities and Roadmap 0.349 30.9 byteball.org Steem Use-a-Thon by Byteball - Weekly update 1 algo.coder reward delay [min] author title 0.732 28.8 wizzdom My first trip to Venice, Italy: part 5 0.718 28.8 wizzdom My first trip to Venice, Italy: part 4 0.319 28.8 alejohannes [Translation][Spanish] The Curious Expedition, from English (1137 words) [N’04] pomocnik reward delay [min] author title 0.429 30.8 samarek69 Pokazy ratownictwa technicznego PSP- Dolina Charlotty 0.307 28.8 wojciechsiryk TEN ŚWIAT JEST NASZ - ARCHIWUM. Część 7/60 0.246 11.8 sherdzio 1 000 000 zł - Pierwszy milion sourovafrin reward delay [min] author title 0.186 28.1 dinver Ouch 0.140 28.2 sourovafrin [1Ramp] [0.0.13] A blank page appears if discarded while sharing something and nothing works on that page 0.136 28.1 dinver What a clumsy guy… rose98734 reward delay [min] author title 0.034 85.5 goldmatters Mene Pure Gold vs. 42% Not Gold Challenger: Gold Jewelry Battle crypto-econom1st reward delay [min] author title 0.966 28.1 beer32 Matcha Latte เครื่องดื่มแก้วโปรด 0.294 28.1 beer32 Phuket Travel,Thailand 0.121 28.1 mdsamad Free airdrop token daily news jacekw reward delay [min] author title 0.253 53.5 kocinka Sika - święty Jeleń z Nary 0.194 22.5 nothingismagick Work as an Open Source Contributor 0.162 22.1 koteks „Paradise” znaczy ZOO :( espoem reward delay [min] author title 0.231 14.0 hede-io Updates on Hede: New Design, New Features, New Communities and Roadmap 0.109 171.8 utopian.tasks [STEEM BOUNTY] European Commission EFTG Project (European Financial Transparency Gateway) – Adaptation of a web front end to connect to a private Steem Blockchain 0.103 30.0 yasujizr New Logo and Banner for Better OneTab holger80 reward delay [min] author title 0.172 712.9 stuffbyspencer Steem Monsters: SNAP! a casual picture taking game 0.168 98.3 jmromero #1. Revamping the Copywriting Category: Explaining the Foundations. 0.146 40.9 josephace135 1ramp v0.0.13 - Youtube videos being posted thru “Select Youtube Video” feature doesn’t play cryptoyzzy reward delay [min] author title 0.127 17.7 l-singclear No Man’s Sky ou l’art du gigantisme 0.116 179.9 bijotte Yellowstone, une histoire de geysers et de piscines 0.115 13.4 ancolie Vous avez dit… INTRICATION QUANTIQUE ? diosbot reward delay [min] author title 0.080 25.6 mrcn-86   [Kronika Filmowa #2] Wieczór przed TV - 5 filmów godnych polecenia!!!   0.078 25.4 dyzia Za co kocham mojego psa? 0.073 25.1 baro89 Szlakiem umocnień Wału Pomorskiego #1 - Wprowadzenie doughtaker reward delay [min] author title 0.246 402.1 merasteem Introducing @merasteem, a place for business minded people, contribute to projects and earn, form or join guilds, investment opportunities and more 0.165 1937.8 dennisalund ML Kit for Firebase: Implementing support in Flutter for Image Labeling Cloud API 0.149 58.2 gigatoride Twitter Ruptor A Command-line Tool For Brute Force jlordc reward delay [min] author title 0.142 99.2 minersean Byeball Username attestation bot translation to NL/Dutch (478 words) 0.110 29.2 ascheriit Honkai Impact 3 - Revolutionary gameplay featuring “moe” anime girls 0.106 29.2 ifeoluwa88 THIS IS LOVE grzyb77 reward delay [min] author title 0.254 54.4 konradz16 Konrad Zarek &amp; TumbizAsta - Gloria Firmis (OFFICIAL AUDIO) 0.139 24.2 maxofp2p [PL/ENG] MAXOFP2P LIVESTREAM 0.136 18.4 foodini  Ruszyła FOODspedycja 2.0! Do zgarnięcia 20 STEEM! cryptoandcoffee reward delay [min] author title 0.130 10.2 rok-sivante Simplifying TAUCHAIN: What You Need To Know About One Of The Most Fascinating, Significant Projects On The Block(chain)… 0.080 160.6 blanchy What music would you choose on a crashing plane? 0.073 8.4 gooddream Taken (film): this wasn’t expected to be a hit abh12345 reward delay [min] author title 0.159 18.1 enjar My Dream Game: Crafting And Gathering 0.140 20.1 nomadicsoul Mene Harvest Plan And Steem Monsters 10 Pack Giveaway! 0.116 877.8 wildamy Desk Work - An Erotic Short katamori reward delay [min] author title 0.485 22.7 makowrites Incorruptible - Chapter 1 - Part 1 0.296 5.8 gigatoride Introducing Node.js API wrapper for Utopian.rocks 0.112 71.5 ajayyy Voster Coaster 2 Month Roadmap VR Rollercoaster Building And Tycoon Game rivalzzz reward delay [min] author title 0.126 6.7 scipio @steem-ua, Let’s UNITE: My Open Letter to All Accounts 0.081 12.3 mwfiae [Steemplus API] [v1.0] [Bug-Report] Not counting SPP for transfers to postpromoter 0.064 64.5 losi The Power of Tarkov the.nervi reward delay [min] author title 0.340 7.5 foggymeadow Dziewczyńskość, kobiecość, dojrzałość? 0.272 13.0 mizej [PL] Kultowe polskie przeboje - Tydzień drugi 0.136 13.8 gameeit Czy możliwe jest stworzenie poważnej gry o niemieckich Obozach koncentracyjnych? emrebeyler reward delay [min] author title 0.071 25.3 muratkbesiroglu Birdhouses (English/Turkish) 0.070 19.1 zoltarian Bulgaristan’dan Gelen Göçmenlerin Bursa ile Olan Mekansal İlişkisinin Değerlendirilmesi 7 0.065 25.1 muratkbesiroglu Sea &amp; Forest &amp; Sunset (English/Turkish) codingdefined reward delay [min] author title 0.200 1504.5 hiremani Implementing new features to Travel Mate Android Application 0.108 216.6 adasq Performance &amp; Reliability Updates for “Github Code Screenshot” 0.085 2498.8 dennisalund ML Kit for Firebase: Implementing support in Flutter for Image Labeling Cloud API yasu24 reward delay [min] author title 0.148 621.5 shokomint Tomorrow’s Horoscope Sep 6th, 2018 0.147 333.5 akipponn Homemade cosmetics: sugar scrub / この夏シュガースクラブを作りはじめました 0.111 333.4 hiradate スパイシーな見た目と味 三田製麺所 汁なし担々麺【8・9月限定】 celfmagazine reward delay [min] author title 0.051 247.0 crepuscularios Charles Baudelaire, el “sad boy” del siglo XIX. (+ VAPORWAVE EDITS) 0.040 515.0 sophiakovalski Viajar es vivir: ¡Querida Capaya! 0.036 830.5 mister-omortson  Mythology or fairy tales? ajayyy reward delay [min] author title 0.236 219.9 karmachela 3d Model (Roller Coaster Cart) for Voaster Coaster 0.137 106.9 nothingismagick Work as an Open Source Contributor 0.053 2518.4 tensor Building a Todo/CRUD Application In Flutter With Redux - Part 1 annaburska reward delay [min] author title 0.071 51.8 thermomania Owocowy twarożek z pieczywem 0.023 156.0 sweetsandbeyond Deser aroniowo-jabłkowo-owsiany z imbirem na ciepło 0.022 69.1 grzyb77 Muzyczny Ring Grzyba - “My Generation” isnochys reward delay [min] author title 0.060 14.2 bengy Airport running… Japan here I come? (Ulog #23) 0.059 103.1 horpey Blasting Steem Blockchain Worldwide with Tim Cliff, Promo-Steem &amp; Oracle-D 0.052 29.6 trdaily STEEM ve SBD - Günlük rapor (2018-09-04) blanchy reward delay [min] author title 0.060 19.7 scipio @steem-ua, Let’s UNITE: My Open Letter to All Accounts 0.053 58.0 avizor Beer  chicken  - featuring selfmade! MAGIC DUST Rub (with many tips and tricks) / Bier  Hähnchen - in den Hauptrollen MAGIC DUST Rub (mit vielen Tips und Trick) 0.035 9.8 gabriel90sson Leah Sharibu: Christian Girl still in Boko Haram Detention 170 + Days After for Refusing to Convert coretan.aksara reward delay [min] author title 0.077 25.8 wandairawan Butterfly //My Entry for The 2nd 曆  7 DAYS MACRO-PHOTOGRAPHY CHALLENGE by @flamingirl Day 5. 0.077 31.8 alwiwin Dollar di Puncak Rupiah 0.060 9.3 anggreklestari [#FoodMood 44] Feel The Chinese Imperial Kitchen Dish With Dimsum At Imperal Kitchen And Dimsum If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 10’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-10/"},{"title":"Steem recovered from the hf20 fork thanks to abit and its emergency patches","text":"After the hf20 fork was activated, blocks that produced by hf20 nodes were not accepted anymore by hf19 nodes. This lead to a fork and as the exchanges are on hf19, it was decided to move to the hf19 chain. Thank to @abit and its four patches: checkpoint fix 2048 fork db fix plus 2048 filter out blocks on the bad fork @gtg was able to start the steem blockchain again together with @abit. Then @roelandp could also jump in and the steem block production was slowly starting again. I voted for @abit as witness now, to express my gratitude that he saved steem :). After downgrading to 0.19.12 and applying the patches, my witness server is running again. Now, I’m waiting for official patches. my config.ini (remaining parts as usual):123p2p-seed-node = seed-east.steemit.com:2001 seed-central.steemit.com:2001 seed-west.steemit.com:2001 steem-seed1.abit-more.com:2001 52.74.152.79:2001 seed.steemd.com:34191 anyx.co:2001 seed.xeldal.com:12150 seed.steemnodes.com:2001 seed.liondani.com:2016 gtg.steem.house:2001 seed.jesta.us:2001 steemd.pharesim.me:2001 5.9.18.213:2001 lafonasteem.com:2001 seed.rossco99.com:2001 steem-seed.altcap.io:40696 seed.roelandp.nl:2001 steem.global:2001 seed.esteem.ws:2001 seed.timcliff.com:2001 104.199.118.92:2001 seed.steemviz.com:2001 steem-seed.lukestokes.info:2001 seed.steemian.info:2001 seed.followbtcnews.com:2001 node.mahdiyari.info:2001 seed.curiesteem.com:2001 seed.riversteem.com:2001 148.251.237.104:2001 seed1.blockbrothers.io:2001 steemseed-fin.privex.io:2001 seed.jamzed.pl:2001 seed1.cryptobot.news:2001 seed.thecryptodrive.com:2001 seed.brandonfrye.us:2001 seed.firepower.ltd:2001checkpoint = [26037575, &quot;018d4d47225e6cada82b9aaabc8503ee318c547c&quot;] This page is synchronized from the post: ‘Steem recovered from the hf20 fork thanks to abit and its emergency patches’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-recovered-from-the-hf20-fork-thanks-to-abit-and-its-emergency-patches/"},{"title":"Weekly full API node report #1","text":"I’m collecting hourly the stats of all available fullnode API server for interacting with steem and store the state in an update account data operation inside @fullnodeupdate. Results 12.09.2018 - 19.09.2018The plots show the best result of all working nodes at the specific timestamp. -1 means that no node could answer the specific call. SummaryThe last two days, the number of working nodes dropped from around 14 to 4 nodes. The mean API call duration rises from 0.33s to 2s. The number of fetchable blocks per second dropped from 30 to 7. The number of account history operations per seconds dropped from 2500 to 250. The time difference from the latest provided immutable block number to the newest produced block rises from 50 to 60 seconds. This page is synchronized from the post: ‘Weekly full API node report #1’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/weekly-full-api-node-report-1/"},{"title":"How many different card combination exists for steemmonsters?","text":"How many different decks with mana costs equal to 20 are currently possible? I wrote a small python script to answer this question. I did the following steps: read all cards from https://steemmonsters.com/cards/get_details build a card dictionary by the card id creating a list with all possible color combinations Then I build sets with possible card combinations that summing up to mana costs equal to 20 Conditions A set starts always with a summoner Only 1 summoner is allowed Each card can exist only once in a deck All cards have their maximum level Mana cost must exactly be 20 Gray cards can be used with each color A Gold summoner can pick one additional color + Gray The Gold cards are special, as they can be combined with another color. So I created a unique name, e.g. “Gold_Red” for this. All colors can be combined with Gray cards. “Red” means the combination of “Red” and “Gray” cards. I added also “Pure_Red” which excludes the use of “Gray” cards. ResultsResults ordered by different colors color card combinations with mana=20 Red 2478 Blue 2304 Green 1787 Black 3444 White 2181 Gold 77 Pure_Red 79 Pure_Blue 81 Pure_Green 64 Pure_Black 98 Pure_White 79 Pure_Gold 1 Gold_Red 1298 Gold_Blue 1198 Gold_Green 936 Gold_Black 1805 Gold_White 1126 Pure_Gold_Red 71 Pure_Gold_Blue 69 Pure_Gold_Green 53 Pure_Gold_Black 98 Pure_Gold_White 66 Results ordered by different summoners summoner card combinations with mana=20 Malric Inferno 1070 Alric Stormbringer 994 Lyanna Natura 770 Tyrus Paladium 936 Zintar Mortalis 1494 Selenia Sky 6055 Talia Firestorm 1408 Xia Seachan 1310 Xander Foxwood 1017 Kiara Lightbringer 1245 Jarlax the Undead 1950 ConclusionThe new Gray cards increase the number of deck combination a lot. Selenia Sky is the summoner with the highest number of card combinations, whereas Lyanna Natura has the lowest number of card combinations. The new summoner from the beta release increases the number of card combinations, as their mana cost is reduced by 1. The Black cards have the highest number of card combinations and Green cards have the lowest number of card combinations. Source code123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import requestsimport itertoolsif __name__ == &quot;__main__&quot;: response = requests.get(&quot;https://steemmonsters.com/cards/get_details&quot;) cards = {} for r in response.json(): cards[r[&quot;id&quot;]] = r colors = {&quot;Red&quot;: [&quot;Red&quot;, &quot;Gray&quot;], &quot;Blue&quot;: [&quot;Blue&quot;, &quot;Gray&quot;], &quot;Green&quot;: [&quot;Green&quot;, &quot;Gray&quot;], &quot;Black&quot;: [&quot;Black&quot;, &quot;Gray&quot;], &quot;White&quot;: [&quot;White&quot;, &quot;Gray&quot;], &quot;Gold&quot;: [&quot;Gold&quot;, &quot;Gray&quot;], &quot;Pure_Red&quot;: [&quot;Red&quot;], &quot;Pure_Blue&quot;: [&quot;Blue&quot;], &quot;Pure_Green&quot;: [&quot;Green&quot;], &quot;Pure_Black&quot;: [&quot;Black&quot;], &quot;Pure_White&quot;: [&quot;White&quot;], &quot;Pure_Gold&quot;: [&quot;Gold&quot;], &quot;Gold_Red&quot;: [&quot;Gold&quot;, &quot;Red&quot;, &quot;Gray&quot;], &quot;Gold_Blue&quot;: [&quot;Gold&quot;, &quot;Blue&quot;, &quot;Gray&quot;], &quot;Gold_Green&quot;: [&quot;Gold&quot;, &quot;Green&quot;, &quot;Gray&quot;], &quot;Gold_Black&quot;: [&quot;Gold&quot;, &quot;Black&quot;, &quot;Gray&quot;], &quot;Gold_White&quot;: [&quot;Gold&quot;, &quot;White&quot;, &quot;Gray&quot;], &quot;Pure_Gold_Red&quot;: [&quot;Gold&quot;, &quot;Red&quot;], &quot;Pure_Gold_Blue&quot;: [&quot;Gold&quot;, &quot;Blue&quot;], &quot;Pure_Gold_Green&quot;: [&quot;Gold&quot;, &quot;Green&quot;], &quot;Pure_Gold_Black&quot;: [&quot;Gold&quot;, &quot;Black&quot;], &quot;Pure_Gold_White&quot;: [&quot;Gold&quot;, &quot;White&quot;]} min_mana = 20 max_mana = 20 level = -1 all_summoner_list = [] all_monster_list = [] for r in cards: if cards[r][&quot;type&quot;] == &quot;Monster&quot;: all_monster_list.append(r) else: all_summoner_list.append(r) color_sets = {} for color in colors: print(&quot;Calculating combinations for %s&quot; % (color)) summoner_list = [] monster_list = [] for r in cards: if cards[r][&quot;color&quot;] not in colors[color]: continue if cards[r][&quot;type&quot;] == &quot;Monster&quot;: monster_list.append(r) elif cards[r][&quot;color&quot;] == colors[color][0]: summoner_list.append(r) sets = [] for k in summoner_list: for L in range(0, len(monster_list)+1): for subset in itertools.combinations(monster_list, L): mana = 0 mana += cards[k][&quot;stats&quot;][&quot;mana&quot;] for s in subset: mana += cards[s][&quot;stats&quot;][&quot;mana&quot;][level] new_set = set((k,) + subset) if mana &lt;= max_mana and mana &gt;= min_mana: if new_set not in sets: sets.append(new_set) color_sets[color] = sets summoner_sets = {} for summoner in all_summoner_list: for c in color_sets: for s in color_sets[c]: if summoner not in s: continue if summoner not in summoner_sets: summoner_sets[summoner] = [s] elif s not in summoner_sets[summoner]: summoner_sets[summoner].append(s) print(&quot;| color | card combinations with mana=20 |&quot;) print(&quot;| --- | --- |&quot;) for color in colors: print(&quot;| %s | %d |&quot; % (color, len(color_sets[color]))) print(&quot;| summoner | card combinations with mana=20 |&quot;) print(&quot;| --- | --- |&quot;) for s in summoner_sets: print(&quot;| %s | %d |&quot; % (cards[s][&quot;name&quot;], len(summoner_sets[s]))) update: I did a small mistake in the script. The results are now corrected. This page is synchronized from the post: ‘How many different card combination exists for steemmonsters?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-many-different-deck-combination-exists-for-steemmonsters/"},{"title":"update for beem - preparing beem for HF 20 and delegate added to beempy","text":"Repositoryhttps://github.com/holgern/beem beem is a python library for steem. beem has now 489 unit tests and a coverage of 73 %. The current version is 0.19.56.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V The newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem Bug FixesAccount.get_voting_power() method Not Functional on HF20 RPC NodesThe post about the bug can be found here.get_voting_power was fixed in commit c01e10dby using: self[&quot;voting_manabar&quot;][&quot;current_mana&quot;] self[&quot;voting_manabar&quot;][&quot;last_update_time&quot;] Example with working get_voting_power():1234567891011from beem import Steemfrom beem.account import Accountstm = Steem(node=&quot;https://api.steemit.com&quot;)acc = Account(&quot;holger80&quot;, steem_instance=stm)acc.get_voting_power()95.37947158587963stm&lt;Steem node=https://api.steemit.com, nobroadcast=False&gt;stm.get_blockchain_version()&apos;0.20.2&apos; New Featuresdelegation added to beempyDelegation can be done by1beempy delegate -a &lt;account&gt; &lt;amount&gt; &lt;to_account&gt; amount can be VESTS or STEEM and must be quoted with &quot;.Examples:12beempy delegate -a beembot &quot;1 STEEM&quot; holger80beempy delegate -a beemboot &quot;1000 VESTS&quot; holger80 It is also possible to create steemconnect links by adding -l before delegate:1beempy -l delegate -a beembot &quot;1 STEEM&quot; holger80 This results in https://steemconnect.com/sign/delegate_vesting_shares?delegator=beembot&amp;delegatee=holger80&amp;vesting_shares=2021.090606+VESTS Connection to HF20 testnetThe asset symbols were fixed for the HF20 testnet. It can be used by:123from beem import Steemstm = Steem(node=&quot;https://testnet.steemitdev.com&quot;)stm.chain_params[&quot;chain_id&quot;] = &quot;46d82ab7d8db682eb1959aed0ada039a6d49afa1602491f93dde9cac3e8e6c32&quot; Nodelist updateAll nodes in nodelist were updated. Unit testsAll unit tests were fixed. As non-appbase nodes are no longer available, all unit tests which uses non-appbase nodes were failing. This was fixed. Constants fixed STEEM_VOTING_MANA_REGENERATION_SECONDS and STEEM_REVERSE_AUCTION_WINDOW_SECONDS_HF20 were added. Commit historySTEEM_VOTING_MANA_REGENERATION_SECONDS is used for regenerated_vp calculation commit d993074 Fix unit testFix constants and unittests commit b407a5fFix unit tests commit 65bcdec Improved several functions and nodelist updated commit 476656cCONSTANTS STEEM_REVERSE_AUCTION_WINDOW_SECONDS_HF20 added Nodelist nodes information updated Steem get_dust_threshold() improved and get_config used hardfork checks improved hardfork property improved by using get_hardfork_properties function Changelog.rst added and Issue #80 fixedFix remaining unit tests commit 74c189a Fix more unit tests for appbase and upcoming HF20 commit 6ddfeea Remove non appbase nodes and related tests from all unit tests Improve blockchain.stream() for appbase commit 77bf202 Fix warnings commit c98562c Fix flake8 and revert changes to sbd_to_rshares commit d55ab7b Add delegate to beempy and some HF20 fixes commit c01e10d GitHub Accounthttps://github.com/holgern/ If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘update for beem - preparing beem for HF 20 and delegate added to beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-preparing-beem-for-hf-20-and-delegate-added-to-beempy/"},{"title":"holger80`s Curation League - week 11","text":"sourceYou can read more about the start of my new Curation League.41 accounts wanted to participate, thanks and welcome to my Curation League. There are six new participant from last week and nobody wanted to be removed. Thank you all for participating! The curation of the last seven days ending by 23.09.2018 6:00:00 UTC are included in this analysis.To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 11Gratulations to reazuliqbal for winning this round! 13.11 is a really great score! amosbastian for the second place! pomocnik for the third place! All three did a great job in selecting posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. reazuliqbal 1756.7 6823 3.00 13.11 13.11 2. amosbastian 2016.3 9121 10.92 9.10 6.99 3. pomocnik 16.3 3100 100.00 6.30 6.30 4. mys 3081.5 4823 2.00 5.88 5.88 5. espoem 3540.7 5855 15.00 4.95 4.95 6. algo.coder 264.0 6740 75.00 4.70 4.70 7. sourovafrin 1031.5 7066 100.00 4.34 4.30 8. rose98734 29.3 2600 100.00 3.78 3.78 9. pataty69 1096.5 7343 30.00 3.37 3.21 10. the.nervi 14.7 1500 100.00 3.12 3.12 11. holger80 4633.0 6681 30.00 2.95 2.95 12. darkassassin 56.0 18100 100.00 6.34 2.45 13. jacekw 623.2 7400 30.00 2.46 2.33 14. nervi 293.5 6861 100.00 1.98 1.98 15. diosbot 2463.0 8097 47.00 1.96 1.69 16. doughtaker 816.1 8675 50.00 1.88 1.51 17. grzyb77 232.1 3914 40.00 1.43 1.43 18. katamori 168.2 4750 100.00 1.33 1.33 19. abh12345 20771.5 7514 5.00 1.32 1.23 20. ajayyy 229.0 3300 100.00 1.17 1.17 21. crypto-econom1st 262.3 2625 100.00 1.10 1.10 22. rivalzzz 1386.6 6550 75.00 1.08 1.08 23. cryptoandcoffee 1020.7 7107 44.00 1.08 1.07 24. jlordc 189.5 8100 100.00 1.18 1.02 25. cryptoyzzy 374.9 6483 100.00 1.00 1.00 26. emrebeyler 10434.6 7963 100.00 1.10 0.97 27. codingdefined 1994.2 7598 30.00 0.99 0.91 28. annaburska 1242.8 6679 100.00 0.90 0.90 29. yasu24 2198.8 6227 15.00 0.81 0.81 30. isnochys 1401.9 3486 10.00 0.66 0.66 31. aneukpineung78 135.0 3076 100.00 0.62 0.62 32. celfmagazine 5022.9 4000 100.00 0.60 0.60 33. coretan.aksara 40.5 2100 100.00 0.57 0.57 34. blanchy 582.9 4269 50.00 0.48 0.48 35. isarmoewe 772.4 4200 25.00 0.48 0.48 36. dexterdev 198.8 2345 70.00 0.20 0.20 37. hispeedimagins 207.1 400 100.00 0.10 0.10 38. mariusclaassen 15.1 100 100.00 0.07 0.07 39. yailinbel 42.7 170 100.00 0.05 0.05 40. synergysteem 153.5 400 100.00 0.04 0.04 41. stevescoins -1632.1 5943 33.00 0 0 Top 25 curationThis table shows the best ten curation rewards. The rewards are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 1.039 pomocnik 140.9 vvasy Archiciekawostki #02 A. Speer, plany powojennego Berlina 0.817 the.nervi 25.6 dariklon Serialowo #2 Ascension 0.678 the.nervi 28.9 stankow Moja miseczka dnia powszedniego. 0.611 pomocnik 24.6 rozpisana-ana Wspomnienia małej dziewczynki z dnia ataku 11 września 2001 roku 0.489 pomocnik 36.2 norbert.brylka Jak to na razie wygląda? 0.415 amosbastian 30.8 gigatoride Update Utopian.Rocks API wrapper for Node.js, New Features v0.1.6 0.407 the.nervi 71.3 dariklon Serialowo #3 The Expanse 0.391 amosbastian 30.1 genievot Steem-Discord-Bot Announcement and Making it OpenSource. 0.365 crypto-econom1st 27.2 beer32 หมูกรอบเพลย์ยาร์ด อาหารจานโปรด 0.339 the.nervi 9.5 nervi Curiosity pokazuje Marsa po globalnej burzy i pobiera pierwsze próbki 0.335 amosbastian 30.6 navx Node.js Translation to Spanish - 1296 words (Part 5) 0.325 mys 17.4 ilovecryptopl Meetup Blockchain Business Łódź #2 0.307 mys 50.4 shahin24 Badshah New Song “Aao Kabhi Haveli Pe” Video STREE Kriti Sanon Badshah, Nikhita Gandhi, Sachin - Jigar 0.306 pomocnik 25.9 dumboandgimbo Postrzeganie 0.306 pomocnik 8.6 ciapo Retro Reanimacja - Podkręcamy laser w Sedze Saturn 0.300 mys 41.6 shahin24 Do Din - Darshan Raval Akanksha Sharma Latest Hits 2018 0.296 algo.coder 28.9 elohim4 (ENG/ITA) Speculative attack on Italy third part/ Attacco speculativo all’Italia terza parte 0.294 reazuliqbal 18.7 yasminafly DaVinci Witness Project - CONSUL English to Polish translation 0.281 mys 17.4 makbee 【Steemhunt】商品紹介で報酬を得られるSTEEMベースのプラットフォーム 0.275 reazuliqbal 20.2 sambillingham Announcing Finally Network - Turn your Steem blog into a website 0.268 algo.coder 28.9 igorkk Amazing around us!!! 0.267 amosbastian 30.1 navx Node.js Translation to Spanish - 1226 words (Part 4) 0.258 mys 17.4 dedarknes CZAPLA MODRA / GREAT BLUE HERON by @dedarknes 0.257 espoem 17.7 hazae41 Sweet IPFS : Full IPFS node for Android 0.245 pomocnik 25.9 laptopy2005 Social media - sklep internetowy jako pomysł na biznes /PL 0.245 pomocnik 9.2 laptopy2005 Helena, historia bez happyendu. Wybierz swoja przyszlosc… .PL Top 25 AuthorsThis table shows the post authors which led to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 1.225 3 dariklon 1.148 4 vvasy 0.946 26 amosbastian 0.942 13 navx 0.939 14 dinver 0.937 9 igorkk 0.713 3 stankow 0.712 9 tysler 0.653 14 sourovafrin 0.629 5 rozpisana-ana 0.595 9 ciapo 0.575 11 mdsamad 0.563 10 mikehamm 0.547 9 aibolit66 0.527 5 laptopy2005 0.522 13 jacekw 0.521 2 norbert.brylka 0.517 30 zwora 0.477 17 burnpost 0.465 12 samuellmiller 0.443 4 nervi 0.406 12 alejohannes 0.406 5 elohim4 0.403 9 dumboandgimbo 0.373 8 villaincandle Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. reazuliqbal reward delay [min] author title 0.341 137.2 gigatoride Update Utopian.Rocks API wrapper for Node.js, New Features v0.1.6 0.294 18.7 yasminafly DaVinci Witness Project - CONSUL English to Polish translation 0.275 20.2 sambillingham Announcing Finally Network - Turn your Steem blog into a website amosbastian reward delay [min] author title 0.415 30.8 gigatoride Update Utopian.Rocks API wrapper for Node.js, New Features v0.1.6 0.391 30.1 genievot Steem-Discord-Bot Announcement and Making it OpenSource. 0.335 30.6 navx Node.js Translation to Spanish - 1296 words (Part 5) pomocnik reward delay [min] author title 1.039 140.9 vvasy Archiciekawostki #02 [A. Speer, plany powojennego Berlina] 0.611 24.6 rozpisana-ana Wspomnienia małej dziewczynki z dnia ataku 11 września 2001 roku 0.489 36.2 norbert.brylka Jak to na razie wygląda? mys reward delay [min] author title 0.325 17.4 ilovecryptopl Meetup Blockchain Business Łódź #2 0.307 50.4 shahin24 Badshah New Song “Aao Kabhi Haveli Pe” Video STREE Kriti Sanon Badshah, Nikhita Gandhi, Sachin - Jigar 0.300 41.6 shahin24 Do Din - Darshan Raval Akanksha Sharma Latest Hits 2018 espoem reward delay [min] author title 0.257 17.7 hazae41 Sweet IPFS : Full IPFS node for Android 0.179 28.4 byteball.org Steem Use-a-Thon by Byteball - Weekly update 2 0.128 118.2 princekelly Steeditor (Unlimited Content Editing) Episode Two algo.coder reward delay [min] author title 0.296 28.9 elohim4 (ENG/ITA) Speculative attack on Italy third part/ Attacco speculativo all’Italia terza parte 0.268 28.9 igorkk Amazing around us!!! 0.202 34.2 igorkk Amazing beauty of nature!!! sourovafrin reward delay [min] author title 0.234 13.9 johndennehy Illegal: a true story of love, revolution and crossing borders [book serialization/ Ch.1] 0.161 28.1 aibolit66 White Phlox at sunset 0.134 28.1 aibolit66 Hydrangea young, green and white rose98734 reward delay [min] author title 0.034 8801.0 aenor Social mobility in Britain pataty69 reward delay [min] author title 0.167 43.3 navx Node.js Translation to Spanish - 1198 words (Part 8) 0.152 103.5 navx Node.js Translation to Spanish - 1226 words (Part 4) 0.145 14.2 vaansteam Time-lapse colored pencils - The myths about being an Artist the.nervi reward delay [min] author title 0.817 25.6 dariklon Serialowo #2 Ascension 0.678 28.9 stankow Moja miseczka dnia powszedniego. 0.407 71.3 dariklon Serialowo #3 The Expanse holger80 reward delay [min] author title 0.239 92.2 rodux Introducing DiscordSteem! A Cool New Discord Bot 0.149 31.6 irelandscape SteemQA (beta release) - 2nd Progress Report 0.136 97.0 curtwriter The Busy Life with Busy.org - What You Need to Know [Episode 1] darkassassin reward delay [min] author title 0.195 810.8 fajri.steem41 I can’t stand up 0.177 744.6 tira.steem26 Hope to someone 0.160 1343.5 zainurin81 Power of love jacekw reward delay [min] author title 0.176 57.3 kocinka Japońskie słodycze i przekąski, czyli kolorowy zawrót głowy 0.168 196.5 vvasy Archiciekawostki #02 [A. Speer, plany powojennego Berlina] 0.144 40.3 geekmode Forza Horizon 4 - czyli wyścigi i samochody w jeszcze lepszej odsłonie - idealna gra? - Rzut okiem na Demo [PC] nervi reward delay [min] author title 0.102 35.8 geekmode Battlefield V - Otwarte beta testy. Jak wygląda granie na obecnym etapie? 0.092 12.1 jacekw Hello #spanish community! We are #polish community. We would like to know more about you! 0.089 23.8 kocinka Dlaczego ryby są tak ważne dla japońskiej diety i kultury? diosbot reward delay [min] author title 0.097 23.9 mizej [PL] Kultowe polskie przeboje - Tydzień trzeci 0.091 25.6 assayer Pl-publikacje: 210 STEEM nagród! Apel do opiekunów tagów i expertów WISE 0.083 25.4 mrcn-86 北  [Przepis] Smacznie i Niezdrowo - Krązki Cebulowe po Polsku  北 doughtaker reward delay [min] author title 0.108 387.8 harpagon Steem Smart Contracts javascript: the library that makes the interaction with the nodes easier 0.089 524.2 anonym0us Navi, a Discord Trail Bot That Will Help Small Communities 0.084 656.2 genievot Steem-Discord-Bot Announcement and Making it OpenSource. grzyb77 reward delay [min] author title 0.204 24.1 emsonic [PL/ENG] The Binding of Isaac Antibirth [Emsonic] 0.159 24.1 ciapo Retro Reanimacja - Podkręcamy laser w Sedze Saturn 0.135 24.2 franino Ile wojen i podziałów wywołała reformacja…Marcina Lutra? katamori reward delay [min] author title 0.119 14.3 onepice Tank Fire Game Using HTML SVG (Part-2) 0.119 21.1 thilah Fanart: More South Park Stuff 0.113 18.2 thilah Self drawing(re-draw): It’s A Me abh12345 reward delay [min] author title 0.114 17.2 nomadicsoul It’s Finally Here! Buy Stuff With Steem! 0.103 12.1 themarkymark Does PayPal have a challenger? 0.090 19.4 pennsif Here Comes The News - 6 September 2018 [recording] - with @crypto.talk, @danieldyemusic, @krnel, @azizbd, @martin.mikes &amp; @gregorypatrick ajayyy reward delay [min] author title 0.118 31.4 amosbastian Utopian.rocks - Category filtering, moderator comments feed 0.112 15.1 outwork Steemblr - Improved dashboard UI design 0.087 2589.6 hazae41 Sweet IPFS : Full IPFS node for Android crypto-econom1st reward delay [min] author title 0.365 27.2 beer32 หมูกรอบเพลย์ยาร์ด อาหารจานโปรด 0.177 27.1 mdsamad Natural fruits Kamranga 0.161 27.1 mdsamad Natural fruits Pineapple rivalzzz reward delay [min] author title 0.066 43.7 joeparys How To Get HUGE Upvotes on Steemit! A Step By Step Tutorial 0.052 25.2 therealwolf STEEMship to Mars - Step 1: Witness Voting 0.042 21.2 uwelang Get ready for Oktoberfest - Madness kicks-off in 7 days! cryptoandcoffee reward delay [min] author title 0.099 17.6 erodedthoughts Warframe Monday 0.098 14.2 m31 Forest road 0.084 15.4 geekpowered Crypto’s down, so you’re fucking leaving? jlordc reward delay [min] author title 0.104 29.1 ifeoluwa88 MY MONDAY RANT: SAND MY PAPER 0.077 29.2 culgin Content Crowdsourcing for “Art of Cleaning” Part 2 - 54 STEEM Worth of Reward! 0.070 29.2 ifeoluwa88 GOODBYE TO THE PAST cryptoyzzy reward delay [min] author title 0.085 29.1 sebbbl Steemigram : automatically post from Instagram to Steemit ! 0.077 29.2 sebbbl Blink : le “Hello world” de l’Arduino 0.077 24.1 cryptogainsfr Airdrops update #37 emrebeyler reward delay [min] author title 0.079 643.8 smitop Fixing SEO for dApps 0.058 25.1 muratkbesiroglu Sci-Fi Novel: The Ultimate Debate - Part 46: Farewell to the Struggle 0.057 24.1 muratkbesiroglu Sci-fi Story: Salary Increase (English/Turkish) codingdefined reward delay [min] author title 0.101 328.8 harpagon Steem Smart Contracts javascript: the library that makes the interaction with the nodes easier 0.086 1123.0 cunigarro [ QueryJane project ] Interface improvements in design and optimization for load time 0.084 2773.2 bflanagin eduSteem: Spell Checking annaburska reward delay [min] author title 0.060 195.1 the.foodini  WIN 5 STEEM every week! FOODspedition 2.0 [Round #2] 0.048 94.8 xuanito Aromatyczny groszek cukrowy z czosnkiem✨ 0.046 102.5 thermomania Pasta z brokułów i sera feta - dietetyczne smarowidło yasu24 reward delay [min] author title 0.216 8850.1 yuyuyu 隠遁雲隠れ家的スパゲティ屋さん 0.198 24.9 hiradate ラーメン二郎　三田本店 Ramen jiro 0.156 38.2 tonpa 【Reputation is now 60】になりました！！！ isnochys reward delay [min] author title 0.057 916.6 chuuuckie Busy Boring Day 0.050 28.6 themarkymark [Dlive] @themarkymark and son plays Fortnite 0.049 28.4 emrebeyler Lightsteem 0.0.9 - Introducing event listeners aneukpineung78 reward delay [min] author title 0.156 26.4 muliadimacro Makro fotografi kumbang (Macro photography beetles) 0.089 132.9 nureza Lindungi Kecerdasan Anak Anda Sejak Dini 0.078 94.9 fadil-baik Ingin memposting (post) yang kreatif dan bermanfaat di eSteem.app. celfmagazine reward delay [min] author title 0.039 484.9 templo @templo 9/11 MEMORIAL WTC 0.034 48.5 celfmagazine CELFMAGAZINE - [ACTUALIZACIÓN DE PROYECTO - CURACIÓN - IDEAS] [ESP] 0.033 198.6 tefiefranco La magnificencia del Tirano desde el lenguaje cinematográfico: Taita Boves (2010) de Luis Alberto Lamata. coretan.aksara reward delay [min] author title 0.074 17.0 shintamonica Why do you have to choose @good-karma as a witness? 0.049 8.1 piyamas My​ Child #16 :: ไปทัศนศึกษากับเด็กน้อย 0.025 21.6 boynashruddin Siwah Mencuri Makanan Elang If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 11’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-11/"},{"title":"Witness updated to 0.20.2","text":"HF20 is still scheduled for Tuesday, September 25, 2018 15:00:00 UTC and I updated my witness node now to 0.20.2. This release contains several bug fixes and an improved RC code.I already produced my first block on 0.20.2 and all is running smoothly now. I was working on implementing the new witness_set_properties operation into beem. This operation must be signed with the private witness key and can be used to set: account_creation_fee - fee for account creation account_subsidy_budget - defines the free account creation rate account_subsidy_decay - The per block decay of the account subsidy pool. maximum_block_size sbd_interest_rate sbd_exchange_rate url new_signing_key After trying some structures, it seems that it should be provided as:1234{ &apos;owner&apos;: &apos;witness_owner&apos;, &apos;props&apos;: [[&apos;key&apos;, &apos;hex_pub_key&apos;], [&apos;key1&apos;, &apos;value1&apos;], [&apos;key2&apos;, &apos;value2&apos;]]} I tried it on the HF20 testnet, but could not broadcasting, as I were receiving a missing required other authority:Missing Authority error. I wrote then a Issue #2932. Let’s hope that it will be fixed soon. The current development state of beem can be seen here. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and enter my name into the vote field: “ This page is synchronized from the post: ‘Witness updated to 0.20.2’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-updated-to-0-20-2/"},{"title":"How to reply to a post using beem","text":"It is possible to write comments with the following script: 123456789101112131415#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentimport getpassif __name__ == &quot;__main__&quot;: wif = getpass.getpass(prompt=&apos;Enter your posting key.&apos;) stm = Steem(node=&quot;https://api.steem.house&quot;, keys=[wif]) author = &quot;holger80&quot; authorperm = &quot;@emrebeyler/how-to-create-a-post-with-the-current-state&quot; with open(&apos;reply_body.md&apos;) as f: body = f.read() c = Comment(authorperm, steem_instance=stm) c.reply(body, author=author) steps: install beem (pip install beem -U) store script as reply_post.py change authorperm and author in the script write your reply and store it as reply_body.md Run the script with python reply_body This page is synchronized from the post: ‘How to reply to a post using beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-reply-to-a-post-using-beem/"},{"title":"How to write a post when all condensers are not useable","text":"At the moment it is not possible for most accounts to publish a post through condenser. This state will be resolved when https://api.steemit.com has replayed and works with version 0.20.3. There are other full nodes that already have replayed, as https://api.steem.house for example. With beem, it is therefore possible to publish a post. Install beem1pip install beem -U or 1conda install beem Store the following script as publish_post.py file123456789101112131415#!/usr/bin/pythonfrom beem import Steemimport getpassif __name__ == &quot;__main__&quot;: author = &quot;holger80&quot; title = &quot;How to write a post when all condensers are not useable&quot; with open(&apos;body.md&apos;) as f: body = f.read() parse_body = True tags = [&quot;steem&quot;, &quot;python&quot;, &quot;beem&quot;] wif = getpass.getpass(prompt=&apos;Enter your posting key.&apos;) stm = Steem(node=&quot;https://api.steem.house&quot;, keys=[wif]) stm.post(title, body, author=author, tags=tags, parse_body=parse_body, self_vote=False) Store your post body in body.mdWrite your post with an editor and store it as body.md in the same directory as the python script. Publish your postYou can now publish your post with: 1python publish_post.py Enter your posting key into the prompt and the post will be posted. This page is synchronized from the post: ‘How to write a post when all condensers are not useable’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-write-a-post-when-all-condensers-are-not-useable/"},{"title":"How strong are the RC costs changing?","text":"I’m working currently on an exact calculation of RC costs for the beem library. I will write an Utopian post about the new features when Utopian has recovered. The script is creating a signed operation and calculates the exact RC costs that would have been charged when broadcasting the operation. As the calculation is accurate, we can see the smallest changes. I calculated the RC costs 600x for my last post a transfer: {&quot;from&quot;: &quot;holger80&quot;, &quot;to&quot;: &quot;beembot&quot;, &quot;amount&quot;: Amount(&quot;0.001 STEEM&quot;), &quot;memo&quot;: &quot;Test&quot;} a vote: {&quot;voter&quot;: &quot;timcliff&quot;, &quot;author&quot;: &quot;holger80&quot;, &quot;permlink&quot;: &quot;rc-costs-do-not-depend-on-compute-time&quot;, &quot;weight&quot;: 10000} First resultsRC costs for a post RC costs for a transfer RC costs for a vote ConclusionAll RC costs are going down right now. But the RC costs for a post/comment are almost constant. I will continue to work on the new rc module for beem. This page is synchronized from the post: ‘How strong are the RC costs changing?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-strong-are-the-rc-costs-changing/"},{"title":"RC costs do not depend on compute time","text":"In the recent steemitblog post it was stated: The RC system uses three measurements to determine how much an operation should cost in terms of RCs: blockchain size, compute time, and state size. Let’s check the source code, if this is true:The RC costs are determined by (code):1tx_info.usage.resource_count[i] where i is one of 12345678enum rc_resource_types{ resource_history_bytes, resource_new_accounts, resource_market_bytes, resource_state_bytes, resource_execution_time}; resource_count is set in the count_resources in resource_count.cpp: 1234567891011121314151617181920212223242526void count_resources( const signed_transaction&amp; tx, count_resources_result&amp; result ){ static const state_object_size_info size_info; static const operation_exec_info exec_info; const int64_t tx_size = int64_t( fc::raw::pack_size( tx ) ); count_operation_visitor vtor( size_info, exec_info ); result.resource_count[ resource_history_bytes ] += tx_size; for( const operation&amp; op : tx.operations ) { op.visit( vtor ); } result.resource_count[ resource_new_accounts ] += vtor.new_account_op_count; if( vtor.market_op_count &gt; 0 ) result.resource_count[ resource_market_bytes ] += tx_size; result.resource_count[ resource_state_bytes ] += size_info.transaction_object_base_size + size_info.transaction_object_byte_size * tx_size + vtor.state_bytes_count;} Wait, there is no resource_execution_time! A search showed that resource_execution_time is not set elsewhere. Something like: 1result.resource_count[ resource_execution_time ] += vtor.execution_time_count ; is missing in count_resources(). ConclusionThe statement in the post should be corrected to (when I’m right): The RC system uses right now two measurements to determine how much an operation should cost in terms of RCs: blockchain size, and state size. In the next update, we plan to use also compute time to determine the RC costs. I filled an issue about this: https://github.com/steemit/steem/issues/2972 Although I’m familiar with c++, I do not know the entire source code of steem. I could be wrong. This page is synchronized from the post: ‘RC costs do not depend on compute time’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/rc-costs-do-not-depend-on-compute-time/"},{"title":"beem version 0.20.3 released","text":"Install beem1pip install beem -U or1conda install beem What has changed in the last releases:0.20.3 add RC class to calculate RC costs of operations add comment, vote, transfer RC costs in account.print_info() and beempy power Shows number of possible comments, votes, tranfers with available RCs in account.print_info() and beempy power get_rc_cost was added to steem to calculation RC costs from resource count bug regarding new amount format in witness update fixed (also for beempy witnessenable and witnessdisable) 0.20.2 estimated_mana is now capped by estimated_max print_info fixed() get_api_methods() and get_apis() added to Steem 0.20.1 Improved get_rc_manabar(), get_manabar() output get_voting_power() fixed again print_info for account improved get_manabar_recharge_time_str(), get_manabar_recharge_timedelta() and get_manabar_recharge_time() added https://steemd-appbase.steemit.com added to nodelist 0.20.0 Fully supporting hf20 add get_resource_params(), get_resource_pool(), claim_account(), create_claimed_account() to Steem fix 30x fee for create_account add find_rc_accounts() to Blockchain get_rc(), get_rc_manabar(), get_manabar() added to Account get_voting_power() fixed Some examples what is possible with the newest beem:1beempy power holger80 1beempy witnessproperties --account_subsidy_budget 792 holger80 5xxxxx Calculating RC values of a post and vote123456789101112131415161718from beem.comment import Commentfrom beem.rc import RCfrom beem.utils import resolve_authorpermacc = Account(&quot;holger80&quot;)authorperm = acc.get_blog(limit=1)[0][&quot;authorperm&quot;]c = Comment(authorperm)rc = RC()c_rc_cost = rc.comment_dict(c)rc_mana = acc.get_rc_manabar()print(&quot;Your last post costs now %.2f G RC (%.2f %% of your max RC)&quot; % (c_rc_cost / 1e9, c_rc_cost / rc_mana[&quot;estimated_max&quot;] * 100))last_vote = acc.get_account_votes()[-1]vote_dict = {}vote_dict[&quot;voter&quot;] = acc[&quot;name&quot;]vote_dict[&quot;author&quot;], vote_dict[&quot;permlink&quot;] = resolve_authorperm(last_vote[&quot;authorperm&quot;])vote_dict[&quot;weight&quot;] = 10000 # bug in api (weight is higher than 10000 and value does not matter for RC)v_rc_cost = rc.vote_dict(vote_dict)print(&quot;Your last vote costs now %.2f G RC (%.2f %% of your max RC)&quot; % (v_rc_cost / 1e9, v_rc_cost / rc_mana[&quot;estimated_max&quot;] * 100)) with the result:12Your last post costs now 28.17 G RC (0.34 % of your max RC)Your last vote costs now 3.39 G RC (0.04 % of your max RC) If you like what I’m doing, please consider @holger80 as one of your witnesses (steemconnect). This page is synchronized from the post: ‘beem version 0.20.3 released’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beem-version-0-20-3-released/"},{"title":"beempy.com - beempy for your browser","text":"As it is not an easy task to install python and beem, I created a small website that runs beempy inside of a flask engine. The layout is very basic and will hopefully be improving :). You can find my site at https://beempy.com You can take a look at the current RC pool at https://beempy.com/resource_pool When you enter your steemit user name into the form, you will be redirected to https://beempy.com/power/holger80 and see: This page is synchronized from the post: ‘beempy.com - beempy for your browser’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beempy-com-beempy-for-your-browser/"},{"title":"holger80`s Curation League - week 12","text":"sourceYou can read more about the start of my new Curation League.43 accounts wanted to participate, thanks and welcome to my Curation League. There are two new participants from last week and nobody wanted to be removed. Thank you all for participating! The curation rewards of the last seven days ending by 30.09.2018 6:00:00 UTC are included in this analysis. Due the hardfork 20, the results will different this and also next week. Let’s see what still was possible. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 12Gratulations to darkassassin for winning this round! 4.98 is a really great score! reazuliqbal for the second place! pomocnik for the third place!All three did a great job in selecting posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. darkassassin 56.7 16700 100.00 11.89 4.98 2. reazuliqbal 2366.7 6726 2.00 4.86 4.86 3. pomocnik 16.3 3300 100.00 4.52 4.52 4. amosbastian 2152.5 7983 15.14 4.52 3.96 5. sourovafrin 1179.7 6513 100.00 3.27 3.27 6. algo.coder 1165.8 5820 50.00 3.13 3.13 7. pataty69 1102.3 7923 30.00 3.42 3.02 8. rose98734 29.5 2500 100.00 2.61 2.61 9. holger80 4038.3 5406 30.00 1.90 1.90 10. diosbot 2471.7 8373 40.00 2.25 1.88 11. cryptoandcoffee 1012.6 7505 44.00 1.82 1.70 12. mys 3110.3 2389 0.85 1.61 1.61 13. nervi 300.0 6766 100.00 1.48 1.48 14. grzyb77 234.2 4758 40.00 1.46 1.46 15. abh12345 25760.6 6840 5.00 1.36 1.36 16. maxpatternman 775.8 7045 100.00 1.25 1.24 17. codingdefined 2119.3 7276 11.90 1.28 1.23 18. jacekw 627.3 15940 100.00 2.72 1.19 19. katamori 195.8 6070 100.00 1.14 1.14 20. jlordc 1019.7 7135 50.00 1.10 1.08 21. cryptoyzzy 237.9 4413 100.00 1.05 1.05 22. rivalzzz 1414.8 8339 66.00 1.22 1.02 23. flugschwein 1241.5 6108 100.00 0.98 0.98 24. the.nervi 14.8 900 100.00 0.94 0.94 25. good-karma 197540.9 5832 2.70 0.92 0.92 26. crypto-econom1st 240.3 2950 100.00 0.90 0.90 27. ajayyy 215.6 6100 100.00 0.85 0.85 28. emrebeyler 11256.8 7161 56.00 0.84 0.82 29. yasu24 2223.7 5945 15.00 0.81 0.81 30. blanchy 983.0 5744 50.00 0.79 0.79 31. coretan.aksara 54.1 2300 100.00 0.73 0.73 32. isnochys 1420.8 3339 10.00 0.71 0.71 33. isarmoewe 775.6 7360 25.00 0.75 0.71 34. annaburska 1243.8 5800 50.00 0.71 0.71 35. celfmagazine 5053.7 3410 100.00 0.63 0.63 36. aneukpineung78 139.8 1440 90.60 0.51 0.51 37. doughtaker 821.4 2881 100.00 0.48 0.48 38. espoem 3541.1 1770 15.00 0.40 0.40 39. hispeedimagins 207.1 1250 100.00 0.32 0.32 40. mariusclaassen 15.1 200 100.00 0.20 0.20 41. dexterdev 199.1 1350 100.00 0.14 0.14 42. synergysteem 153.5 800 100.00 0.10 0.10 43. stevescoins -1620.1 5854 12.50 0 0 Top 25 curationThis table shows the best ten curation rewards. The rewards are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.662 crypto-econom1st 27.3 beer32 บุฟเฟ่ต์ติ่มซำ 0.653 darkassassin 1344.2 percydavey All are ready. Now go to the car 0.565 darkassassin 1278.0 florenciakornega dead animals 0.556 amosbastian 38.5 hiremani Utopian-io and Global Blacklist Android Mobile Application 0.441 darkassassin 29.6 fitbusinessman Peach   0.388 darkassassin 1309.0 velvetploof The blue flower blossoms in the early morning 0.385 amosbastian 30.7 ajmaln Introducing easyKU, A friendly web-app to help students of Kerala University. 0.371 darkassassin 1323.2 linbradsher small boat on the lake 0.367 pomocnik 11.3 kocinka Jak w tym Paryżu pięknie!…a nie, czekaj… 0.353 darkassassin 29.6 swisskitty I’m helping in the garden. 0.347 good-karma 199.9 teukumuladi Bunga-bunga cantik 0.321 good-karma 44.1 teukumuladi Belalang(Grasshopper) 0.320 amosbastian 30.3 fuzeh Swarmops Polish Translation - 765 Words 0.317 darkassassin 29.6 buzzaround The Problem With Losing Weight 0.306 yasu24 36.6 akipponn 新手のフィッシング、引っかかるなあと思いました・・・ 0.306 pomocnik 23.2 racibo Wyprawa Dookoła Świata 0.303 good-karma 310.8 teukumuladi Kupu-kupu(butterfly) 0.289 mys 24.0 kocinka Japońskie roboty - już wkrótce w każdym domu? Tematy tygodnia 0.283 darkassassin 1278.0 matpetar စာေတာ္ျပန္ပဲြဆိုသည္မွာ 0.279 mys 1465.4 manerg butterfly mouth 0.274 amosbastian 30.4 jingis07 PROMOTING ANKI-DROID TO NIGERIA 0.273 pataty69 19.2 villaincandle Quasar Framework Documentation; English to Polish translation #4 0.265 darkassassin 1278.0 land1 နယုန္ မိုး ေသး ပက္ဖ်န္းလိုက္သျဖင့္ 0.261 good-karma 151.2 teukumuladi penting nya kawan dalam hidup(important friend in life) 0.259 abh12345 20.8 steem-1up 1UP Blog: Community Growth, Specialized Community Airdrops And Utopian Support 0.245 amosbastian 30.7 to-the-sun INTELLIGENT TASTE RECOGNITION WHEN CHOOSING NEW SYNTHS: a new feature for the open-source project The Amanuensis: Automated Songwriting and Recording Top 25 AuthorsThis table shows the post authors which led to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 0.795 3 florenciakornega 0.742 3 percydavey 0.686 11 tysler 0.656 11 aibolit66 0.603 13 dinver 0.543 10 mikehamm 0.530 3 velvetploof 0.512 13 kocinka 0.470 37 hallmann 0.464 6 sourovafrin 0.459 3 swisskitty 0.442 4 hiremani 0.441 1 fitbusinessman 0.424 16 jacekw 0.413 5 finprep 0.394 7 crypto.inferno 0.390 5 criminalacorm 0.379 5 vvasy 0.371 1 linbradsher 0.363 12 anomadsoul 0.336 3 chelsieweekes 0.334 2 racibo 0.324 27 zwora 0.323 6 mdsamad 0.321 36 tarazkp Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. darkassassin reward delay [min] author title 0.653 1344.2 percydavey All are ready. Now go to the car 0.565 1278.0 florenciakornega dead animals 0.441 29.6 fitbusinessman Peach   reazuliqbal reward delay [min] author title 0.238 29.4 steem-1up 1UP Blog: Community Growth, Specialized Community Airdrops And Utopian Support 0.211 861.9 sambillingham Last Day at the Arctic Coworking Lodge 0.192 19.3 soofluffy OpenCart German Translation - 1009 words pomocnik reward delay [min] author title 0.367 11.3 kocinka Jak w tym Paryżu pięknie!…a nie, czekaj… 0.306 23.2 racibo Wyprawa Dookoła Świata 0.245 13.7 saladyn276 15# Seriale i filmy - Kroniki Shannary amosbastian reward delay [min] author title 0.556 38.5 hiremani Utopian-io and Global Blacklist Android Mobile Application 0.385 30.7 ajmaln Introducing easyKU, A friendly web-app to help students of Kerala University. 0.320 30.3 fuzeh Swarmops Polish Translation - 765 Words sourovafrin reward delay [min] author title 0.210 28.1 aibolit66 Red Monday - Red Rose 0.164 30.9 azadhossain Enjoy your leisure time. 0.145 25.1 sourovafrin What are the best way to promote musing.io? algo.coder reward delay [min] author title 0.212 28.9 wizzdom Fantastic trip to Rome, Italy: part 15 0.173 33.6 kamo.munshi মানুষের উপরের রং দেখে তাকে ঘৃণা করো না, 0.153 32.0 farhan.sidiqui Basic Meal Prep Tips pataty69 reward delay [min] author title 0.273 19.2 villaincandle Quasar Framework Documentation; English to Polish translation #4 0.231 11.3 creativecrypto Card Slingers and Crypto Winners: The Impact of Blockchain on Trading Card Games 0.218 30.7 discernente Pagar imposto é comprar promessa compulsoriamente rose98734 reward delay [min] author title 0.034 7220.9 alyssas The risky business of making predictions in the late medieval world 0.034 1218.8 steevc Follow Friday: DLive-&gt;DDead? 0.034 7175.8 teatree Americans are stepping up and buying their own government’s debt holger80 reward delay [min] author title 0.240 60.0 ajmaln Introducing easyKU, A friendly web-app to help students of Kerala University. 0.201 116.7 hiremani Utopian-io and Global Blacklist Android Mobile Application 0.157 24.6 silvia-odwyer Onyx: A Media &amp; Utility Discord Bot with 40+ Commands diosbot reward delay [min] author title 0.105 24.1 lynxialicious Bang Bang Bangkok =) 0.102 23.9 simson1 Rozbłysk Gamma. 0.095 24.4 lokibalboa “Apdejt” 2# z wykańczacznia mieszkania cryptoandcoffee reward delay [min] author title 0.243 13.2 blanchy You’re going on Holidays with a Mad Man! 0.097 33.5 mistakili Steem And Me - 5 Questions Answered 0.090 14.7 phoneinf The Idea of A Job Is Going Away mys reward delay [min] author title 0.289 24.0 kocinka Japońskie roboty - już wkrótce w każdym domu? Tematy tygodnia 0.279 1465.4 manerg butterfly mouth 0.224 582.0 hardaeborla What is the average monthly that can be paid to an employed house-help? nervi reward delay [min] author title 0.136 108.3 aeris20 Czy to jeszcze bunt dwulatka? 0.117 34.2 pannapysia 20 września – Ogólnopolski Dzień Przedszkolaka 0.100 23.4 batorsz Wyrafinowana przestępczość internetowa grzyb77 reward delay [min] author title 0.128 24.2 sajkus Flower photography daily photos -15-  0.108 24.1 zwora “Jestem mordercą” Macieja Pieprzycy (2016r.) - ależ świetny polski kryminał! 0.106 24.1 ptaku My Actifit Report Card: września 21 2018 abh12345 reward delay [min] author title 0.259 20.8 steem-1up 1UP Blog: Community Growth, Specialized Community Airdrops And Utopian Support 0.097 34.3 insight-out Vacations &amp; Your Mental Health 0.087 33.5 knircky Poker hand review maxpatternman reward delay [min] author title 0.108 28.2 tensor Utopian Rocks Mobile - Update 0.1.0 0.101 96.3 ajmaln Introducing easyKU, A friendly web-app to help students of Kerala University. 0.086 28.2 chriddi Der NORDDEUTSCHE - Vorkommen, Habitat, Sozialverhalten codingdefined reward delay [min] author title 0.200 167.8 dr-frankenstein [Translation] [Arabic] [OroCMR] [PART1] [2013] C1 0.186 2811.2 olinbarnwell the ancient trees by the stream 0.179 23.9 powerwhale Ez dago maitasunik gimelaren erdian bi milioi rupeesentzako bizikletaz jacekw reward delay [min] author title 0.202 24.4 anadello Polak zwycięzcą turnieju szachowego na Steemit! 0.191 17.6 lokibalboa “Apdejt” 2# z wykańczacznia mieszkania 0.175 39.2 kapitanrosomak Mateczka Rosja i jej 4 Kanibali katamori reward delay [min] author title 0.148 21.1 makowrites Artistry in Music 0.111 1776.0 robertvogt Punker Notes [Original Novel] 0.098 23.9 bryan-imhoff “I Thought It Would Be Zombies…” Comic Crowdfunding Update #6; Drawn to Perfection jlordc reward delay [min] author title 0.101 29.3 ifeoluwa88 JESUS TAKE THE WHEEL 0.074 52.3 xawi Morning thoughts fight for your health ;) 0.070 30.2 udezee Dear mum wipe your tears and smile for me since reality is too cruel. cryptoyzzy reward delay [min] author title 0.178 31.6 criminalacorm [Fr/pc] chill fortnite 0.144 49.8 criminalacorm [Fr/pc] chill fortnite 0.119 25.6 cryptogainsfr Applications 2FA, laquelle utiliser ? rivalzzz reward delay [min] author title 0.054 42.4 alexvan Unusual day at the office 0.052 21.2 uwelang Witness my Disco Tuesday 0.046 5.8 anomadsoul Show your support for the Steemians who joined the @blocktrades + @openmic SF contest! flugschwein reward delay [min] author title 0.105 24.2 pjau How to Block the Gawd Damn Notifications in Chrome 0.084 14.6 cuorazohm Machtfaktor Erdöl - Wer Energie kontrolliert, beherrscht die Welt (Teil 2) 0.055 13.3 pjau Peppa Pig Western Hognose Snake Photography the.nervi reward delay [min] author title 0.203 9.6 froq [Translation][Polish]Swarmops(1025 words)#4 0.203 10.4 darjo-game JAKIE GRY ZA 100 PLN na PlayStation 4? Sprawdzamy! Wrzesień 2018 0.135 9.1 assayer Pl-publikacje: 9 piszących, 275 STEEM nagród. Także o współpracy z ILC good-karma reward delay [min] author title 0.347 199.9 teukumuladi Bunga-bunga cantik 0.321 44.1 teukumuladi Belalang(Grasshopper) 0.303 310.8 teukumuladi Kupu-kupu(butterfly) crypto-econom1st reward delay [min] author title 0.662 27.3 beer32 บุฟเฟ่ต์ติ่มซำ 0.169 27.1 mdsamad Natural fruits Papaya 0.166 27.2 mdsamad Big brother some photo ajayyy reward delay [min] author title 0.093 775.0 nothingismagick Reviewing the submission process for Utopian.io [Graphics] 0.056 20.5 investfourmore The Worst House I have Ever Seen! 0.032 66.8 sumit71428 Beauty of nature. emrebeyler reward delay [min] author title 0.060 4.2 mahsumakbas Which social media platform do you use frequently? 0.057 9.7 enforcer48 Revisit Steem Civic Duties 0.055 25.3 muratkbesiroglu Sci-fi Story: Faith Part 1-2-3 (English/Turkish) yasu24 reward delay [min] author title 0.306 36.6 akipponn 新手のフィッシング、引っかかるなあと思いました・・・ 0.179 1394.9 tamito0201 【バル】深夜飯にちょっと変わったお肉を頂く！東京・門前仲町の「プラスアルファキッチン」 0.145 1034.1 hiradate アフアタヌーンティーで、ゆっくりと時間をかけて、会話に花を咲かせる blanchy reward delay [min] author title 0.082 12.3 stevelivingston One Step After Another 0.044 8.3 cryptoandcoffee MANGO MY WTF PARROT 0.041 56.1 wales Jumping at fleas coretan.aksara reward delay [min] author title 0.097 111.0 dwiitavita Falcon Heavy - The Most Powerful Rocket 0.086 14.4 teukumuladi Bunga-bunga cantik 0.074 9.2 ykdesign Whale Riding [Photoshop Digital Art] isnochys reward delay [min] author title 0.070 33.9 happydolphin #tw, #taiwan Top Pending Payout Post since 20180916 0.063 28.2 trdaily #tr etiketi ve trend etiketler içerisindeki durumu (2018-09-18) 0.056 17.1 trdaily #tr etiketi ve trend etiketler içerisindeki durumu (2018-09-22) isarmoewe reward delay [min] author title 0.155 66.4 robertgelbmann Tagebuch des kleinen Wirt - Morgenstund 0.052 5.5 leroy.linientreu Das Amt schlägt zurück 0.036 28.5 sabih Too Good Too Go - Eine App für günstiges Essen, was sonst auf dem Müll landet annaburska reward delay [min] author title 0.055 203.2 rozioo [PL/EHG] Fortnite! SteemGC! 0.027 146.7 wrestlingworld Informator o Koncertach w Polsce. Województwo Dolnośląskie. Koncerty od 21 do 31 Października 2018 0.026 213.0 marcelina2009 Proof of Work antidotum na marnowanie energii. celfmagazine reward delay [min] author title 0.047 740.7 abelfernandez Steemit openmic semana - 103 - Abel Fernandez - Im Yours (Cover) 0.041 914.5 elelobos DEBILITADA [poesía] 0.040 757.2 mijares El Cuerpo femenino como lienzo en blanco. // Serie de desnudos fotográficos. aneukpineung78 reward delay [min] author title 0.157 903.6 ammachemist [Foodies #9] Falling in Love in The First Coming for HOST Cafe 0.151 38.6 malahayati Hayalanku part #4 0.144 91.7 emilnashar Mengkhianati profesi sendiri If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 12’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/5wbi45-holger80-s-curation-league-week-11/"},{"title":"New equilibrium reached for comment and vote RC costs","text":"beempy.com shows now the different resource pools over time. It is possible to view the resource costs here: resource_costs. The different pools can be viewed here: resource_pool The resource_state_bytes pool reaches a first equilibrium state after steem version 0.20.4.resource_state_bytes is an important factor for the RC costs of a vote and a comment. It can be seen that the comment costs are stable now: Also the costs for a vote are stabilized now: The resource_history_bytes pools is still growingThe resource_history_bytes pool influences the costs of all operation.Transfer and custom_json operations are mainly determined by the resource_history_bytes pool. Thus they keep falling: The resource_market_bytes and the resource_new_accounts pools reach a maximum and stop risingThe resource_market_bytes pool influences all market operation (e.g. transfer).The resource_new_accounts influences the claim account creation operation costs. This page is synchronized from the post: ‘New equilibrium reached for comment and vote RC costs’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/new-euqilibrium-reached-for-comment-and-vote-rc-costs/"},{"title":"How to use the steem.vc testnet with beem","text":"The https://testnet.steem.vc/ testnet has the advantage that new accounts can be created by:1curl --data &quot;username=foo&amp;password=barman&quot; https://testnet.steem.vc/create Install beem1pip install beem -U or1conda install beem Setup the testnet with beem and start testing123456789101112131415161718192021222324252627282930313233343536from beem.account import Accountfrom beemgraphenebase.account import PasswordKey, PrivateKey, PublicKeyfrom beem.steem import Steempassword = &quot;barman&quot;username = &quot;foo&quot;useWallet = Falsewalletpassword = &quot;123&quot;if __name__ == &quot;__main__&quot;: testnet_node = &quot;https://testnet.steem.vc&quot; stm = Steem(node=testnet_node) prefix = stm.prefix if useWallet: stm.wallet.unlock(walletpassword) active_key = PasswordKey(username, password, role=&quot;active&quot;, prefix=prefix) owner_key = PasswordKey(username, password, role=&quot;owner&quot;, prefix=prefix) posting_key = PasswordKey(username, password, role=&quot;posting&quot;, prefix=prefix) memo_key = PasswordKey(username, password, role=&quot;memo&quot;, prefix=prefix) active_privkey = active_key.get_private_key() posting_privkey = posting_key.get_private_key() owner_privkey = owner_key.get_private_key() memo_privkey = memo_key.get_private_key() if useWallet: stm.wallet.addPrivateKey(owner_privkey) stm.wallet.addPrivateKey(active_privkey) stm.wallet.addPrivateKey(memo_privkey) stm.wallet.addPrivateKey(posting_privkey) else: stm = Steem(node=testnet_node, wif={&apos;active&apos;: str(active_privkey), &apos;posting&apos;: str(posting_privkey), &apos;memo&apos;: str(memo_privkey)}) account = Account(username, steem_instance=stm) account.transfer(&quot;null&quot;, 1, &quot;SBD&quot;, &quot;test&quot;) At first, you have to enter the correct values for your newly created account:1234password = &quot;barman&quot;username = &quot;foo&quot;useWallet = Falsewalletpassword = &quot;123&quot; I performed these steps with username = &quot;beem&quot;.Direct after account creation, the transaction failed with:1beemapi.exceptions.UnhandledRPCError: plugin exception:Account: beem needs 811351 RC. Please wait to transact, or power up STEEM.rethrow The account has sufficient SP:1234567account.print_info()beem (25.00) --- Voting Power ---100.00 %, VP = 0.00 $full in 0:00:00 --- Balance ---420000.04 SP, 420000.000 STEEM, 420000.000 SBD It can be seen that the RC plugin is disabled in the testnet. It is not possible to see the RCs of an account. After waiting some minutes, I repeated the transfer:1234567891011account.transfer(&quot;null&quot;, 1, &quot;SBD&quot;, &quot;test&quot;){&apos;expiration&apos;: &apos;2018-10-01T08:37:24&apos;, &apos;extensions&apos;: [], &apos;operations&apos;: [[&apos;transfer&apos;, {&apos;amount&apos;: &apos;1.000 SBD&apos;, &apos;from&apos;: &apos;beem&apos;, &apos;memo&apos;: &apos;test&apos;, &apos;to&apos;: &apos;null&apos;}]], &apos;ref_block_num&apos;: 32897, &apos;ref_block_prefix&apos;: 413494785, &apos;signatures&apos;: [&apos;1f21b7382080f5f0ffc90b58545e4ca7ff12ade9be19d0823aae0d32ae0682f2ec52b14dbcb32af31e68b9344595a2b4d176b71d3a050f500728f154ddcea75a87&apos;]} and it worked. Happy testing with beem! This page is synchronized from the post: ‘How to use the steem.vc testnet with beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-use-the-steem-vc-testnet-with-beem/"},{"title":"beempy.com - witness information and curation information added","text":"Besides a better layout (thanks to @louis88), the following things were improved: witness information added curation information about a post is available claim account costs were added Witness informationWitness information are available under https://beempy.com/witness/&lt;owner&gt;Besides the information from the api, the rank and the estimated time for producing the next block (only for witness with rank below 20) are shown: Curation informationUnder https://beempy.com/curation/&lt;authorperm&gt;, curation information are displayed.When the post reward has not paid out yet, the shown values are pending and can be changing. Voting time is the time in minutes since post creation Vote is the given vote value in SBD Early vote loss shows the amount of the vote which is removed when voting earlier than 15 minutes Curation is the pending curation reward Performance is the returned curation reward in relation to the given vote Claim account costsclaim account costs are now shown under https://beempy.com/resource_costs This page is synchronized from the post: ‘beempy.com - witness information and curation information added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beempy-com-witness-information-and-curation-information-added/"},{"title":"Claiming and creating a discounted account using beem","text":"This post is about claiming and creating a discounted account using beem. We will create two python scripts, one for claiming and the other one for creating. The RC costs for claiming a new account are 4978.034244114 G RC (https://beempy.com/resource_costs). Claiming a discounted accountStore the following lines as claim_account.py123456789101112131415161718192021222324252627#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountfrom beem.rc import RCimport getpassimport timeif __name__ == &quot;__main__&quot;: wif = getpass.getpass(prompt=&apos;Enter your active key:&apos;) stm = Steem(node=&quot;https://api.steemit.com&quot;, keys=[wif]) creator = stm.wallet.getAccountFromPrivateKey(wif) creator = Account(creator) rc = RC(steem_instance=stm) current_costs = stm.get_rc_cost(rc.get_resource_count(tx_size=250, new_account_op_count=1)) current_mana = creator.get_rc_manabar()[&quot;current_mana&quot;] last_mana = current_mana print(&quot;Current costs %.2f G RC - current mana %.2f G RC&quot; % (current_costs / 1e9, current_mana / 1e9)) if current_costs + 10 &lt; current_mana: stm.claim_account(creator) time.sleep(10) creator.refresh() current_mana = creator.get_rc_manabar()[&quot;current_mana&quot;] print(&quot;Account claimed and %.2f G RC paid.&quot; % ((last_mana - current_mana) / 1e9)) last_mana = current_mana else: print(&quot;Not enough RC for a claim!&quot;) Be sure to have beem installed (pip install -U beem). After storing the file,it can be started by1python claim_account.py The script is then asking for the active key of the claimer. The account name is automatically determined by the getAccountFromPrivateKey function. The script calculates the RC costs and checks if the operation will be sucessfull. If enougth RCs are available, one discounted account is claimed.123Enter your active key.Current costs 4982.55 G RC - current mana 7890.16 G RCAccount claimed and 4966.93 G RC paid. Creating a discounted accountStore the following lines as create_claimed_account.py123456789101112131415161718192021222324252627282930#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountfrom beem.rc import RCimport getpassimport argparseimport timeif __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser(description=&apos;Creating a claimed account.&apos;) parser.add_argument(&apos;new_account_name&apos;, type=str, help=&apos;Account name from the account that should be created.&apos;) args = parser.parse_args() if args.new_account_name is None: raise ValueError(&quot;Please enter a name.&quot;) wif = getpass.getpass(prompt=&apos;Enter the active key of the account creator:&apos;) password = getpass.getpass(prompt=&apos;Enter the new password for the new account:&apos;) password2 = getpass.getpass(prompt=&apos;Re-Enter the new password for the new account:&apos;) if password != password2: raise ValueError(&quot;Password do not match!&quot;) stm = Steem(node=&quot;https://api.steemit.com&quot;, keys=[wif]) creator = stm.wallet.getAccountFromPrivateKey(wif) creator = Account(creator) print(stm.create_claimed_account(args.new_account_name, creator=creator, password=password)) time.sleep(10) new_account = Account(args.new_account_name) new_account.print_info() After storing the file, it can be started by:1python create_claimed_account.py new_account_name I will create a new account named beempy by entering: 1python create_claimed_account.py beempy After pressing return, the script asks for the active key of the creator and twice for the new account password: 123456789101112131415161718Enter the active key of the account creator:Enter the new password for the new account:Re-Enter the new password for the new account:{&apos;expiration&apos;: &apos;2018-10-05T10:43:16&apos;, &apos;ref_block_num&apos;: 62697, &apos;ref_block_prefix&apos;: 3046425873, &apos;operations&apos;: [[&apos;create_claimed_account&apos;, {&apos;creator&apos;: &apos;holger80&apos;, &apos;new_account_name&apos;: &apos;beempy&apos;, &apos;owner&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM7c89UajhzdFv5pw9wsXmziSgUpvvBJSGopfmyjApH7vihyMayT&apos;, &apos;1&apos;]]}, &apos;active&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM7peepDhHWyzzKW9CjadhTUxSnKETnsEAfPZXw6ogBbt4HTZZif&apos;, &apos;1&apos;]]}, &apos;posting&apos;: {&apos;weight_threshold&apos;: 1, &apos;account_auths&apos;: [], &apos;key_auths&apos;: [[&apos;STM8k5brzwzp8QZHJd1mT28Rsky2yMW9zy1oWbozfKzpVUQPfV6Ni&apos;, &apos;1&apos;]]}, &apos;memo_key&apos;: &apos;STM6sRudsxWpTZWxnpRkCDVD51RteiJnvJYCt5LiZAbVLfM1hJCQC&apos;, &apos;json_metadata&apos;: &apos;&apos;, &apos;extensions&apos;: []}]], &apos;extensions&apos;: [], &apos;signatures&apos;: [&apos;1f51ed1ee7a19a8997ee3cf1be090e61075b3e76dcd81e24daee7ec49e878dc1ff580ee65ed10d8b9048fe72235f7939a5fc9598fe0b64929bdde7cc08aa51397b&apos;]}beempy (25.00)--- Voting Power ---0.00 %, VP = 0.00 $full in 119:59:52--- Balance ---0.00 SP, 0.000 STEEM, 0.000 SBD--- RC manabar ---Remaining: 100.00 % (6 G RC of 6 G RC)full in 0:00:00--- Approx Costs ---comment - 1.50 G RC - enough RC for 4 commentsvote - 0.31 G RC - enough RC for 19 votestransfer - 0.12 G RC - enough RC for 50 transferscustom_json - 0.18 G RC - enough RC for 33 custom_json The new account beempy was sucessfully created: Be sure to store the given account password, it cannot be restored. This page is synchronized from the post: ‘Claiming and creating a discounted account using beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/claiming-and-creating-a-discounted-account-using-beem/"},{"title":"update for beem - adding RC costs calculation and witness_set_properties broadcasting","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 489 unit tests and a coverage of 73 %. The current version is 0.20.5.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V The newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem As utopian-io was not available for quite a long time, I could not post development updates for beem. Thus this post contains the changes for beem releases 0.19.57, 0.20.0, 0.20.1, 0.20.2, 0.20.3, 0.20.4 and 0.20.5. Hopefully, I will receive a utopian-io upvote this time. (my last developement update did not receive a vote). New FeaturesImplementing witness_set_propertiesImplementing this new operation was really hard work, as this operation uses a new and undocumented format. Finally after finding out: each parameter value must be transmitted as hex number (e.g. (hexlify(Uint32(k[1]).__bytes__())).decode()) - commit 6cc303d The map structure can be used for building the trx dict - commit 6cc303d all key have to sorted (commit f63c0ce3) A new HexString class was implemented, as each hex value must be transformed to bytes(unhexlify(bytes(self.data, &apos;ascii&apos;))) for building the bytes field for signing - (commit f63c0ce3)The operation must be signed with the last set witness key and it is not possible to use this operation when a witness is disabled. After being able to broadcast, a new function witness_set_properties for building the operation dict was added to witness_set_properties.1234567891011121314151617def witness_set_properties(self, wif, owner, props, use_condenser_api=True): &quot;&quot;&quot; Set witness properties :param privkey wif: Private signing key :param dict props: Properties :param str owner: witness account name Properties::: { &quot;account_creation_fee&quot;: x, &quot;account_subsidy_budget&quot;: x, &quot;account_subsidy_decay&quot;: x, &quot;maximum_block_size&quot;: x, &quot;url&quot;: x, &quot;sbd_exchange_rate&quot;: x, &quot;sbd_interest_rate&quot;: x, &quot;new_signing_key&quot;: x } &quot;&quot;&quot; A new command witnessproperties was then also added to beempy.12345678910111213Usage: beempy witnessproperties [OPTIONS] WITNESS WIF Update witness properties of witness WITNESS with the witness signing key WIFOptions: --account_creation_fee TEXT Account creation fee (float) --account_subsidy_budget TEXT Account subisidy per block --account_subsidy_decay TEXT Per block decay of the account subsidy pool --maximum_block_size TEXT Max block size --sbd_interest_rate TEXT SBD interest rate in percent --new_signing_key TEXT Set new signing key --url TEXT Witness URL --help Show this message and exit. Only the set parameter is changed, all other remain unchanged. Adding a class to calculate RC costs for different operationThe RC costs depend on the four pools (resource_execution_time is not used yet): resource_history_bytes resource_market_bytes resource_new_accounts resource_state_bytes and the parameter from the price_curve_params field: coeff_a shift coeff_b as well as from rc_regen (is the same for all pools: int(Amount(dyn_param[&quot;total_vesting_shares&quot;], steem_instance=self)) / (STEEM_RC_REGEN_TIME / config[&quot;STEEM_BLOCK_INTERVAL&quot;]) resource_unit is stored in the resource_dynamics_params field There are rules to get the resource_count for each operation. For example for a comment it is:1234567state_bytes_count = state_object_size_info[&quot;comment_object_base_size&quot;]state_bytes_count += state_object_size_info[&quot;comment_object_permlink_char_size&quot;] * permlink_lengthstate_bytes_count += state_object_size_info[&quot;comment_object_parent_permlink_char_size&quot;] * parent_permlink_lengthresource_count = {&quot;resource_history_bytes&quot;: tx_size}resource_count[&quot;resource_state_bytes&quot;] = state_object_size_info[&quot;transaction_object_base_size&quot;]resource_count[&quot;resource_state_bytes&quot;] += state_object_size_info[&quot;transaction_object_byte_size&quot;] * tx_sizeresource_count[&quot;resource_state_bytes&quot;] += state_bytes_count For a comment with:123tx_size=1000permlink_length=10parent_permlink_length=0 the resource_count dict is12{&apos;resource_history_bytes&apos;: 1000, &apos;resource_state_bytes&apos;: 2290090} These values can now be used to calculate the RC costs: 12345678910total_cost = 0if rc_regen == 0: return total_costfor resource_type in resource_count: curve_params = params[resource_type][&quot;price_curve_params&quot;] current_pool = int(pools[resource_type][&quot;pool&quot;]) count = resource_count[resource_type] count *= params[resource_type][&quot;resource_dynamics_params&quot;][&quot;resource_unit&quot;] cost = self._compute_rc_cost(curve_params, current_pool, count, rc_regen) total_cost += cost with123456789101112def _compute_rc_cost(self, curve_params, current_pool, resource_count, rc_regen): &quot;&quot;&quot;Helper function for computing the RC costs&quot;&quot;&quot; num = int(rc_regen) num *= int(curve_params[&apos;coeff_a&apos;]) num = int(num) &gt;&gt; int(curve_params[&apos;shift&apos;]) num += 1 num *= int(resource_count) denom = int(curve_params[&apos;coeff_b&apos;]) if int(current_pool) &gt; 0: denom += int(current_pool) num_denom = num / denom return int(num_denom) + 1 The function from the new RC class can also be used to calculate RC costs:1234from beem.rc import RCrc = RC()comment_RC_costs = rc.comment(tx_size=1000, permlink_length=10, parent_permlink_length=0)print(&quot;RC costs for a comment: %.2f G RC&quot; % (comment_RC_costs / 1e9)) It is also possible to use a comment operation dict with the comment_dict function. RC costs are implemented for comment vote transfer custom_json As the RC values are really high, I use mainly G RC which is RC/1e9. More HF20 related changes add get_resource_params(), get_resource_pool(), claim_account(), create_claimed_account() to Steem fix 30x fee for create_account add find_rc_accounts() to Blockchain get_rc(), get_rc_manabar(), get_manabar() added to Account get_voting_power() fixed get_manabar_recharge_time_str(), get_manabar_recharge_timedelta() and get_manabar_recharge_time() added get_api_methods() and get_apis() added to Steem get_effective_vesting_shares() added to calculated max_mana correctly comment_benefactor_reward adapted for snapshot Commit historyRelease 0.20.5 commit e1859a0 fix get_effective_vesting_shares()Release 0.20.4 commit 3947677 get_effective_vesting_shares() added to calculated max_mana correctly dict key words adapted to steemd for get_manabar() and get_rc_manabar() Voting mana fixed for 0 SP accounts comment_benefactor_reward adapted for snapshot Custom_json RC costs added to print_infoRelease of 0.20.3 commit ca4162fAccount add comment, vote, transfer RC costs in account.print_info() and beempy power Shows number of possible comments, votes, tranfers with available RCs in account.print_info() and beempy power RC add possibility to specify tx_size instead of constructing a dict for comment, transfer, vote and custom_json Fix witness update for beempy disablewitness and beempy enablewitness commit 78825f3 Implementation of a RC costs calculation class commit 827f41cb get_rc_cost was added to steem to calculation RC costs from resource count RC get_tx_size(), get_resource_count(), comment(), vote(), transfer() and custom_json() added several bug fixes commit 2c2ce66 release of 0.20.2 commit 3ba1b97 estimated_mana is now capped by estimated_max print_info fixed() get_api_methods() and get_apis() added to Steem Release of 0.20.1 commit a2ea86d Improved get_rc_manabar(), get_manabar() output get_voting_power() fixed again print_info for account improved get_manabar_recharge_time_str(), get_manabar_recharge_timedelta() and get_manabar_recharge_time() added https://steemd-appbase.steemit.com added to nodelist Release of 0.20.0 commit ebc508a Fully supporting hf20 add get_resource_params(), get_resource_pool(), claim_account(), create_claimed_account() to Steem fix 30x fee for create_account add find_rc_accounts() to Blockchain get_rc(), get_rc_manabar(), get_manabar() added to Account get_voting_power() fixed Preparing first release for HF20, adapt account create for HF20 commit 76021f3 add new witness_set_properties function commit 4771398 witnessproperties is added to beempy for setting new witness parameter witnessfeed uses the new witness_set_properties function when a wif is provided Fix bytes representation of hex strings and add key sorting to Witness_set_properties commit f63c0ce Update nodelist and add not_working parameter to get_nodes() commit bad0ca3 Add unit test for witness_set_properties commit 25926d5 RawString added to types Some improvements and fixes Implementation of Witness_set_properties commit 6cc303d All parameter are packed now in a correct way Correct operationid for Witness_set_properties objects.Amount naming of symbol and asset improved Add missing changes to transactionbuilder commit e1cea48 Add parameter for enabling usage of condenser_api for broadcasting Add ref_block_num and ref_block_prefix to constructTx for offline signing Add Witness_set_properties to operations and add Offline constructTx commit e61c802 Example for using offline signing is provided Next release prepared This page is synchronized from the post: ‘update for beem - adding RC costs calculation and witness_set_properties broadcasting’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-adding-rc-costs-calculation-and-witnesssetproperties-broadcasting/"},{"title":"How to use beem for offline trx building and signing","text":"It is possible to create and store a signed transaction and broadcast it later (maximum allowed delay is one hour or 3600 seconds). At the beginning, the current block number and prefix has to be fetched from the api node.Then the transaction can be created, signed and stored in a text file. This allows using beem with other libraries for broadcasting.1234567891011121314151617181920212223242526272829303132import timefrom beembase import operationsfrom beem.transactionbuilder import TransactionBuilderfrom beem.steem import Steemfrom beem.nodelist import NodeListfrom beembase.transactions import getBlockParamsimport jsonwif = &quot;5xxx&quot;if __name__ == &quot;__main__&quot;: stm_online = Steem() ref_block_num, ref_block_prefix = getBlockParams(stm_online) print(&quot;ref_block_num %d - ref_block_prefix %d&quot; % (ref_block_num, ref_block_prefix)) stm = Steem(offline=True) op = operations.Transfer({&apos;from&apos;: &apos;beembot&apos;, &apos;to&apos;: &apos;holger80&apos;, &apos;amount&apos;: &quot;0.001 SBD&quot;, &apos;memo&apos;: &quot;&quot;}) tb = TransactionBuilder(steem_instance=stm, expiration=3600) tb.appendOps([op]) tb.appendWif(wif) tb.constructTx(ref_block_num=ref_block_num, ref_block_prefix=ref_block_prefix) tx = tb.sign(reconstruct_tx=False) params = (tx.json()) broadcast_json = {&quot;jsonrpc&quot;:&quot;2.0&quot;, &quot;method&quot;:&quot;condenser_api.broadcast_transaction&quot;, &quot;params&quot;:[params], &quot;id&quot;:1} with open(&quot;broadcast_transfer.json&quot;, &quot;w&quot;) as f: f.write(json.dumps(broadcast_json)) This script fetches the ref_block_num and ref_block_prefix and builds a json dictionary which contains the signed transaction. The json is written into a text file broadcast_transfer.json. It is only possible to send a transaction once. Resending will lead to Duplicate transaction check failed. The @ sign means that the following is not a text for sending but a file name.1curl -s --data &quot;@broadcast_transfer.json&quot; https://api.steemit.com The content of this file is read and then broadcasted to the node. It worked. This page is synchronized from the post: ‘How to use beem for offline trx building and signing’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-use-beem-for-offline-trx-building-and-signing/"},{"title":"holger80`s Curation League - week 13 - STEEM prizes available!","text":"sourceYou can read more about the start of my new Curation League.46 accounts wanted to participate, thanks and welcome to my Curation League. There are three new participants from last week and nobody wanted to be removed. Thank you all for participating! The curation rewards of the last seven days ending by 07.10.2018 6:00:00 UTC are included in this analysis. Due the hardfork 20, the results will different this week. Let’s see what still was possible. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 13Gratulations to darkassassin for winning this round! 8.55 is a really great score! mys for the second place! amosbastian for the third place! All three did a great job in selecting posts for curation! PricesThere are some prices this week! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). sum_weight is scaled by the voting power (Two 100% votes at a voting power of 50% are equal in terms of rshares to one 100% vote at a voting power of 100%). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. darkassassin 56.8 3388 34.07 8.55 8.55 2. mys 3023.1 1714 0.50 2.54 2.54 3. amosbastian 2360.3 2859 7.06 2.38 2.38 4. katamori 196.4 2942 70.45 2.21 2.21 5. cryptoandcoffee 707.5 2851 38.04 1.95 1.95 6. reazuliqbal 1895.3 2192 2.00 1.88 1.88 7. nervi 718.4 3958 96.09 1.78 1.78 8. pomocnik 16.6 1678 88.60 1.75 1.75 9. diosbot 2483.5 3577 23.44 1.58 1.58 10. the.nervi 34.1 880 96.46 1.51 1.51 11. sourovafrin 1199.9 2241 96.50 1.44 1.44 12. jacekw 651.8 3049 18.52 1.41 1.41 13. algo.coder 1090.1 2434 46.56 1.08 1.08 14. pataty69 1007.1 2688 20.01 1.01 1.01 15. rose98734 29.6 4444 471.50 0.94 0.94 16. the.foodini 253.7 2039 87.59 0.93 0.93 17. coretan.aksara 61.0 960 55.56 0.93 0.93 18. doughtaker 821.8 3637 41.40 0.83 0.83 19. espoem 3595.2 1568 1.05 0.83 0.83 20. maxpatternman 778.6 3201 72.57 0.73 0.73 21. isnochys 1451.5 3112 9.49 0.72 0.72 22. crypto-econom1st 70.8 766 96.10 0.69 0.69 23. jlordc 1046.9 2738 43.54 0.66 0.66 24. abh12345 26569.9 2927 4.47 0.66 0.66 25. holger80 4068.3 2124 25.00 0.61 0.61 26. emrebeyler 11438.3 3587 35.60 0.58 0.58 27. good-karma 197385.3 3448 2.91 0.58 0.58 28. grzyb77 236.8 2157 36.72 0.58 0.58 29. cryptoyzzy 124.0 1690 84.75 0.54 0.54 30. aneukpineung78 141.5 1985 68.51 0.53 0.53 31. yailinbel 45.4 555 82.47 0.48 0.48 32. yasu24 2238.5 2809 13.08 0.46 0.46 33. rivalzzz 1440.1 2764 43.03 0.44 0.44 34. blanchy 996.0 2028 37.03 0.39 0.39 35. ajayyy 238.5 2754 94.10 0.39 0.39 36. codingdefined 2133.4 2541 92.59 0.39 0.39 37. flugschwein 1237.1 2643 58.17 0.39 0.39 38. annaburska 1249.4 2643 95.62 0.36 0.36 39. isarmoewe 1189.9 2744 13.01 0.33 0.33 40. celfmagazine 5109.1 1069 98.08 0.31 0.31 41. jpphotography 1418.1 1953 24.55 0.22 0.22 42. dexterdev 199.2 1024 94.59 0.14 0.14 43. hispeedimagins 258.2 1009 95.03 0.13 0.13 44. mariusclaassen 15.1 46 46.05 0.07 0.07 45. synergysteem 153.6 99 99.29 0.05 0.05 46. stevescoins -1620.4 2903 30.86 0 0 Top 25 curationThis table shows the best ten curation rewards. The rewards are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. Keep in mind that the reward is normalized to a 100% vote at full vote power. reward voter delay author title 4.037 espoem 673.8 sugarfix Sense is moving to EOS - WhatsApp on the Blockchain? 2.631 darkassassin 3380.2 dk853311 Scaring children 2.021 espoem 611.5 metametheus Give A Little Bit 2.011 espoem 760.2 shirano Soar Recent News and Events , Soar Upcoming Public Sale 2.009 espoem 777.0 donsunex23 UNDEAD 2.006 espoem 807.5 btoye Crosses That Crossed Boundaries: Inter-breeding In Animals. 1.902 crypto-econom1st 27.1 beer32 บุฟเฟ่ต์ ซีฟู๊ด ปิ้งย่าง 1.781 katamori 60.1 onepice Making Snake Game Using HTML 5 SVG With PabloJs (Part-2) 1.373 darkassassin 4900.4 btcfabian Universal Wallet se convierte en el ‘Primero’ en apoyar la ADA de Cardano en dispositivos móviles 1.351 espoem 611.5 cryptoconfiance Analyse technique ETH - 29.09.2018 1.348 espoem 673.8 kambuz Выглядеть моложе без пластики - вполне реально 1.345 espoem 760.2 kambuz Neocell, Супер коллаген - продление молодости кожи и суставов. Отзыв 1.340 espoem 777.3 iguessitsokay Distribute Wealth With More Opportunities to Earn: Vitae Token 1.293 mys 5328.0 miingjazz ร้านยำมะม่วงปูม้า 60 บาท!!! 1.261 mys 12.9 steemitpresident I Love Seeing Mass Adoption!!…Lets See STEEM Now :) 1.116 mys 646.7 steemitpresident Dan Larimer Talking To Satoshi! 1.013 darkassassin 14.9 kingkrypto STEM Skills Can Increase Earnings &amp; Employability - Here’s How to Develop Them 0.995 mys 574.8 steemitpresident Money Invested In Digital Assets Vs. Other Assets 0.967 mys 646.7 steemitpresident Teaching Children About Crypto and Blockchain!!! 0.964 mys 13.0 discernente Ninguém me disse que era impossível, então fui lá e fiz! 0.913 mys 646.7 steemitpresident Have You Ever Been To A Bitcoin Security Conference??? 0.889 espoem 1114.8 yirbeel Un premio de mentira 0.847 the.nervi 9.6 zdrowie Dwukolorowa Chałwa, czyli w Poszukiwaniu Równowagi ☯️ZDROWY PRZEPIS  0.823 mys 78.7 eu-id Result - eU-id Writting Challenge Contest#1- “Pengalaman Menggunakan Esteem App/Esteem Surfer” 0.796 darkassassin 14.9 bitcademyfb Our AIRDROP has started /// go and get free money!!! 0.788 amosbastian 4294.8 olamatto Inclusion of search lyrics, share to Lyrics and submit lyrics corrections Top 25 AuthorsThis table shows the post authors which led to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped reward vote count author avatar 1.082 9 onepice 1.051 6 zdrowie 0.991 1 dk853311 0.816 3 eu-id 0.606 32 holger80 0.504 1 btcfabian 0.492 2 kingkrypto 0.481 3 beer32 0.471 2 bitcademyfb 0.453 3 see-it-feel-it 0.447 10 dinver 0.402 14 jacekw 0.401 3 kamo.munshi 0.389 3 razu788 0.365 4 mikehamm 0.352 2 tandemus 0.320 23 tarazkp 0.315 15 bowess 0.313 1 amreshchandra 0.299 5 pannapysia 0.285 3 winry 0.276 24 trdaily 0.273 3 lynxialicious 0.262 3 focusnow 0.246 1 iot-chain Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100% at full vote power. Only posts are shown. darkassassin reward delay [min] author title 2.631 3380.2 dk853311 Scaring children 1.373 4900.4 btcfabian Universal Wallet se convierte en el ‘Primero’ en apoyar la ADA de Cardano en dispositivos móviles 1.013 14.9 kingkrypto STEM Skills Can Increase Earnings &amp; Employability - Here’s How to Develop Them mys reward delay [min] author title 1.293 5328.0 miingjazz ร้านยำมะม่วงปูม้า 60 บาท!!! 1.261 12.9 steemitpresident I Love Seeing Mass Adoption!!…Lets See STEEM Now :) 1.116 646.7 steemitpresident Dan Larimer Talking To Satoshi! amosbastian reward delay [min] author title 0.788 4294.8 olamatto Inclusion of search lyrics, share to Lyrics and submit lyrics corrections 0.768 10.5 yasminafly Utopian + DaVinci Witness Project - CONSUL English to Polish translation report 0.497 10.8 gotgame Building A Content Management System Using The MEAN Stack - 5 (Front-End Development) katamori reward delay [min] author title 1.781 60.1 onepice Making Snake Game Using HTML 5 SVG With PabloJs (Part-2) 0.227 20.7 winry mew mew fanart 0.165 98.5 gotgame Building A Content Management System Using The MEAN Stack - 5 (Front-End Development) cryptoandcoffee reward delay [min] author title 0.376 1469.5 schmidt2015 Prasaja bouquet 0.375 16.9 goldmatters Mene Goes to the Beach 0.313 14.8 taskmaster4450 The Hard Fork 20 Fiasco Was The Best Thing To Happen To STEEM AND Who Is Responsible!!!! reazuliqbal reward delay [min] author title 0.180 14.1 dedicatedguy [Translation][Spanish] Node.js (1083 words) (Part 13) 0.175 14.5 akireuna Verdaccio [Translation into Italian, 1041 words]-part 5 0.175 14.3 cremisi Node.js Translation to Spanish - (1184 words) (Part 11) nervi reward delay [min] author title 0.319 39.1 holger80 How strong are the RC costs changing? 0.299 15.7 maxofp2p [PL/ENG] MAXOFP2P LIVESTREAM 0.246 15.2 zdrowie Dwukolorowa Chałwa, czyli w Poszukiwaniu Równowagi ☯️ZDROWY PRZEPIS  pomocnik reward delay [min] author title 0.276 22.4 pannapysia 25 września – Dzień Budowlańca 0.226 15.4 dumboandgimbo 類czym karmi się próżność 0.147 115.6 mokambo Jestem recydywistom! diosbot reward delay [min] author title 0.436 15.8 trampmad “Dawanie otwiera drogę do otrzymywania” - rozwinięcie 0.343 15.4 koteks Pożar w szpitalu psychiatrycznym w Górnej Grupie 55 chorych spłoneło 0.297 15.9 simson1 Archaik. the.nervi reward delay [min] author title 0.847 9.6 zdrowie Dwukolorowa Chałwa, czyli w Poszukiwaniu Równowagi ☯️ZDROWY PRZEPIS  0.389 17.0 carrioner Carrioner Stream Funny Moments #2 0.243 14.2 lynxialicious Dzień dobry tygrysie azjatycki, siemka Miasto Lwa i czołem Merlion, czyli Singapur część 1 sourovafrin reward delay [min] author title 0.653 14.2 mikehamm Judge Brett Kavanaugh Is Not On Trial 0.579 14.2 dinver Stingray was filmed giving birth on a beach. 0.311 14.2 dinver War never changes. jacekw reward delay [min] author title 0.497 66.5 dumboandgimbo Jesiennie naturalne  珞 0.408 168.0 yum-yum Dlaczego Żmij ? 0.406 11.7 xuanito Wołowina po burgundzku ✨ algo.coder reward delay [min] author title 0.452 28.9 deathcross Wo die meisten Gastarbeiter Deutsche sind 0.114 28.9 bilimkurgu Philip K. Dick’in Öyküleri 0.114 28.9 igorkk White willow is worthy of attention!!! pataty69 reward delay [min] author title 0.275 31.9 sneakin MSVEX MKIII BOBCAT - A Boat On Top Of A Submersible 0.155 11.9 navx Node.js Translation to Spanish - 1073 words (Part 13) 0.127 25.2 esteliopadilla Today’s song El Mono (Monkey). Venezuelan traditional-popular music rose98734 reward delay [min] author title 0.055 184.8 mindtrap Is this as bad as it looks? 0.007 1793.5 teatree The EU’s share of world GDP is shrinking 0.007 834.4 alyssas Investors guide to Brexit and the Travel Industry the.foodini reward delay [min] author title 0.473 14.2 see-it-feel-it  #SteemChallenge - Check how many cats I fed for 5 STEEM! 0.142 27.9 foodini  APARTAMENT NA WAKACJE ZA 800 ZŁ MIESIĘCZNIE? POZNAJ 5 PORAD! 0.124 12.3 waran Chodź, pokażę Ci kotki w piwnicy #1 coretan.aksara reward delay [min] author title 0.806 61.4 eu-id Result - eU-id Writting Challenge Contest#1- “Pengalaman Menggunakan Esteem App/Esteem Surfer” 0.196 7.6 zaim4d1 Ulography #16 : Sunset In The City Of Banda Baro 0.172 52.7 wandairawan Photography // Dragonfly - The result of a shot with a distance of 5 meters doughtaker reward delay [min] author title 0.148 5317.1 bxute 1Ramp Android Updates - The App Got a New Look, try it out! 0.093 1463.5 hiremani Implemented Home Screen widget Feature to Travel Mate Android app 0.090 517.4 ksolymosi Hi Eeveryone! It’s Global Saturday, please share your recipes! espoem reward delay [min] author title 4.037 673.8 sugarfix Sense is moving to EOS - WhatsApp on the Blockchain? 2.021 611.5 metametheus Give A Little Bit 2.011 760.2 shirano Soar Recent News and Events , Soar Upcoming Public Sale maxpatternman reward delay [min] author title 0.127 20.4 peppermint24 ➽The Question is: What is a Mana Mana? 0.108 6.5 felixxx HF 20 A BIG SUCCESS 0.101 22.0 holger80 beempy.com - beempy for your browser isnochys reward delay [min] author title 0.530 15.9 trdaily STEEM ve SBD - Günlük rapor (2018-09-28) 0.381 16.1 trdaily #tr etiketi ve trend etiketler içerisindeki durumu (2018-09-27) 0.365 15.3 trdaily STEEM ve SBD - Günlük rapor (2018-09-29) crypto-econom1st reward delay [min] author title 1.902 27.1 beer32 บุฟเฟ่ต์ ซีฟู๊ด ปิ้งย่าง 0.138 15.8 futuremind SBD’s Are Back. 0.070 14.0 msearles Interesting piece! jlordc reward delay [min] author title 0.307 60.5 culgin Facebook Security Breach and More Thoughts on HF20 0.152 14.3 filotasriza3 I am Leaving For The Weekend &amp; Happy HF20 :P 0.103 302.7 ascheriit Seto no Hanayome: Timeless Comedy abh12345 reward delay [min] author title 0.312 11.1 tobixen Stockholm: Norrström, Söderström and Slussen 0.293 11.2 taskmaster4450 Connecting The Dots: Resource Credits Will Make STEEM A Lot More Valuable 0.230 13.8 sniffnscurry SNIFF &amp; SCURRY POSTCARD: GONE SURFING! holger80 reward delay [min] author title 0.226 12.4 josephsavage My thoughts on HF20, RCs, SMTs, and the future of Steem 0.074 31.8 cakemonster STEEM MONSTERS: The Cyclops Is Between A Rock and A Hard Place! 0.065 831.6 gigatoride SteemRadar: A radar that will never miss a bit in Steem blockchain. emrebeyler reward delay [min] author title 0.129 195.0 gigatoride SteemRadar: A radar that will never miss a bit in Steem blockchain. 0.062 24.1 muratkbesiroglu Traditional Miniature Art 0.048 17.6 miti ICO: come individuare una truffa. good-karma reward delay [min] author title 0.328 1510.3 yellowcard Camera comparison ~ vivo v11 pro vs oppo f9 pro 0.128 10.4 esteemapp.rus Наш руководитель продуктов eSteem 0.091 202.3 swf Autumn marathon on Mount Petros: part three (top and descent). grzyb77 reward delay [min] author title 0.116 24.2 foodini  APARTAMENT NA WAKACJE ZA 800 ZŁ MIESIĘCZNIE? POZNAJ 5 PORAD! 0.105 24.1 franino Jak Napoleon Bonaparte zdradził swoją ojczyznę…Korsykę. 0.082 24.2 andzi76 Kalendarium Muzyczne - 30 września cryptoyzzy reward delay [min] author title 0.113 23.2 crunchymomqc Etsy fait au Québec - Que fais-je de mes journées ? 0.078 24.2 cryptogainsfr Airdrops update #39 0.061 18.2 ancolie Perdu en forêt ? aneukpineung78 reward delay [min] author title 0.264 6.9 abh12345 First Post Following HF 20… Welcome back! 0.141 20.1 xawi Sunday Binge in @xawi’s Kitchen‍ Fruit trifle custard and jelly 0.071 20.1 ifeoluwa88 HOW TO STYLE MIDI SKIRT If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 13 - STEEM prizes available!’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-13-steem-prizes-available/"},{"title":"Receive desktop notifications for every played steem monsters match","text":"Currently test battles for steemmonsters are running. When a player wants to battle an opponent, a custom_json with id = test-sm_find_match is broadcasted. When an other player also broadcasts this custom_json, both players are broadcasting a custom_json with ìd=test-sm_team_reveal with the deck cards. Battling when nobody is around is frustrating. So knowing when other people are actively playing prevents waiting. Knowing which player are currently playing helps also, developing a strategy for the building the best deck. Custom_json notifierThe following script streams the head blocks of the steem blockchain and will create a desktop notification everytime a custom_json withtest-sm_find_match or a test-sm_team_reveal is broadcasted. The script will also notice when a player has changed its deck. 1pip install beem For windows:1pip install win10toast and for mac:1pip install pync It should work out of the box for linux (notify-send must be available). Store the script as sm_custom_json_notifier.py123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172from beem.blockchain import Blockchainfrom beem.nodelist import NodeListfrom beem import Steemimport jsonimport osimport platformimport subprocessfrom time import sleepapp_name = &apos;sm-notifier&apos;is_mac = platform.system().lower() == &apos;darwin&apos;is_win = platform.system().lower() == &apos;windows&apos;if is_mac: from pync import notify as mac_notifyif is_win: from win10toast import ToastNotifier toaster = ToastNotifier()def notify(msg, link=None): &quot;&quot;&quot;Platform agnostic notifier&quot;&quot;&quot; if is_mac: mac_notify(&quot;&quot;, title=msg, open=link) elif is_win: toaster.show_toast(app_name, msg) else: subprocess.run([&apos;notify-send&apos;, app_name, msg])if __name__ == &quot;__main__&quot;: max_batch_size = 50 threading = False wss = False https = True normal = False appbase = True last_deck = {} nodes = NodeList() nodes.update_nodes() node_list = nodes.get_nodes(normal=normal, appbase=appbase, wss=wss, https=https) stm = Steem(node=node_list, num_retries=5, call_num_retries=3, timeout=15) b = Blockchain(steem_instance=stm, mode=&quot;head&quot;) find_match_id = &quot;test-sm_find_match&quot; reveal_match_id = &quot;test-sm_team_reveal&quot; cnt = 0 for op in b.stream(opNames=[&quot;custom_json&quot;], threading=threading, max_batch_size=max_batch_size): cnt += 1 if cnt % 20 == 0: print(&quot;streaming... (block %d)&quot; % (op[&quot;block_num&quot;])) if op[&quot;id&quot;] not in [find_match_id, reveal_match_id]: continue if op[&quot;id&quot;] == find_match_id: notify(&quot;%s - %s is searching for a match with %s&quot; % (str(op[&quot;timestamp&quot;]), op[&quot;required_posting_auths&quot;][0], op[&apos;json&apos;])) sleep(8) else: json_field = json.loads(op[&quot;json&quot;]) deck = [json_field[&quot;summoner&quot;]] + json_field[&quot;monsters&quot;] player = op[&quot;required_posting_auths&quot;][0] deck_changed = False if player in last_deck: if deck != last_deck[player]: deck_changed = True notify(&quot;%s - %s changed its deck and found someone for a match with summoner %s and %s&quot; % (str(op[&quot;timestamp&quot;]), op[&quot;required_posting_auths&quot;][0], json_field[&quot;summoner&quot;], str(json_field[&quot;monsters&quot;]))) last_deck[player] = deck if not deck_changed: notify(&quot;%s - %s found someone for a match with summoner %s and %s&quot; % (str(op[&quot;timestamp&quot;]), op[&quot;required_posting_auths&quot;][0], json_field[&quot;summoner&quot;], str(json_field[&quot;monsters&quot;]))) sleep(8) Run the the script:1python sm_custom_json_notifier.py and notification should now be displayed whenever a match is played: Edit:I changed the notification text when a player has changed its deck. This page is synchronized from the post: ‘Receive desktop notifications for every played steem monsters match’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/receive-desktop-notifications-for-every-played-steem-monsters-match/"},{"title":"update for beem - adding claim account creation to beempy and support for whaleshares","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 502 unit tests and a coverage of 72 %. The current version is 0.20.7.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592V The newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New Featuresclaim account and create claim account added to beempyA new command for claim accounts was added to beempy:beempy claimaccount &lt;creator&gt;where &lt;creator&gt; is the account name which pays for the account claiming with RC. When --fee is set to --fee 3, the account creation fee is paid with STEEM instead of being changed with RCs. The parameter --number or -n can be set to claim more than 1 account. create a claimed accountbeempy newaccount -a &lt;creator&gt; &lt;newaccountname&gt; was adapted to HF20. When --create-claimed-account&apos; is set, a subsidized account with name &lt;newaccountname&gt; is created:1beempy newaccount -a &lt;creator&gt; --create-claimed-account &lt;newaccountname&gt; creates a Whaleshares is supportedDifferent steem blockchain with a different number of operations are supportet now. At the moment, only the operationids for the steem chain and for the whaleshares chain are stored in beembase/operattionsids.py. As the network prefix is now set in the init function of Signed_transaction and Operation, the correct operation-ids table can be loaded. A wrong operation id prevents an operation from being successfully broadcasted. 12node = [&quot;wss://whaleshares.io/ws&quot;, &quot;https://rpc.wls.services/&quot;]wls = Steem(node=node) beem will always fully support steem, supporting of other steem-based networks is only done when the functionality for interacting with steem is not disturbed. Supporting other networks will help to prevent that several beem forks are being created and will help that beem itself is further developed and improved. Better testnet and 3rd party chain supportAll “STEEM”, “SBD” and “VESTS” strings are replaced by steem.steem_symbol, steem.sbd_symbol and steem.vests_symbol properties which adapt to the connected network thanks to @crokkon (utopian-io post). I replaced also all fixed “STEEM”, “SBD” and “VESTS” strings in beempy. For networks which do not have a SBD currency as Whaleshares, the sbd_symbol is replaced by the steem_symbol:123456789@propertydef sbd_symbol(self): &quot;&quot;&quot; get the current chains symbol for SBD (e.g. &quot;TBD&quot; on testnet) &quot;&quot;&quot; # some networks (e.g. whaleshares) do not have SBD try: symbol = self._get_asset_symbol(0) except KeyError: symbol = self._get_asset_symbol(1) return symbol Balances in the account class depend now on the number of available symbols:12345acc2.balances{&apos;available&apos;: [0.000 STEEM, 0.098 SBD, 10152.045284 VESTS], &apos;rewards&apos;: [0.000 STEEM, 0.000 SBD, 0.000000 VESTS], &apos;savings&apos;: [0.000 STEEM, 0.000 SBD], &apos;total&apos;: [0.000 STEEM, 0.098 SBD, 10152.045284 VESTS]} becomes12345acc.balances{&apos;available&apos;: [0.000 WLS, 0.009999 VESTS], &apos;rewards&apos;: [0.000 WLS, 0.000000 VESTS], &apos;savings&apos;: [], &apos;total&apos;: [0.000 WLS, 0.009999 VESTS]} on whaleshares.io. Commit historyAll constant STEEM and SBD strings inside beempy are replaced by steem.steem_symbol steem.sbd_symbol properties commit f2e47ecFix prefix parameter for signedtransaction init function and improve steem.refresh_data() commit f829f36 Fix test_block unittest Adapt Changelog for next release Small improvements commit be1452e Add create_claimed_account to beempy and add correct operationids for WLS commit 1a2e229 Add claimaccount to beempy and some improvements for steem.sbd_symbol commit b51f84d Fix typo and improved handling of symbols in comment commit d0abdfc WLS prefix fixed and next version prepared commit d23629b Fix unit tests and skip not working tests on testnet commit 3e5965a Fix timestamp commit de9c67e Fix get_effective_vesting_shares for python 2.7 commit 4fbdab1 Fix unit tests commit 9c42b2c Several improvements and fixes commit 362eea7Account some code improvementsGraphenerpc small improvement in chain detectionSteem replace_steemit_by_steem option removed from get_config witness_update fixedComment Fix docuchain Waleshares addedUnit test unit tests fixed Fix unit test for python2.7 commit 82e438f Fix unit tests for new amount dict format in test_transactions commit bfb1254 Prepare next release commit 433451f add claim_account RC calculation fix Bytes type Improve testnet example test_types improved This page is synchronized from the post: ‘update for beem - adding claim account creation to beempy and support for whaleshares’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-adding-claim-account-creation-to-beempy-and-support-for-whaleshares/"},{"title":"Get a list of the most played deck of the running steemmonsters test tournament","text":"Since 4 hours a new test tournament is running on the steemmonsters test server. This time the mana limit is set to 15. Script for receiving the last used decks At first all cards are fetched from https://steemmonsters.com/cards/get_details Then all custom_json from the last 4 hours are streamed The cards for all test-sm_team_reveal ops are stored The different decks are counted and printed into a table1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677from beem.blockchain import Blockchainfrom beem.nodelist import NodeListfrom beem import Steemimport jsonfrom datetime import date, datetime, timedeltaimport requestsimport logginglog = logging.getLogger(__name__)logging.basicConfig(level=logging.INFO)if __name__ == &quot;__main__&quot;: response = requests.get(&quot;https://steemmonsters.com/cards/get_details&quot;) cards = {} for r in response.json(): cards[r[&quot;id&quot;]] = r max_batch_size = 50 threading = False wss = False https = True normal = False appbase = True nodes = NodeList() nodes.update_nodes() node_list = nodes.get_nodes(normal=normal, appbase=appbase, wss=wss, https=https) stm = Steem(node=node_list, num_retries=5, call_num_retries=3, timeout=15) b = Blockchain(steem_instance=stm) deck_stats = {} find_match_id = &quot;test-sm_find_match&quot; reveal_match_id = &quot;test-sm_team_reveal&quot; cnt = 0 start_block = b.get_current_block_num() - int(20 * 60 * 4) stop_block = b.get_current_block_num() find_match_cnt = 0 for op in b.stream(start=start_block, stop=stop_block, opNames=[&quot;custom_json&quot;], threading=threading, max_batch_size=max_batch_size): cnt += 1 if cnt % 200 == 0: print(&quot;streaming... (block %d)&quot; % (op[&quot;block_num&quot;])) if op[&quot;id&quot;] not in [find_match_id, reveal_match_id]: continue if op[&quot;id&quot;] == find_match_id: find_match_cnt += 1 else: json_field = json.loads(op[&quot;json&quot;]) deck = [json_field[&quot;summoner&quot;]] + json_field[&quot;monsters&quot;] deck_ids = [] deck_names = [] id_str = &quot;&quot; for c in deck: card_id_str = c.split(&apos;-&apos;)[1] id_str += card_id_str deck_ids.append(int(card_id_str)) deck_names.append(cards[int(card_id_str)][&quot;name&quot;]) if id_str in deck_stats: deck_stats[id_str][&quot;n&quot;] += 1 else: deck_stats[id_str] = {&quot;n&quot;: 1, &quot;deck_id&quot;: deck_ids, &quot;deck_name&quot;: deck_names} print(&quot;%d different decks have been used&quot; % len(deck_stats)) print(&quot;%d matches have been played&quot; % (find_match_cnt/2)) deck_list = [] for d in deck_stats: deck_list.append(deck_stats[d]) print(&quot;| N | summoner | monster |&quot;) print(&quot;| --- | --- | --- |&quot;) sorted_deck_stats = sorted(deck_list, key=lambda x: x[&quot;n&quot;], reverse=True) for deck in sorted_deck_stats: if deck[&quot;n&quot;] &lt; 5: continue print(&quot;| %d | %s | %s |&quot; % (deck[&quot;n&quot;], deck[&quot;deck_name&quot;][0], &apos;, &apos;.join(deck[&quot;deck_name&quot;][1:]))) Results176 different decks have been used.336 matches have been played. N summoner monster 130 Kiara Lightbringer Cocatrice, Angel of Light, Feral Spirit, Elven Cutthroat 61 Kiara Lightbringer Cocatrice, Feral Spirit, Angel of Light, Elven Cutthroat 55 Zintar Mortalis Haunted Spirit, Undead Priest, Skeleton Assassin, Haunted Spider 29 Jarlax the Undead Cocatrice, Undead Priest, Twisted Jester, Haunted Spider, Skeleton Assassin 14 Malric Inferno Cerberus, Goblin Shaman, Kobold Miner, Fire Beetle 13 Selenia Sky Gold Dragon, Screaming Banshee, Cocatrice 11 Zintar Mortalis Haunted Spirit, Screaming Banshee, Haunted Spider, Undead Priest 10 Jarlax the Undead Raging Impaler, Undead Priest, Skeleton Assassin, Cocatrice 10 Jarlax the Undead Cocatrice, Skeleton Assassin, Undead Priest, Haunted Spider, Animated Corpse 10 Jarlax the Undead Cocatrice, Undead Priest, Skeleton Assassin, Enchanted Pixie, Elven Cutthroat 8 Xia Seachan Naga Warrior, Crustacean King, Water Elemental 8 Zintar Mortalis Spineback Wolf, Undead Priest, Skeleton Assassin, Cocatrice 7 Zintar Mortalis Skeleton Assassin, Undead Priest, Screaming Banshee, Twisted Jester 7 Zintar Mortalis Cocatrice, Skeleton Assassin, Screaming Banshee, Haunted Spider, Undead Priest 6 Jarlax the Undead Haunted Spirit, Haunted Spider, Undead Priest, Twisted Jester 6 Jarlax the Undead Cocatrice, Skeleton Assassin, Undead Priest, Haunted Spider, Twisted Jester 6 Selenia Sky Naga Warrior, Lightning Dragon 6 Tyrus Paladium Divine Healer, Feral Spirit, Centaur, Cocatrice 5 Xia Seachan Naga Warrior, Crustacean King, Sabre Shark, Cocatrice 5 Alric Stormbringer Spineback Turtle, Crustacean King, Pirate Captain, Cocatrice 5 Jarlax the Undead Haunted Spirit, Skeleton Assassin, Undead Priest, Elven Cutthroat 5 Lyanna Natura Minotaur Warrior, Earth Elemental, Swamp Thing, Enchanted Pixie 5 Selenia Sky Magi of the Forest, Swamp Thing, Earth Elemental, Elven Cutthroat ConclusionIs there an API to get the results of the played matches? This would be very interesting. At the moment, there are only two decks which were mostly used. This may change, as probably not all good decks have been used yet by the players. Let’s see how this statistics changes, when more matches have been played. This page is synchronized from the post: ‘Get a list of the most played deck of the running steemmonsters test tournament’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/get-a-list-of-the-most-played-deck-of-the-running-steemmonsters-test-tournament/"},{"title":"Is it possible to disallow replies to a post?","text":"Each post/comment has a allow_replies parameter: As written in https://developers.steem.io/apidefinitions/#broadcast_ops_comment_options, the parameter cannot be set with a comment_options operation. After some digging, I found that the parameter was disabled on the 28 june 2016: https://github.com/steemit/steem/commit/5fcabd81b0f31862608533d2157e470f6db4e921.with the comment: Remove disable replies from comment_options_operation. Require 0 abs_rshares to set a max accepted payout. Added an extensions field to the op. I found no reason why this change was made. I think it should be reverted and allow_replies should be added as parameter to comment_options again. I opened an issue regarding this topic: https://github.com/steemit/steem/issues/3059. Reply to the issue: This page is synchronized from the post: ‘Is it possible to disallow replies to a post?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/is-it-possible-to-disallow-replies-to-a-post/"},{"title":"code review of changes since 0.20.5 - resource delegations pool  objects were added","text":"This post is part of my witness duties to review all code changes made in https://github.com/steemit/steem/. I was checking the changes since 0.20.5, they can be found here: https://github.com/steemit/steem/compare/v0.20.5...master Assuring that mana_used is above std::numeric_limits&lt; uint64_t &gt;::min()That’s a useful and necessary change. They assure that used_mana will not jump to an unexpected value when used_mana goes below the numerical minimum. Resource pool parameters are changedThe budget parameter of all pool is decreased and RC cost raise is prevented by changing a_point_num and a_point_denom. Removing of the old bandwidth codeThe old bandwidth code is removed. witness_api_plugin is removed from the condenser_api build instructions #include is removed from condenser_api.cpp get_account_bandwidth is removed average_block_size, current_reserve_ratio , max_virtual_bandwidth is removed average_bandwidth, lifetime_bandwidth, last_bandwidth_update, average_market_bandwidth, lifetime_market_bandwidth, last_market_bandwidth_update is removed from the account object witness_api files from libraries/plugins/apis/witness_api were removed RC delegation pool objects and operation were addedRC delegation pool objects and operation were added to the current master. This is the first step in implementing RC delegation pools. New objects rc_delegation_pool_object_type, rc_indel_edge_object_type, rc_outdel_drc_edge_object_type New class rc_delegation_pool_object Represents a delegation pool.A new class to handle each rc delegation pool was added. Parameter are: id_type id; account_name_type account; steem::chain::util::manabar rc_pool_manabar; New class rc_indel_edge_object Represents a delegation from a user to a pool.Parameter: id_type id; account_name_type from_account; account_name_type to_pool; share_type amount; New class rc_outdel_drc_edge_object12345678910111213* Represents a delegation from a pool to a user based on delegated resource credits (DRC).** In the case of a pool that is not under heavy load, DRC:RC has a 1:1 exchange rate.** However, if the pool drops below STEEM_RC_DRC_FLOAT_LEVEL, DRC:RC exchange rate starts* to rise according to `f(x) = 1/(a+b*x)` where `x` is the pool level, and coefficients `a`,* `b` are set such that `f(STEEM_RC_DRC_FLOAT_LEVEL) = 1` and `f(0) = STEEM_RC_MAX_DRC_RATE`.** This ensures the limited RC of oversubscribed pools under heavy load are* shared &quot;fairly&quot; among their users proportionally to DRC. This logic* provides a smooth transition between the &quot;fiat regime&quot; (i.e. DRC represent* a direct allocation of RC) and the &quot;proportional regime&quot; (i.e. DRC represent* the fraction of RC that the user is allowed). Parameter: id_type id; account_name_type from_pool; account_name_type to_account; steem::chain::util::manabar drc_manabar; int64_t drc_max_mana = 0; New container to store the state and operation of the RC pool delegation has been addedNew operation delegate_to_pool_operation was addedThis operation can be used to delegate RC from an account to a pool. Operation parameter: account_name_type from_account; account_name_type to_pool; share_type amount;New operation delegate_drc_from_pool_operation was addedThis operation can be used to allow account use RC from a pool. The operation has to be signed from the pool owner. Operation parameter: account_name_type from_pool; account_name_type to_account; int64_t mana_change = 0; int64_t drc_max_mana = 0; Changes in the RC cost calculationThe most important change is that resource_execution_time are now used for resource_count calculation. This is done by adding the missing1result.resource_count[ resource_execution_time ] += vtor.execution_time_count; exec_time for custom_json are made a lot cheaperThe calculation time custom_operation_exec_time has been reduced from 228000 to 11400.Rc costs for a follow remain high:1exec_time *= EXEC_FOLLOW_CUSTOM_OP_SCALE; RC costs for a vote is reduced by factor of 19 comment_vote_object_base_size is changed from 47 *STATE_BYTES_SCALE to 47 *STATE_COMMENT_VOTE_BYTE_SIZE RC changes - New Maximum negative mana added define STEEM_RC_MAX_NEGATIVE_PERCENT 166 int64_t min_mana = -1 * ( STEEM_RC_MAX_NEGATIVE_PERCENT * mbparams.max_mana ) / STEEM_100_PERCENT; Code cleanup/improvements Some code cleanup/improvements regarding handling of the first block Some code cleanup regarding the removed modifier for account creation SMT unit test were added ConclusionThe code changes contain some uncritical code clean up regarding old bandwidth system is removed handling of the first block removed modifier for account creation The most important change is the adding of objects for resource pool delegations . This is the first necessary step in implementing a fully working pool delegation. New objects, container and operation have been added to implement this feature. It will be possible to use delegate_to_pool_operation for creating a new RC pool. delegate_drc_from_pool_operation can be used to allow other accounts using the pool. The second most important change is the enabling of resource_execution_time for RC costs. The budget of all pools have been increased to compensate this. The cost of a vote has made 19x cheaper, custom_json operation was also made 20x cheaper (except of follow custom json operation). Some code improvements were made: New maximum negative mana have been defined (166 % of max_mana) Check added to assure that mana_used is above a defined minimum value The changes are looking promising to me. This page is synchronized from the post: ‘code review of changes since 0.20.5 - resource delegations pool objects were added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/code-review-of-changes-since-0-20-5-resource-pool-delegations-were-added/"},{"title":"How to encrypt and decrypt memos with beem","text":"Sending a transfer with an encrypted memoWhen the memo key and active key of the sender is know to beem and a # is placed before the memo text, a transfer with an encrypted memo can be sent out. The following script sends a encrypted memo from beembot to holger80. All scripts in this post need beem to be installed (pip install beem).1234567891011121314#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountimport getpassif __name__ == &quot;__main__&quot;: account = &quot;beembot&quot; active_wif = getpass.getpass(prompt=&apos;Enter the active key of %s:&apos; % account) memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % account) stm = Steem(node=&quot;https://api.steemit.com&quot;, keys=[memo_wif, active_wif]) account = Account(account, steem_instance=stm) account.transfer(&quot;holger80&quot;, 0.001, &quot;SBD&quot;, memo=&quot;#This is a test&quot;) Sending was sucessfull: Decrypting a memoLets now try to decrypt the memo. This time we need the memo key of the receiver (memo key of holger80 in the example). We use the Memo object from beem12345678910111213141516171819202122#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountfrom beem.memo import Memoimport getpassif __name__ == &quot;__main__&quot;: account = &quot;holger80&quot; memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % account) stm = Steem(keys=[memo_wif]) account = Account(account, steem_instance=stm) memo = Memo(steem_instance=stm) last_transfer = None for h in account.history_reverse(only_ops=[&quot;transfer&quot;]): if last_transfer is None and len(h[&quot;memo&quot;]) &gt; 2 and h[&quot;memo&quot;][0] == &apos;#&apos;: last_transfer = h break print(last_transfer) decrypted_memo = memo.decrypt(last_transfer) print(&quot;Transfer from %s with memo: %s&quot; % (last_transfer[&quot;from&quot;], decrypted_memo)) The output of the script is:1Transfer from beembot with memo: This is a test Encrypting a textIt is also possible to encrypt a text with the memo key using the Memo class of beem. The following script needs the memo key of the holger80 account and ecrypts the memo_text. The encrypted text can only be read with the memo key of account beembot. For encryption, the encrypt function is used. The encrypted text is inside the message field of the returned dict-object.123456789101112131415161718192021#!/usr/bin/pythonfrom beem import Steemfrom beem.memo import Memoimport getpassif __name__ == &quot;__main__&quot;: from_account = &quot;holger80&quot; to_account = &quot;beembot&quot; memo_text = &quot;test&quot; if memo_text[0] == &apos;#&apos;: memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % to_account) else: memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % from_account) stm = Steem(keys=[memo_wif]) memo = Memo(from_account=from_account, to_account=to_account, steem_instance=stm) if memo_text[0] == &apos;#&apos;: print(memo.decrypt(memo_text)) else: print(memo.encrypt(memo_text)[&quot;message&quot;]) The encrypted text is:1#DTpKcbxWqsETCRfjYGk9feERFa5nVBF8FaHfWPwUjyHBTdwW8WCPrVPATsAm7WwF6WZ9XaVAutUVZLsGEpkLfh7d4RNQhFBryKUzKGCqGUTp7QKmu2Qk6qKqWB3aTfetp Every run creates a different string:1#DTpKcbxWqsETCRfjYGk9feERFa5nVBF8FaHfWPwUjyHBTdwW8WCPrVPATsAm7WwF6WZ9XaVAutUVZLsGEpkLfh7d4PXbUsoGhDzxfDe6q4E72rfsiKXFHQhPzjAJsQpne 3 run:1#DTpKcbxWqsETCRfjYGk9feERFa5nVBF8FaHfWPwUjyHBTdwW8WCPrVPATsAm7WwF6WZ9XaVAutUVZLsGEpkLfh7d4KDdkySsJHTNULByLkK6yWrmoZQWBgV8yubm2TjG4 Decrypting a textDecrypting is also possible, when the memo key of the receiver is known to beem. The following script decrypt the encrypted text using the memo key of account beembot. This time the decrypt function is used.123456789101112131415161718192021#!/usr/bin/pythonfrom beem import Steemfrom beem.memo import Memoimport getpassif __name__ == &quot;__main__&quot;: from_account = &quot;holger80&quot; to_account = &quot;beembot&quot; memo_text = &quot;#DTpKcbxWqsETCRfjYGk9feERFa5nVBF8FaHfWPwUjyHBTdwW8WCPrVPATsAm7WwF6WZ9XaVAutUVZLsGEpkLfh7d4RNQhFBryKUzKGCqGUTp7QKmu2Qk6qKqWB3aTfetp&quot; if memo_text[0] == &apos;#&apos;: memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % to_account) else: memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % from_account) stm = Steem(keys=[memo_wif]) memo = Memo(from_account=from_account, to_account=to_account, steem_instance=stm) if memo_text[0] == &apos;#&apos;: print(memo.decrypt(memo_text)) else: print(memo.encrypt(memo_text)[&quot;message&quot;]) All three encrypted memo texts give back the following string:1test This page is synchronized from the post: ‘How to encrypt and decrypt memos with beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-encrypt-and-decrypt-memos-with-beem/"},{"title":"holger80`s Curation League - week 14 - STEEM prizes available!","text":"sourceYou can read more about the start of my new Curation League.59 accounts wanted to participate, thanks and welcome to my Curation League. There are 13 new participants from last week and nobody wanted to be removed. Thank you all for participating! The curation rewards of the last seven days ending by 14.10.2018 6:00:00 UTC are included in this analysis. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 14Gratulations to reazuliqbal for winning this round! 13.65 is a really great score! curbot for the second place! amosbastian for the third place! All did a great job in selecting posts for curation! PricesThere are some prices this week! curbot did not receive a price, as this is my account. Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). sum_weight is scaled by the voting power (Two 100% votes at a voting power of 50% are equal in terms of rshares to one 100% vote at a voting power of 100%). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. reazuliqbal 1760.2 6810 1.70 13.65 13.65 2. curbot 1004.0 6407 4.66 13.14 13.14 3. amosbastian 2392.7 6684 7.20 12.51 12.51 4. sourovafrin 1084.9 6658 78.67 11.02 11.02 5. algo.coder 1102.9 6842 66.89 8.63 8.63 6. dedicatedguy 4604.5 6782 17.11 7.20 7.20 7. pataty69 1009.1 6949 24.73 7.11 7.11 8. mys 3032.5 3758 0.46 6.87 6.87 9. darkassassin 57.5 1906 23.14 6.59 6.59 10. rafalski 1384.3 6653 53.48 6.30 6.30 11. cryptoandcoffee 994.8 6573 30.53 6.06 6.06 12. the.nervi 34.5 3946 89.03 5.22 5.22 13. zaku 34303.9 6107 4.80 4.42 4.42 14. jacekw 1020.5 6894 24.92 4.40 4.40 15. holger80 4198.6 5236 28.53 4.12 4.12 16. grzyb77 237.8 6048 36.35 4.09 4.09 17. erikklok 382.8 6757 68.72 3.92 3.92 18. nervi 1191.4 7458 37.81 3.73 3.51 19. crypto-econom1st 67.6 2353 85.21 3.09 3.09 20. the.foodini 1274.5 5976 9.34 3.02 3.02 21. diosbot 2491.5 6136 40.10 3.00 3.00 22. jpphotography 1454.8 6667 27.23 2.98 2.98 23. doughtaker 825.7 6589 74.33 2.82 2.82 24. jlordc 1149.4 6970 42.81 2.79 2.79 25. katamori 196.7 6343 77.43 2.77 2.77 26. fbslo 8092.5 7129 1.15 2.79 2.74 27. flugschwein 1283.7 6286 82.83 2.71 2.71 28. cryptoyzzy 131.0 6062 83.67 2.51 2.51 29. maxpatternman 777.6 6801 87.09 2.46 2.46 30. espoem 3746.3 4776 7.01 2.45 2.45 31. abh12345 21882.8 5358 4.47 2.39 2.39 32. pomocnik 16.6 989 90.68 2.35 2.35 33. codingdefined 2170.7 7169 8.92 2.37 2.32 34. rivalzzz 1500.6 6941 42.74 2.21 2.21 35. fervi 1494.5 5621 27.33 2.10 2.10 36. rose98734 29.7 11764 471.19 3.50 2.08 37. blanchy 1040.9 5793 45.36 2.05 2.05 38. ecoinstant 1181.4 5468 30.20 2.02 2.02 39. yasu24 2258.8 5353 14.09 1.98 1.98 40. yailinbel 45.4 956 96.78 1.98 1.98 41. ajayyy 225.0 5894 90.41 1.74 1.74 42. good-karma 197660.3 7113 2.88 1.76 1.73 43. isnochys 1455.6 5052 9.26 1.73 1.73 44. emrebeyler 42986.1 6888 31.64 1.66 1.66 45. aneukpineung78 167.2 4072 25.81 1.60 1.60 46. sco 2047.3 5722 19.93 1.47 1.47 47. celfmagazine 5186.0 4965 98.08 1.44 1.44 48. pornbooster 11.5 814 85.50 1.39 1.39 49. jacekw.dev 56.2 1307 84.50 1.33 1.33 50. reggaemuffin 263418.0 6104 21.18 1.19 1.19 51. annaburska 1250.2 5556 91.65 1.08 1.08 52. isarmoewe 1192.6 5631 21.81 1.04 1.04 53. schlafhacking 2507.6 3097 87.29 0.59 0.59 54. coretan.aksara 68.4 1217 94.34 0.47 0.47 55. dexterdev 211.2 2538 66.98 0.39 0.39 56. aggamun 17.0 239 79.47 0.21 0.21 57. synergysteem 153.6 395 99.33 0.05 0.05 58. hispeedimagins 258.4 49 49.53 0.00 0.00 59. stevescoins -1613.9 6970 12.67 0 0 Top 25 curationThis table shows the best ten curation rewards. The rewards are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. Keep in mind that the reward is normalized to a 100% vote at full vote power. reward voter delay author title 3.758 crypto-econom1st 27.2 beer32 อาหารทะเลรสแซ่บกับบรรยากาศแพกลางทะเล 2.266 curbot 11.8 chrisdyer New art for a new week/month! 1.941 curbot 7.0 tobias-g Introducing Contest Hero 0.1.9 1.257 curbot 10.1 eco-alex @ecotrain Question of the Week Tie-up Post: What rituals do you have, and why are they important to you? 1.255 curbot 6.9 mightypanda Steem Curator - Utopian Moderator Comment Curation 1.254 yailinbel 14.3 eltrompetista #Reto Top10 @RadioSteemit - La canción más pegadiza We Will Rock You 1.198 crypto-econom1st 27.6 beer32 Little Hideout ร้านคาเฟ่นั่งชิล 1.114 curbot 7.3 ahmadmanga Procrastination Simulator: Now an Open Source Project 1.109 mys 12.9 krasnalek Bunt człowieka w imię racji rozumu. 1.094 amosbastian 44.3 rahielk Introducing Archiveror: The Archiving Companion 1.044 curbot 7.3 answerswithjoe How NASA Is Using Ancient Art To Find Alien Life Answers With Joe 1.032 curbot 7.2 magicmonk SteemFriends: Showing articles written by a user between 2 dates 1.008 curbot 6.9 anouk.nox Translating OpenCart English-Dutch #2 1.003 curbot 11.0 agmoore Do Men and Women Experience Sex Differently? 0.970 curbot 6.9 dalz My Journey with Actifit, September 2018 – App Info, Activities, Tokens, Earnings 0.948 curbot 11.0 dhavey “We Are All In The Gutter But Some Of Us Are Looking At The Stars” – Oscar Wilde 0.932 darkassassin 14.9 txmek My GYM journey begins tomorrow! Weekly progress report #1 0.887 curbot 5.2 drsensor GUC Desktop: Notes taking app for creating development updates seamlessly 0.881 curbot 10.1 munadikiehl Task Request : Logo Proposal to Merasteem 0.839 curbot 9.8 superoo7 Development Steem Web Wallet Working prototype done 0.838 curbot 9.8 reazuliqbal Steem HF20: Discounted Account Claim and Creation Tool 0.833 curbot 10.1 sambillingham Finally Network - Dashboard, Hashtag filtering, fixes &amp; more 0.829 curbot 7.3 altrosa Translating the Steem Whitepaper English-Dutch #7 0.822 darkassassin 14.9 todayornever AERGO PROJESİ - ANALİZ - TEKNİK İNCELEME - ( PROJENİN ÜSTÜNLÜĞÜ ) - TÜRKÇE ( TURKİSH ) 0.818 darkassassin 14.9 smithgold God Help palestine 0.814 curbot 8.3 jassennessaj The Launch of Millenial Wanderer Top 25 AuthorsThis table shows the post authors which led to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped reward vote count author avatar 2.495 23 zaku 2.479 20 sourovafrin 2.226 19 dinver 1.851 15 drsensor 1.753 38 jacekw 1.714 58 holger80 1.696 31 samuellmiller 1.600 33 cremisi 1.541 33 yasminafly 1.501 11 gooddream 1.432 4 eltrompetista 1.426 33 pinkspectre 1.426 13 haejin 1.421 25 z8teyb289qav9z 1.308 26 krasnalek 1.135 35 dedicatedguy 1.093 17 hiremani 1.078 15 mikehamm 1.065 17 the.foodini 1.064 22 acrywhif 1.061 13 beer32 1.031 12 ahmedess 1.002 8 razu788 0.997 17 navx 0.990 20 leurop Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100% at full vote power. Only posts are shown. reazuliqbal reward delay [min] author title 0.800 10.0 tobias-g Introducing Contest Hero [0.1.9] 0.725 10.2 rosatravels #6 What Metrics &amp; Standards Professionals Use To evaluate Translation Quality Part 1 0.598 15.6 rezoanulvibes 7 Useful Tips For A Job Interview curbot reward delay [min] author title 2.266 11.8 chrisdyer New art for a new week/month! 1.941 7.0 tobias-g Introducing Contest Hero [0.1.9] 1.257 10.1 eco-alex @ecotrain Question of the Week Tie-up Post: What rituals do you have, and why are they important to you? amosbastian reward delay [min] author title 1.094 44.3 rahielk Introducing Archiveror: The Archiving Companion 0.731 10.1 sweetone [Arabic Translation] [OpenCart project] [711 words] 0.646 10.2 twiningenious New logo for Pedalino sourovafrin reward delay [min] author title 0.644 14.1 zaku Daily Steemmonsters &amp; Reward Giveaway Contest : Day #1 0.506 13.2 dinver Swimming with hungry fish. 0.484 13.1 dinver Kebab anyone? algo.coder reward delay [min] author title 0.731 28.9 sakurasui GanesH・Indian Restaurant 0.485 27.9 elamental Earth Tribe Design Contest Update - 3 Days Left to Enter 0.354 13.8 bait002 Digitex Futures Stakeholders are protected with DGBB dedicatedguy reward delay [min] author title 0.419 31.2 porters Earth Deeds: From My Forest Home - Forest Friendly Family… 0.273 13.2 flauwy Animated Steem Monsters Introduction With The Crypto Dwarf 0.245 729.6 fproductions A NEW SELL SIGNAL ON TRXBTC (TRON / Bitcoin) pataty69 reward delay [min] author title 0.522 28.2 z8teyb289qav9z Current Cardano Price 0.418 17.4 discernente Finalmente meu poder de voto recarregou 0.403 28.1 z8teyb289qav9z Current Bitcoin Price mys reward delay [min] author title 1.109 12.9 krasnalek Bunt człowieka w imię racji rozumu. 0.619 1373.7 mrzinblack QUÁN BÀNH XÈO BÀ DƯỠNG - ĐÀ NẴNG 0.580 1196.2 danielvehe Wordpress y @steempress-io se unen en Caracas darkassassin reward delay [min] author title 0.932 14.9 txmek My GYM journey begins tomorrow! Weekly progress report [#1] 0.822 14.9 todayornever AERGO PROJESİ - ANALİZ - TEKNİK İNCELEME - ( PROJENİN ÜSTÜNLÜĞÜ ) - TÜRKÇE ( TURKİSH ) 0.818 14.9 smithgold God Help palestine rafalski reward delay [min] author title 0.364 9.2 the.foodini  Show me your food &amp; WIN STEEM! [FOODspedition] 0.342 351.5 hiremani Implementing QR and Barcode scanner and converting result to PDF in PDF CONVERTER Android App 0.297 9.2 the.foodini  Amazing dinner in a Chinese restaurant! Discover 6 traditional dishes! [TASTEEM CONTEST] cryptoandcoffee reward delay [min] author title 0.439 14.7 thedamus The Johnson Matthey Madness Continues — where’s @goldenarms!!!? 0.345 14.7 haejin The Descending Triangle: A Bearish Chart Pattern by Aksel Kibar, a Guest Analyst on BitcoinLive 0.345 14.6 haejin Healthcare Services Group (HCSG) Analysis the.nervi reward delay [min] author title 0.494 9.2 customuser Niebezpieczna podróż do rubieży Układu Słonecznego 0.420 13.7 ktl21 Bayern znalazł następcę Robbena!?♢Zlatan Ibrahimowić w Milanie?! ♢ 0.415 6.0 jo-hannes A to ci historia. Szarże polskiej kawalerii na niemieckie czołgi w wojnie obronnej. Prawda czy fałsz? zaku reward delay [min] author title 0.240 14.4 finprep Bitcoin News: 36% Of The Total Bitcoin In Circulation Lost And 23% Held By Speculators 0.230 14.3 finprep The Risk Of An ETF Driven Liquidity Crash 0.228 14.3 finprep Charles Schwab Client Cash Hits All Time Low As Retail Investors Flood The Market jacekw reward delay [min] author title 0.384 74.8 arka.noego Travatan - taki “Kret” tyle, że do oczu. 0.336 10.0 kocinka Hanami, the most beautiful and joyful time of the year 0.268 27.6 wojciechsiryk Czy w Korei Północnej raczkuje kapitalizm? holger80 reward delay [min] author title 0.283 24.9 snwolak Steemblr development update 11 - Post editing, syncing post deletion 0.246 242.6 drsensor GUC Desktop: Notes taking app for creating development updates seamlessly 0.243 13.8 superoo7 [Development] Steem Web Wallet Working prototype done grzyb77 reward delay [min] author title 0.387 15.2 krasnalek Bunt człowieka w imię racji rozumu. 0.382 15.2 maxofp2p [PL/ENG] MAXOFP2P LIVESTREAM 0.353 15.1 krasnalek Gang Świeżaków/Słodziaków jako spektakl medialny erikklok reward delay [min] author title 0.321 80.7 ahmedess French translation of OpenCart, Contribution N°5 (738 words) 0.259 12.9 hitmeasap How Much Would You PAY For A Passive Income? (A Small Yet 100% Passive Income). 0.249 394.4 tykee Improving Elmish contact app by adding time and last contacted, more contact, merge and location nervi reward delay [min] author title 0.747 21.3 wojciechsiryk Czy w Korei Północnej raczkuje kapitalizm? 0.589 8.2 krasnalek Gang Świeżaków/Słodziaków jako spektakl medialny 0.365 14.5 holger80 How to use the steem.vc testnet with beem crypto-econom1st reward delay [min] author title 3.758 27.2 beer32 อาหารทะเลรสแซ่บกับบรรยากาศแพกลางทะเล 1.198 27.6 beer32 Little Hideout ร้านคาเฟ่นั่งชิล 0.506 27.2 mdsamad Pictur of kater Sword the.foodini reward delay [min] author title 0.249 9.2 deathcross Slow Down, Tourist – Cathedral Gargoyles In Pain 0.235 12.8 gooddream Metroid Prime (game): Quite possibly the best Gamecube game 0.215 12.6 gooddream Eminem’s Kamikaze (album): Em shows that he is still the best diosbot reward delay [min] author title 0.243 15.6 wideoprezentacje Sapkowski Chce 60 MLN Złotych od CD Projekt RED Za Wiedźmina 0.215 15.8 jo-hannes A to ci historia. Szarże polskiej kawalerii na niemieckie czołgi w wojnie obronnej. Prawda czy fałsz? 0.176 16.0 krasnalek Gang Świeżaków/Słodziaków jako spektakl medialny jpphotography reward delay [min] author title 0.249 14.1 for91days Buenos Aires Series: The Metropolitan Cathedral 0.246 14.2 intrepidsurfer Dtube exclusive: Steem surf photo contest week 18. Everyone is welcome to participate. 0.240 14.2 for91days The Suspension Train at Düsseldorf’s Airport doughtaker reward delay [min] author title 0.278 646.8 hiremani Implementing QR and Barcode scanner and converting result to PDF in PDF CONVERTER Android App 0.245 1008.6 drsensor GUC Desktop: Notes taking app for creating development updates seamlessly 0.230 155.5 to-the-sun REMOVE PROJECTS AND ABORT PLAYING SONGS: a new feature for the open-source project The Amanuensis: Automated Songwriting and Recording jlordc reward delay [min] author title 0.239 14.9 xawi What is so attractive about you? 0.185 15.1 ifeoluwa88 TO MY DEAREST FATHER 0.141 15.2 ifeoluwa88 OPEN DOORS : FAVOURABLE OR NOT katamori reward delay [min] author title 0.247 10.6 thilah Comic: Knife song 0.189 44.0 snwolak Steemblr development update 11 - Post editing, syncing post deletion 0.185 20.8 miniature-tiger Block.ops - An Analysis Tool - All things votes, robustness, and self-validation. fbslo reward delay [min] author title 0.685 14.3 ruchit786 Khushi kapoor 0.635 8.9 danipolo What Will Make Your Hard-earned Cryptocurrency Safe From Scammers 0.606 17.3 kypo Photo by Kypo! flugschwein reward delay [min] author title 0.475 6.8 holger80 update for beem - adding RC costs calculation and witness_set_properties broadcasting 0.210 12.2 holm How I rock and rolled on my bicycle through some of the highest roads in Europe! (WARNING: Great rock music included) 0.135 10.7 sco The “plastic problem” of bioscience. cryptoyzzy reward delay [min] author title 0.382 24.2 cryptogainsfr Airdrops update #40 0.281 116.3 ancolie Le JOGGING l’automne … Vivifiant ! 0.218 14.2 cryptogainsfr Dacxi : recevez 2000 DAC en bonus et un e-book gratuit maxpatternman reward delay [min] author title 0.366 14.4 espoem Hacktoberfest #1: Beem minor fix 0.234 14.3 holger80 update for beem - adding RC costs calculation and witness_set_properties broadcasting 0.141 14.2 nissla #MittwochsQuickie - Thema: Weg espoem reward delay [min] author title 0.574 166.8 gmaktub Zoku Iced Coffee Maker - Turn the coffee or hot tea into a rich cold drink 0.490 39.9 drsensor GUC Desktop: Notes taking app for creating development updates seamlessly 0.405 34.5 tobias-g [SteemHunt] Add What’s new section abh12345 reward delay [min] author title 0.286 11.4 pennsif SPECIAL SHOW : The What Makes A Good Radio Show Radio Show - Thursday 4 October 0.208 12.1 actifit Announcing Actifit V2 Reward System: Activity, content, engagement, user ranks, delegation, moderation and more 0.207 14.7 nomadicsoul Nervous To Talk To People At Steemfest? pomocnik reward delay [min] author title 0.542 7.7 kamyk Muzyka, moja pierwsza zajawka. 0.398 9.6 veggie-sloth Leniwiec nasłuchuje (13): Opowieść o Eskimosach 0.324 4.7 jacekw Jak wyobrażam sobie rozwój sztucznej inteligencji? codingdefined reward delay [min] author title 0.488 71.0 drsensor GUC Desktop: Notes taking app for creating development updates seamlessly 0.436 86.3 princekelly Air-Clinic The first decentralized health care platform on the Steem Blockchain (Episode 1) 0.341 99.2 steemtek Embark, an excellent help when creating your own Dapps rivalzzz reward delay [min] author title 0.156 8.4 jaki01 Internet censorship in Indonesia. / Internetzensur in Indonesien. 0.140 20.6 patrickaleach SteemFest here I come Good morning Steemit Reintroduction 0.131 14.2 louis88 My Road to Steemfest³: After hours and Free time fervi reward delay [min] author title 0.233 339.2 okcydentalista Stanisław Michalkiewicz – Dobry “zły” liberalizm. Recenzja 0.232 360.0 basementdisco Stacja Dyneburg #2: Prawa zachowania polskości. 0.195 406.2 krasnalek Bunt człowieka w imię racji rozumu. rose98734 reward delay [min] author title 0.014 2575.9 indigoocean HF20 - What is Enough? blanchy reward delay [min] author title 0.256 18.7 mistywind After the Wikipedia of Knowledge, here is a Wikipedia of human genetic diversity 0.180 15.1 haejin STLMT Gold/Silver Sector (XAG) Analysis 0.179 15.0 haejin Penn National Gaming (PENN) Analysis ecoinstant reward delay [min] author title 0.192 7.2 viking-ventures Brighid’s Blood - Chapter 3 - A’mara Books 0.181 7.7 rudyardcatling Introducing : het leven zoals het is 0.177 7.2 rudyardcatling okay then … yasu24 reward delay [min] author title 0.795 11.1 hiradate 素材は大地の恵み、自然素材にこだわるパン屋 ブーランジェリー ラ・テール 0.455 10.7 super-em Lavender Sachet 0.331 62.4 fkazuja [EN][JA] Green Chain #2 (3/11) yailinbel reward delay [min] author title 1.254 14.3 eltrompetista #Reto Top10 @RadioSteemit - La canción más pegadiza We Will Rock You 0.188 50.1 coliraver diligenciando 0.137 44.1 sashas CHALLENGE GET TO KNOW ME ajayyy reward delay [min] author title 0.549 108.5 rahielk Introducing Archiveror: The Archiving Companion 0.113 195.9 clayjohn Godot Documentation: Custom Post-Processing 0.103 18.5 remotediscovery US is Finally Standing up to China good-karma reward delay [min] author title 0.215 14.8 esteemapp.rus Мобильная версия eSteem 2.0 (Анонс) 0.214 14.5 esteemapp.rus Дайджест eSteem: новости сентября, 2018 0.210 52.0 nurulfitri Pelestarian Cagar Budaya Indonesia isnochys reward delay [min] author title 0.430 14.2 holger80 How to use the steem.vc testnet with beem 0.305 15.8 themarkymark Witness Update - @themarkymark 0.256 15.3 trdaily #tr etiketi ve trend etiketler içerisindeki durumu (2018-09-30) emrebeyler reward delay [min] author title 0.175 20.3 themarkymark Witness Update - @themarkymark 0.141 20.3 muratkbesiroglu Marbling Art (English/Turkish) 0.133 20.2 muratkbesiroglu Can The Future Be Predicted? (English/Turkish) aneukpineung78 reward delay [min] author title 0.325 28.1 z8teyb289qav9z Current Bitcoin Price 0.302 28.3 z8teyb289qav9z Current Cardano Price 0.207 20.2 sanach MEMI - Wearable Technology Made By Women For Women sco reward delay [min] author title 0.278 14.3 steemcleaners Steemcleaners report for September 17, 2018 0.128 15.3 iamphysical Visión a escala micrométrica de los cristales de ZnO. 0.123 14.3 steemcleaners Steemcleaners report for September 19, 2018 celfmagazine reward delay [min] author title 0.086 367.4 empathetic My Lullaby Concert (or how it saved me from going nuts during the last months) 0.084 256.7 davidcentenor Steemit Openmic Week 105 - @davidcentenor - Cover “Brazos de Sol” - Alejandro Filio. 0.084 43.1 dechastre Los pequeños detalles: Acercamiento a las texturas naturales pornbooster reward delay [min] author title 0.386 20.6 cherrykiss What is your favourite Pornstar man, who gave you the most orgasm?  0.332 22.8 cherrykiss Morning  0.258 23.6 monichot Want to take a bath jacekw.dev reward delay [min] author title 0.474 39.9 drsensor GUC Desktop: Notes taking app for creating development updates seamlessly 0.160 2515.0 sxiii [LINUX] Create own Linux Distribution Timeline Map [MANUAL] 0.110 2972.8 villaincandle Steem White Paper (Genesis); English to Polish translation #3 reggaemuffin reward delay [min] author title 0.064 47.9 coingecko Hello Steem! CoinGecko is here!  0.043 1518.9 adrianobalan Fauna in Italy - Animals, birds and insects that live in various regions of my country. Insects. [ENG/ITA] by adriano. Fauna italiana. Animali, uccelli e insetti. Vari. 0.042 408.1 didic All In Moderation: How To Write A Utopian Moderation Comment annaburska reward delay [min] author title 0.054 50.8 dumboandgimbo ZIEMNIACZKI W MUNDURKACH 0.044 553.0 krasnalek Gang Świeżaków/Słodziaków jako spektakl medialny 0.042 115.0 flocki Dzisiejszy bieg: 10 km, zawody isarmoewe reward delay [min] author title 0.149 108.4 feuerelfe thats punk- and allerlei - 12 - 0.097 17.4 antigenx HEALTH QUIZ: Join Our Weekly Quiz For 100 AIRCOIN Rewards! 0.067 11.1 robertgelbmann #Mittwochsquickie - Geschwindigkeit schlafhacking reward delay [min] author title 0.100 8.7 taskmaster4450 Witness Spotlight: @reggaemuffin 0.055 439.8 mcfarhat HF20 Tutorial: Claiming &amp; Creating Discounted Accounts 0.037 9.1 schamangerbert Steem Blitz Chess Tournament October 06 … And the winner is … (video commentary by @schamangerbert) If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 14 - STEEM prizes available!’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-14-steem-prizes-available/"},{"title":"steemmonsters deck and card statistics for day 1","text":"The steemmonster battles are running now almost one day. The player leaderboard can be seen only on the website https://steemmonsters.com/: For calculating the statistics, I scanned all custom_json blocks with sm_find_match and sm_team_reveal from 2018-10-14 21:25:00 to 2018-10-15 20:26:18. Information about the cards can be received by https://steemmonsters.com/cards/find?ids=.It is possible to collect information about used cards and decks, but which deck has won cannot be received from the blockchain or from the API. Results4980 different decks have been used. 16340 matches have been played. Most played decks N summoner monster 619 Alric Stormbringer Naga Warrior, Medusa, Crustacean King, Mischievous Mermaid 561 Zintar Mortalis Screaming Banshee, Haunted Spirit, Twisted Jester, Undead Priest, Haunted Spider 407 Zintar Mortalis Haunted Spirit, Skeleton Assassin, Undead Priest, Haunted Spider, Twisted Jester 392 Selenia Sky Stone Golem, Earth Elemental, Swamp Thing, Spirit of the Forest 366 Selenia Sky Haunted Spirit, Undead Priest, Haunted Spider, Lightning Dragon 362 Alric Stormbringer Medusa, Mischievous Mermaid, Magi Sphinx, Enchanted Pixie 349 Selenia Sky Haunted Spirit, Undead Priest, Screaming Banshee, Gold Dragon 339 Zintar Mortalis Haunted Spirit, Skeleton Assassin, Haunted Spider, Undead Priest, Twisted Jester 311 Zintar Mortalis Haunted Spirit, Undead Priest, Haunted Spider, Screaming Banshee, Twisted Jester 266 Zintar Mortalis Haunted Spirit, Undead Priest, Screaming Banshee, Haunted Spider, Twisted Jester 241 Alric Stormbringer Naga Warrior, Mischievous Mermaid, Medusa, Crustacean King 214 Alric Stormbringer Naga Warrior, Medusa, Mischievous Mermaid, Enchanted Pixie 202 Zintar Mortalis Haunted Spirit, Twisted Jester, Undead Priest, Screaming Banshee, Haunted Spider 199 Alric Stormbringer Frost Giant, Medusa, Enchanted Pixie, Crustacean King 198 Selenia Sky Stone Golem, Earth Elemental, Swamp Thing, Lightning Dragon 197 Tyrus Paladium Silvershield Paladin, Defender of Truth, Divine Healer, Air Elemental 188 Selenia Sky Stone Golem, Swamp Thing, Goblin Sorcerer, Spirit of the Forest 183 Alric Stormbringer Naga Warrior, Medusa, Mischievous Mermaid, Crustacean King 181 Zintar Mortalis Haunted Spirit, Dark Enchantress, Undead Priest, Twisted Jester 172 Lyanna Natura Stone Golem, Swamp Thing, Goblin Sorcerer, Spirit of the Forest 167 Alric Stormbringer Crustacean King, Medusa, Mischievous Mermaid, Magi Sphinx 161 Alric Stormbringer Naga Warrior, Crustacean King, Medusa, Mischievous Mermaid 158 Selenia Sky Haunted Spirit, Haunted Spider, Undead Priest, Lightning Dragon 158 Zintar Mortalis Haunted Spirit, Haunted Spider, Screaming Banshee, Undead Priest, Twisted Jester 157 Selenia Sky Serpentine Soldier, Kobold Miner, Fire Beetle, Fire Demon, Goblin Shaman 155 Alric Stormbringer Naga Warrior, Mischievous Mermaid, Crustacean King, Medusa 119 Tyrus Paladium Silvershield Paladin, Divine Healer, Air Elemental, Peacebringer 118 Alric Stormbringer Frost Giant, Medusa, Mischievous Mermaid 117 Lyanna Natura Rexxie, Swamp Thing, Spirit of the Forest 112 Selenia Sky Haunted Spirit, Undead Priest, Haunted Spider, Screaming Banshee, Twisted Jester 112 Tyrus Paladium Clay Golem, Divine Healer, Feral Spirit, Air Elemental 110 Alric Stormbringer Spineback Turtle, Crustacean King, Medusa, Mischievous Mermaid 105 Xander Foxwood Earth Elemental, Spirit of the Forest, Swamp Thing, Goblin Sorcerer, Elven Cutthroat 104 Zintar Mortalis Lord of Darkness, Dark Enchantress, Twisted Jester Most often used cards N name mean xp 8946 Undead Priest 2016 8798 Haunted Spirit 2220 7619 Zintar Mortalis 1087 6952 Selenia Sky 3056 6803 Twisted Jester 1659 6711 Haunted Spider 1380 6088 Alric Stormbringer 1570 5077 Medusa 1885 5003 Crustacean King 1348 4705 Mischievous Mermaid 1965 4587 Screaming Banshee 2099 3804 Skeleton Assassin 1106 3519 Malric Inferno 1474 3257 Swamp Thing 3095 3156 Goblin Shaman 1888 3151 Tyrus Paladium 1803 2861 Lyanna Natura 1082 2811 Divine Healer 1290 2724 Fire Beetle 1502 2681 Kobold Miner 1926 2331 Earth Elemental 3398 2228 Enchanted Pixie 433 2172 Naga Warrior 3229 2112 Lightning Dragon 2868 2088 Goblin Sorcerer 1417 2003 Spirit of the Forest 3373 1841 Stone Golem 3543 1823 Fire Demon 3327 1765 Elven Cutthroat 594 1747 Spineback Turtle 292 1720 Magi Sphinx 242 1702 Feral Spirit 877 1695 Cocatrice 290 1627 Centaur 336 1503 Cerberus 1614 1460 Clay Golem 1045 1429 Water Elemental 1223 1406 Gold Dragon 3125 1375 Serpentine Soldier 3569 1321 Pirate Captain 525 1321 Dark Enchantress 580 1305 Lord of Darkness 449 1269 Air Elemental 1967 1263 Magi of the Forest 1337 1239 Pit Ogre 1068 1212 Rexxie 589 1212 Giant Roc 478 1206 Silvershield Paladin 3180 1193 Flesh Golem 1349 1136 Peacebringer 1087 1114 Frost Giant 945 1098 Silvershield Knight 298 1016 Sabre Shark 922 Most often used unique cards N owner card xp 615 wonsama Zintar Mortalis 0 615 wonsama Haunted Spirit 0 615 wonsama Undead Priest 0 556 wonsama Screaming Banshee 0 556 wonsama Twisted Jester 0 556 wonsama Haunted Spider 0 220 sanchezpuukko Magi Sphinx 0 215 zerodashonenine Malric Inferno 675 212 lunaticpandora Zintar Mortalis 0 210 zerodashonenine Goblin Shaman 420 210 lunaticpandora Undead Priest 0 209 abc.love.steemit Haunted Spirit 225 209 lunaticpandora Haunted Spirit 100 208 abc.love.steemit Zintar Mortalis 450 207 abc.love.steemit Undead Priest 300 207 lunaticpandora Twisted Jester 0 202 abc.love.steemit Screaming Banshee 0 201 abc.love.steemit Twisted Jester 150 190 lunaticpandora Screaming Banshee 0 189 lunaticpandora Haunted Spider 0 188 flemingfarm Zintar Mortalis 500 175 abc.love.steemit Haunted Spider 150 172 eonwarped Lyanna Natura 300 172 eonwarped Spirit of the Forest 1000 172 imperfect-one Selenia Sky 7000 171 eonwarped Swamp Thing 875 170 sanchezpuukko Enchanted Pixie 0 165 eonwarped Goblin Sorcerer 160 165 onetin84 Selenia Sky 7000 164 redbikk Lord of Darkness 0 162 wizardave Alric Stormbringer 300 162 wizardave Crustacean King 60 161 jazzhero Zintar Mortalis 4500 161 jazzhero Haunted Spirit 4500 160 jazzhero Undead Priest 2500 160 jazzhero Twisted Jester 2500 160 sanchezpuukko Medusa 3500 159 wizardave Enchanted Pixie 150 158 jazzhero Skeleton Assassin 2560 158 jazzhero Haunted Spider 1560 157 the01crow Selenia Sky 7000 156 wizardave Medusa 300 156 zerodashonenine Hydra 0 156 sanchezpuukko Mischievous Mermaid 500 156 marabara Selenia Sky 7000 156 rondras Selenia Sky 7000 156 redbikk Undead Priest 750 155 sanchezpuukko Alric Stormbringer 300 153 the.foodini Zintar Mortalis 0 153 the.foodini Haunted Spirit 0 153 the.foodini Twisted Jester 0 153 the.foodini Undead Priest 0 152 mattclarke Goblin Sorcerer 250 151 wizardave Frost Giant 1000 151 eonwarped Stone Golem 300 150 abdullar Selenia Sky 7000 150 flemingfarm Twisted Jester 500 150 redbikk Screaming Banshee 0 147 cahlen Tyrus Paladium 8500 146 cahlen Silvershield Paladin 8500 145 cranium Alric Stormbringer 0 144 cranium Mischievous Mermaid 0 142 gunsmithing Selenia Sky 3000 141 cranium Medusa 0 139 flemingfarm Dark Enchantress 750 138 cahlen Air Elemental 3750 138 zerodashonenine Fire Beetle 255 137 chrisroberts Mischievous Mermaid 7750 136 gunsmithing Gold Dragon 3000 135 chrisroberts Alric Stormbringer 8500 134 chrisroberts Crustacean King 3200 133 chrisroberts Medusa 8500 133 mattclarke Magi of the Forest 3750 132 wombykus Selenia Sky 7000 132 xerox-bru Selenia Sky 1000 131 chrisroberts Naga Warrior 7750 131 mmckersie Malric Inferno 300 130 fenrir78 Selenia Sky 7000 129 mmckersie Elven Cutthroat 195 129 mmckersie Kobold Miner 60 128 lec Selenia Sky 0 123 abh12345 Fire Demon 1000 123 mmckersie Goblin Shaman 90 122 nateaguila Zintar Mortalis 8550 122 nateaguila Haunted Spirit 8550 122 nateaguila Undead Priest 8550 122 nateaguila Haunted Spider 7560 122 abh12345 Goblin Shaman 2600 120 abh12345 Fire Beetle 1200 120 beco132 Tyrus Paladium 0 120 beco132 Silvershield Knight 0 118 planosdeunacasa Selenia Sky 0 118 rafalski Hydra 0 118 cyan2017 Selenia Sky 7000 117 xunityx Twisted Jester 1500 117 xunityx Haunted Spider 765 117 pachu Alric Stormbringer 100 117 pachu Medusa 0 117 pachu Mischievous Mermaid 0 117 beco132 Elven Cutthroat 0 117 beco132 Feral Spirit 0 116 abh12345 Hydra 1500 116 karenmckersie Selenia Sky 1000 116 rakkasan84 Selenia Sky 7000 116 nateaguila Twisted Jester 8550 115 kingtherion Haunted Spirit 400 115 kingtherion Twisted Jester 400 114 tr777 Haunted Spirit 8500 113 pachu Enchanted Pixie 0 113 agr8buzz Haunted Spirit 8500 113 tr777 Undead Priest 8500 113 cahlen Peacebringer 2500 113 beco132 Enchanted Pixie 0 112 karenmckersie Spirit of the Forest 3000 112 zerodashonenine Kobold Miner 180 111 direwolf Alric Stormbringer 8500 110 cryplectibles Divine Healer 460 110 beco132 Cocatrice 0 110 kingtherion Undead Priest 400 109 agr8buzz Selenia Sky 7000 109 clove71 Selenia Sky 7000 109 onetin84 Goblin Shaman 7560 109 mattclarke Lyanna Natura 2500 109 surfknasen Alric Stormbringer 1500 109 thebluewin Alric Stormbringer 1500 109 thebluewin Medusa 300 109 thebluewin Mischievous Mermaid 1750 108 generausd Zintar Mortalis 400 108 generausd Haunted Spider 80 108 generausd Screaming Banshee 0 108 generausd Undead Priest 400 108 onetin84 Serpentine Soldier 8500 108 onetin84 Kobold Miner 7560 108 onetin84 Fire Demon 7750 107 generausd Spineback Wolf 180 107 luxio Alric Stormbringer 0 107 erodedthoughts Undead Priest 2500 107 onetin84 Fire Beetle 7560 107 flauwy Selenia Sky 7000 107 cranium Naga Warrior 0 107 mattclarke Swamp Thing 4250 107 surfknasen Mischievous Mermaid 1250 107 surfknasen Medusa 1100 107 cyan2017 Haunted Spirit 8500 107 cyan2017 Undead Priest 8500 105 agr8buzz Undead Priest 2500 105 pachu Naga Warrior 0 105 encryptdcouple Selenia Sky 0 105 flemingfarm Lord of Darkness 0 105 luxio Mischievous Mermaid 0 105 erodedthoughts Haunted Spider 1400 104 xunityx Screaming Banshee 875 104 agr8buzz Haunted Spider 380 103 xerox-bru Haunted Spider 360 103 xerox-bru Skeleton Assassin 360 103 xerox-bru Twisted Jester 300 102 bafi Haunted Spider 1755 102 mmunited Tyrus Paladium 750 102 mulletwang Undead Priest 4700 102 direwolf Crustacean King 2560 102 lec Lightning Dragon 0 102 tr777 Haunted Spider 7560 102 xerox-bru Haunted Spirit 700 102 xerox-bru Undead Priest 300 101 mmunited Air Elemental 875 101 mulletwang Haunted Spirit 9200 101 tailcock Xia Seachan 1575 100 nateaguila Screaming Banshee 7875 100 kiokizz Haunted Spider 440 100 chacek Zintar Mortalis 150 100 chacek Haunted Spirit 450 This page is synchronized from the post: ‘steemmonsters deck and card statistics for day 1’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-deck-and-card-statistics-for-day-1/"},{"title":"Measuring RC costs for 0.20.6","text":"A new bugfix release of steem (0.20.6) is currently prepared for release next week. @reggaemuffin already merged the most important changes into his live test environment https://testbed.reggaemuffin.me/ (more infos. I will do some tests regarding the changed RC costs:The broadcasted operation can be seen https://steemd.com/@beembot RC costs measurementsVersion 0.20.5 was measured on https://api.steemit.com. 0.20.6 was measured on https://testbed.reggaemuffin.me/. The RC costs were measured by:For 0.20.6 (https://testbed.reggaemuffin.me/)12345678910node = &quot;https://testbed.reggaemuffin.me/&quot;stm = Steem(node=node, keys=[wif_posting])account = Account(&quot;beembot&quot;, steem_instance=stm) rc_mana_old = account.get_rc_manabar()print(account.steem)# place for broadcast a operation sleep(5)rc_mana_new = account.get_rc_manabar()rc_costs = rc_mana_old[&quot;current_mana&quot;] - rc_mana_new[&quot;current_mana&quot;]print(&quot;RC costs: %f G RC&quot; % (rc_costs / 1e9)) For 0.20.5 (https://api.steemit.com):123456789stm2 = Steem(node = &quot;https://api.steemit.com&quot;, keys=[wif_posting])account = Account(&quot;beembot&quot;, steem_instance=stm2)rc_mana_old = account.get_rc_manabar()print(account.steem)# place for broadcast a operation sleep(5)rc_mana_new = account.get_rc_manabar()rc_costs = rc_mana_old[&quot;current_mana&quot;] - rc_mana_new[&quot;current_mana&quot;]print(&quot;Costs: %f G RC&quot; % (rc_costs / 1e9)) MeasurementsTransfer version RC costs [G RC] 0.20.6 0.300629 0.20.5 0.254544 Vote version RC costs [G RC] 0.20.6 0.115230 0.20.5 0.288244 Custom_json (follow) version RC costs [G RC] 0.20.6 0.404449 0.20.5 0.070962 Custom_json (reblog) version RC costs [G RC] 0.20.6 0.106790 0.20.5 0.092349 Comment version RC costs [G RC] 0.20.6 1.966627 0.20.5 1.821318 ConclusionRC costs for a vote and a follow custom_json operation will be changing. RC costs for a vote are reduced by a factor of 2.5. RC costs for a follow custom_json OP are increased by a factor of 5.6. The RC costs of other custom_json operation is not affected. The RC costs of all broadcasted operations are slightly increased, as now the execution time is now included in the RC cost calculation. Link to the commits:There are three changes related to RC costs: execution time: https://github.com/steemit/steem/commit/27b3e5e92682cb3c042e3dd6938eef9e5ef0117c Reducing custom_json execution time and increasing custom_json follow execution time: https://github.com/steemit/steem/commit/47ce5099ba254141b4ffe97bb3187d3a21369365 Reducing RC costs f or a vote: https://github.com/steemit/steem/commit/673c86fa572d54d7d7a982ca8cb7c2440d8eb214 This page is synchronized from the post: ‘Measuring RC costs for 0.20.6’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/measuring-rc-costs-for-0-20-6/"},{"title":"Steemmonsters deck analysis of the first two days - which deck has won most often?","text":"In two hours, the mana cap will be altered. So let’s see which decks could dominate the 20 mana cap battles. This time, I managed it to receive the winning ratio of all played decks and some other statistics thanks to the https://steemmonsters.com/transactions/history?from_block= api. Due to an API change, some decks are missing in the statistics. Data are included from &apos;2018-10-14 21:25:00&apos; to &apos;2018-10-16 21:25:00&apos;. The number after the card name is the card level. n is the number how often the deck was played. win ratio is the win percentage. wins vs max lvl is the number how often the deck could win against a max level deck. The decks are sorted by the absolute number of wins. max level decks - 969 different max decks were used16.94 % played decks are max level decks.57.89 % win ratio for max level decks. n win ratio wins vs max lvl summoner monsters 452 62.61 % 243 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Gold Dragon:4 361 68.42 % 210 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6 292 69.52 % 164 Selenia Sky:4 Stone Golem:8, Swamp Thing:6, Goblin Sorcerer:10, Spirit of the Forest:4 313 58.79 % 106 Alric Stormbringer:8 Naga Warrior:6, Medusa:8, Crustacean King:8, Mischievous Mermaid:6 290 59.31 % 134 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Haunted Spider:10, Screaming Banshee:6, Twisted Jester:8 301 52.82 % 117 Selenia Sky:4 Stone Golem:8, Earth Elemental:8, Swamp Thing:6, Spirit of the Forest:4 203 72.91 % 134 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6 246 58.54 % 89 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Haunted Spider:10, Lightning Dragon:4 232 61.64 % 76 Zintar Mortalis:8 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10, Twisted Jester:8 220 65.00 % 130 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Fire Demon:6, Goblin Shaman:10 210 63.81 % 111 Alric Stormbringer:8 Naga Warrior:6, Mischievous Mermaid:6, Medusa:8, Crustacean King:10 185 71.89 % 85 Alric Stormbringer:8 Naga Warrior:6, Medusa:8, Crustacean King:10, Mischievous Mermaid:6 172 68.02 % 85 Selenia Sky:4 Haunted Spirit:8, Lightning Dragon:4, Undead Priest:8, Haunted Spider:10 134 55.97 % 63 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Haunted Spider:10, Gold Dragon:4 105 65.71 % 32 Lyanna Natura:8 Stone Golem:8, Earth Elemental:8, Swamp Thing:6, Spirit of the Forest:4 94 72.34 % 57 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Kobold Miner:10, Fire Demon:6, Goblin Shaman:10 81 74.07 % 55 Xander Foxwood:6 Earth Elemental:8, Spirit of the Forest:4, Swamp Thing:6, Goblin Sorcerer:10, Elven Cutthroat:9 93 60.22 % 53 Selenia Sky:4 Haunted Spirit:8, Twisted Jester:8, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10 92 59.78 % 35 Zintar Mortalis:8 Haunted Spirit:8, Skeleton Assassin:10, Undead Priest:8, Haunted Spider:10, Twisted Jester:8 85 64.71 % 34 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10, Twisted Jester:8 91 59.34 % 40 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Lightning Dragon:4 87 60.92 % 40 Zintar Mortalis:8 Haunted Spirit:8, Skeleton Assassin:10, Undead Priest:8, Screaming Banshee:6, Twisted Jester:8 92 56.52 % 25 Alric Stormbringer:8 Naga Warrior:6, Medusa:7, Mischievous Mermaid:6, Crustacean King:6 65 80.00 % 27 Alric Stormbringer:8 Cocatrice:7, Enchanted Pixie:7, Crustacean King:8, Medusa:7, Mischievous Mermaid:6 93 54.84 % 17 Tyrus Paladium:8 Silvershield Paladin:7, Defender of Truth:5, Divine Healer:10, Air Elemental:5 min level decks - 3113 different decks were used24.87 % played decks are min level decks.41.55 % win ratio for min level decks. n win ratio wins vs max lvl summoner monsters 757 44.12 % 0 Zintar Mortalis:1 Screaming Banshee:1, Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Haunted Spider:1 429 43.36 % 0 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Haunted Spider:1, Screaming Banshee:1, Undead Priest:1 224 61.61 % 0 Alric Stormbringer:1 Medusa:1, Mischievous Mermaid:1, Magi Sphinx:1, Enchanted Pixie:1 306 44.77 % 0 Alric Stormbringer:1 Naga Warrior:1, Medusa:1, Mischievous Mermaid:1, Enchanted Pixie:1 128 71.09 % 0 Alric Stormbringer:1 Spineback Turtle:1, Crustacean King:1, Medusa:1, Mischievous Mermaid:1 182 48.90 % 0 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Screaming Banshee:1, Haunted Spider:1 121 57.85 % 0 Alric Stormbringer:1 Naga Warrior:1, Medusa:1, Crustacean King:1, Mischievous Mermaid:1 119 48.74 % 0 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Screaming Banshee:1, Undead Priest:1, Twisted Jester:1 114 47.37 % 0 Zintar Mortalis:1 Haunted Spirit:1, Dark Enchantress:1, Undead Priest:1, Twisted Jester:1 84 61.90 % 0 Alric Stormbringer:1 Frost Giant:1, Medusa:1, Enchanted Pixie:1, Crustacean King:1 83 55.42 % 0 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Dark Enchantress:1 72 56.94 % 0 Alric Stormbringer:1 Hydra:1, Medusa:1, Mischievous Mermaid:1 98 40.82 % 0 Tyrus Paladium:1 Cocatrice:1, Silvershield Knight:1, Elven Cutthroat:1, Feral Spirit:1, Enchanted Pixie:1 70 54.29 % 0 Alric Stormbringer:1 Frost Giant:1, Medusa:1, Mischievous Mermaid:1 72 48.61 % 0 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Screaming Banshee:1, Haunted Spider:1 55 63.64 % 0 Zintar Mortalis:1 Animated Corpse:1, Cocatrice:1, Haunted Spirit:1, Undead Priest:1, Twisted Jester:1 51 66.67 % 0 Alric Stormbringer:1 Frost Giant:1, Mischievous Mermaid:1, Medusa:1 61 54.10 % 0 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Haunted Spider:1, Screaming Banshee:1, Twisted Jester:1 59 55.93 % 0 Alric Stormbringer:1 Spineback Turtle:1, Crustacean King:1, Mischievous Mermaid:1, Medusa:1 64 50.00 % 0 Alric Stormbringer:1 Spineback Turtle:1, Water Elemental:1, Crustacean King:1, Medusa:1 66 48.48 % 0 Alric Stormbringer:1 Medusa:1, Magi Sphinx:1, Enchanted Pixie:1, Mischievous Mermaid:1 53 56.60 % 0 Zintar Mortalis:1 Lord of Darkness:1, Haunted Spirit:1, Undead Priest:1, Screaming Banshee:1 61 47.54 % 0 Selenia Sky:1 Haunted Spirit:1, Undead Priest:1, Screaming Banshee:1, Gold Dragon:1 60 48.33 % 0 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Skeleton Assassin:1, Screaming Banshee:1 38 73.68 % 0 Alric Stormbringer:1 Hydra:1, Mischievous Mermaid:1, Magi Sphinx:1 &lt; 25% of max level decks - 2239 different decks were used15.86 % played decks are &lt; 25% of max level decks.47.95 % win ratio for &lt; 25% of max level decks. n win ratio wins vs max lvl summoner monsters 169 50.30 % 0 Zintar Mortalis:2 Haunted Spirit:2, Undead Priest:2, Haunted Spider:3, Screaming Banshee:1, Twisted Jester:1 89 61.80 % 0 Alric Stormbringer:2 Crustacean King:2, Medusa:2, Water Elemental:2, Mischievous Mermaid:1 79 62.03 % 0 Selenia Sky:1 Stone Golem:2, Earth Elemental:2, Swamp Thing:2, Lightning Dragon:1 93 51.61 % 0 Alric Stormbringer:2 Frost Giant:1, Medusa:2, Enchanted Pixie:2, Crustacean King:3 82 58.54 % 0 Selenia Sky:1 Spineback Turtle:3, Sabre Shark:3, Crustacean King:3, Pirate Captain:3, Centaur:3 73 61.64 % 0 Alric Stormbringer:2 Naga Warrior:1, Medusa:1, Mischievous Mermaid:1, Enchanted Pixie:1 77 57.14 % 0 Selenia Sky:1 Haunted Spirit:2, Undead Priest:2, Haunted Spider:3, Lightning Dragon:1 72 59.72 % 0 Tyrus Paladium:2 Clay Golem:2, Divine Healer:3, Feral Spirit:3, Air Elemental:2 74 56.76 % 0 Selenia Sky:1 Clay Golem:2, Defender of Truth:2, Peacebringer:2, Divine Healer:3 74 55.41 % 0 Jarlax the Undead:2 Lord of Darkness:1, Dark Enchantress:1, Undead Priest:1, Screaming Banshee:1 59 64.41 % 0 Zintar Mortalis:2 Haunted Spirit:2, Haunted Spider:3, Undead Priest:2, Screaming Banshee:2, Twisted Jester:2 49 75.51 % 0 Selenia Sky:1 Stone Golem:1, Earth Elemental:1, Swamp Thing:2, Spirit of the Forest:1 63 57.14 % 0 Lyanna Natura:2 Rexxie:3, Magi of the Forest:2, Goblin Sorcerer:3, Swamp Thing:1 66 54.55 % 0 Selenia Sky:1 Haunted Spirit:2, Gold Dragon:1, Undead Priest:2, Haunted Spider:3 71 49.30 % 0 Malric Inferno:2 Cerberus:2, Pit Ogre:2, Fire Demon:1, Goblin Shaman:3 41 80.49 % 0 Alric Stormbringer:2 Crustacean King:3, Medusa:2, Mischievous Mermaid:2, Magi Sphinx:1 64 50.00 % 0 Alric Stormbringer:2 Spineback Turtle:3, Crustacean King:3, Mischievous Mermaid:1, Medusa:1 60 51.67 % 0 Malric Inferno:2 Serpent of the Flame:2, Fire Demon:2, Fire Beetle:3, Goblin Shaman:2 60 50.00 % 0 Selenia Sky:1 Lord of Darkness:1, Magi Sphinx:1, Undead Priest:2, Haunted Spider:1 46 60.87 % 0 Selenia Sky:1 Chromatic Dragon:1, Divine Healer:3, Lightning Dragon:1 38 73.68 % 0 Zintar Mortalis:2 Haunted Spirit:2, Dark Enchantress:1, Undead Priest:2, Twisted Jester:1 41 68.29 % 0 Alric Stormbringer:2 Medusa:1, Magi Sphinx:2, Mischievous Mermaid:1, Enchanted Pixie:1 49 57.14 % 0 Alric Stormbringer:2 Medusa:1, Mischievous Mermaid:1, Magi Sphinx:1, Enchanted Pixie:1 58 46.55 % 0 Lyanna Natura:2 Stone Golem:2, Swamp Thing:2, Goblin Sorcerer:2, Spirit of the Forest:1 50 54.00 % 0 Selenia Sky:1 Spineback Turtle:3, Medusa:1, Sabre Shark:3, Pirate Captain:3, Crustacean King:3 25% to 50% of max level decks - 2968 different decks were used28.04 % played decks are 25% to 50% of max level decks.53.14 % win ratio for 25% to 50% of max level decks. n win ratio wins vs max lvl summoner monsters 251 48.21 % 0 Lyanna Natura:3 Stone Golem:3, Swamp Thing:2, Goblin Sorcerer:4, Spirit of the Forest:2 181 54.70 % 0 Alric Stormbringer:3 Crustacean King:4, Medusa:3, Mischievous Mermaid:2, Magi Sphinx:1 127 67.72 % 0 Selenia Sky:2 Stone Golem:4, Earth Elemental:4, Swamp Thing:3, Spirit of the Forest:2 112 72.32 % 0 Zintar Mortalis:4 Haunted Spirit:4, Skeleton Assassin:5, Haunted Spider:5, Undead Priest:4, Twisted Jester:4 105 60.95 % 0 Alric Stormbringer:3 Naga Warrior:2, Medusa:3, Crustacean King:4, Mischievous Mermaid:2 105 58.10 % 0 Lyanna Natura:4 Stone Golem:4, Goblin Sorcerer:5, Earth Elemental:4, Magi of the Forest:3, Swamp Thing:3 114 50.88 % 0 Alric Stormbringer:3 Medusa:3, Mischievous Mermaid:2, Magi Sphinx:1, Enchanted Pixie:1 119 47.06 % 0 Zintar Mortalis:4 Lord of Darkness:2, Dark Enchantress:2, Screaming Banshee:2 57 92.98 % 0 Zintar Mortalis:4 Animated Corpse:5, Haunted Spirit:4, Skeleton Assassin:5, Haunted Spider:5, Undead Priest:4 82 63.41 % 0 Selenia Sky:2 Stone Golem:4, Swamp Thing:3, Goblin Sorcerer:5, Spirit of the Forest:2 101 50.50 % 0 Alric Stormbringer:3 Medusa:3, Mischievous Mermaid:2, Enchanted Pixie:1, Magi Sphinx:1 107 46.73 % 0 Lyanna Natura:3 Flesh Golem:4, Earth Elemental:3, Magi of the Forest:2, Swamp Thing:2 74 66.22 % 0 Selenia Sky:2 Haunted Spirit:4, Haunted Spider:5, Undead Priest:4, Lightning Dragon:2 111 44.14 % 0 Tyrus Paladium:4 Silvershield Warrior:4, Silvershield Knight:4, Peacebringer:3, Divine Healer:4 73 64.38 % 0 Tyrus Paladium:3 Hydra:1, Cyclops:3, Divine Healer:4 70 65.71 % 0 Alric Stormbringer:4 Naga Warrior:2, Medusa:3, Crustacean King:3, Mischievous Mermaid:3 59 69.49 % 0 Zintar Mortalis:4 Haunted Spirit:4, Skeleton Assassin:4, Undead Priest:4, Haunted Spider:4, Twisted Jester:4 71 56.34 % 0 Zintar Mortalis:3 Haunted Spirit:3, Skeleton Assassin:4, Undead Priest:3, Haunted Spider:4, Twisted Jester:3 69 57.97 % 0 Tyrus Paladium:4 Silvershield Paladin:4, Angel of Light:1, Divine Healer:4, Defender of Truth:3 54 74.07 % 0 Zintar Mortalis:4 Haunted Spirit:3, Twisted Jester:3, Undead Priest:4, Screaming Banshee:2, Haunted Spider:5 86 45.35 % 0 Malric Inferno:4 Raging Impaler:2, Cerberus:4, Goblin Shaman:5, Fire Demon:2 58 65.52 % 0 Zintar Mortalis:4 Haunted Spirit:3, Skeleton Assassin:4, Undead Priest:4, Screaming Banshee:3, Twisted Jester:3 54 66.67 % 0 Selenia Sky:2 Gold Dragon:2, Lightning Dragon:1, Undead Priest:3 72 48.61 % 0 Alric Stormbringer:3 Frost Giant:2, Medusa:3, Enchanted Pixie:2, Crustacean King:3 60 58.33 % 0 Selenia Sky:2 Haunted Spirit:3, Gold Dragon:2, Undead Priest:4, Haunted Spider:4 50% to 75% of max level decks - 829 different decks were used8.09 % played decks are 50% to 75% of max level decks.51.47 % win ratio for 50% to 75% of max level decks. n win ratio wins vs max lvl summoner monsters 159 53.46 % 4 Zintar Mortalis:5 Haunted Spirit:5, Skeleton Assassin:6, Haunted Spider:6, Undead Priest:5, Twisted Jester:5 107 55.14 % 7 Selenia Sky:3 Gold Dragon:3, Swamp Thing:4, Spirit of the Forest:3 105 50.48 % 6 Alric Stormbringer:6 Naga Warrior:4, Mischievous Mermaid:4, Crustacean King:6, Medusa:6 65 58.46 % 2 Tyrus Paladium:5 Silvershield Paladin:5, Divine Healer:5, Defender of Truth:4, Air Elemental:3 67 53.73 % 0 Tyrus Paladium:6 Silvershield Warrior:6, Silvershield Paladin:5, Defender of Truth:4, Peacebringer:4 46 73.91 % 6 Alric Stormbringer:6 Naga Warrior:4, Medusa:6, Crustacean King:6, Mischievous Mermaid:4 44 70.45 % 4 Tyrus Paladium:5 Silvershield Paladin:5, Defender of Truth:4, Divine Healer:5, Air Elemental:4 50 62.00 % 1 Zintar Mortalis:5 Haunted Spirit:4, Undead Priest:5, Screaming Banshee:3, Haunted Spider:6, Twisted Jester:4 41 75.61 % 6 Selenia Sky:3 Stone Golem:4, Earth Elemental:4, Swamp Thing:4, Spirit of the Forest:3 39 76.92 % 7 Selenia Sky:3 Stone Golem:6, Swamp Thing:4, Goblin Sorcerer:7, Spirit of the Forest:3 41 68.29 % 3 Selenia Sky:3 Haunted Spirit:6, Haunted Spider:7, Undead Priest:6, Lightning Dragon:2 48 58.33 % 4 Zintar Mortalis:5 Haunted Spirit:5, Dark Enchantress:4, Undead Priest:5, Twisted Jester:5 45 62.22 % 3 Zintar Mortalis:5 Haunted Spirit:5, Skeleton Assassin:6, Undead Priest:5, Haunted Spider:5, Twisted Jester:5 48 56.25 % 0 Selenia Sky:3 Flesh Golem:6, Spirit of the Forest:3, Earth Elemental:6 48 54.17 % 1 Selenia Sky:3 Haunted Spirit:5, Undead Priest:5, Haunted Spider:5, Screaming Banshee:2, Twisted Jester:6 52 48.08 % 0 Lyanna Natura:5 Flesh Golem:6, Rexxie:6, Earth Elemental:4 44 54.55 % 0 Zintar Mortalis:5 Spineback Wolf:6, Undead Priest:5, Haunted Spider:5, Screaming Banshee:4, Twisted Jester:4 43 55.81 % 2 Zintar Mortalis:5 Haunted Spirit:5, Haunted Spider:6, Screaming Banshee:3, Undead Priest:5, Twisted Jester:5 35 62.86 % 1 Zintar Mortalis:5 Haunted Spirit:5, Skeleton Assassin:4, Undead Priest:3, Haunted Spider:4, Twisted Jester:5 35 62.86 % 0 Selenia Sky:3 Gold Dragon:3, Spirit of the Forest:3, Swamp Thing:2 40 55.00 % 1 Zintar Mortalis:5 Haunted Spirit:5, Twisted Jester:5, Haunted Spider:6, Undead Priest:5, Screaming Banshee:3 36 58.33 % 0 Lyanna Natura:5 Flesh Golem:6, Magi of the Forest:3, Spirit of the Forest:3 35 60.00 % 0 Tyrus Paladium:6 Clay Golem:6, Air Elemental:3, Feral Spirit:7, Divine Healer:7 27 77.78 % 2 Zintar Mortalis:5 Haunted Spirit:5, Haunted Spider:6, Twisted Jester:5, Undead Priest:5, Screaming Banshee:4 33 63.64 % 2 Selenia Sky:3 Frost Giant:3, Crustacean King:6, Medusa:5, Pirate Captain:6 75% to 100% of max level decks - 552 different decks were used6.21 % played decks are 75% to 100% of max level decks.51.46 % win ratio for 75% to 100% of max level decks. n win ratio wins vs max lvl summoner monsters 157 57.96 % 22 Selenia Sky:3 Haunted Spirit:6, Undead Priest:6, Screaming Banshee:5, Gold Dragon:3 108 55.56 % 7 Zintar Mortalis:6 Haunted Spirit:6, Haunted Spider:6, Screaming Banshee:5, Undead Priest:3, Twisted Jester:6 105 52.38 % 7 Alric Stormbringer:6 Naga Warrior:5, Mischievous Mermaid:5, Crustacean King:8, Medusa:6 66 62.12 % 11 Alric Stormbringer:6 Naga Warrior:5, Medusa:6, Mischievous Mermaid:5, Crustacean King:8 48 81.25 % 2 Alric Stormbringer:6 Naga Warrior:5, Medusa:5, Crustacean King:7, Mischievous Mermaid:4 78 44.87 % 12 Zintar Mortalis:7 Haunted Spirit:7, Haunted Spider:7, Undead Priest:6, Skeleton Assassin:8, Twisted Jester:6 57 59.65 % 8 Zintar Mortalis:7 Haunted Spirit:6, Twisted Jester:7, Haunted Spider:6, Screaming Banshee:5, Undead Priest:7 64 50.00 % 3 Zintar Mortalis:6 Haunted Spirit:6, Skeleton Assassin:8, Haunted Spider:7, Undead Priest:6, Twisted Jester:6 55 56.36 % 2 Malric Inferno:6 Serpent of the Flame:5, Kobold Miner:8, Elemental Phoenix:3, Cocatrice:2 47 63.83 % 15 Tyrus Paladium:7 Silvershield Paladin:7, Divine Healer:9, Air Elemental:5, Peacebringer:6 44 68.18 % 5 Zintar Mortalis:6 Haunted Spirit:6, Haunted Spider:8, Twisted Jester:6, Screaming Banshee:5, Undead Priest:6 61 49.18 % 13 Alric Stormbringer:7 Naga Warrior:5, Medusa:4, Crustacean King:8, Mischievous Mermaid:4 36 80.56 % 1 Xander Foxwood:5 Flesh Golem:8, Earth Elemental:7, Swamp Thing:5, Spirit of the Forest:3 48 60.42 % 1 Zintar Mortalis:6 Haunted Spirit:6, Undead Priest:5, Screaming Banshee:5, Twisted Jester:5, Haunted Spider:7 44 61.36 % 6 Alric Stormbringer:6 Naga Warrior:5, Medusa:5, Crustacean King:7, Mischievous Mermaid:5 38 65.79 % 6 Alric Stormbringer:7 Naga Warrior:5, Medusa:4, Crustacean King:7, Mischievous Mermaid:5 53 45.28 % 10 Zintar Mortalis:7 Haunted Spirit:7, Haunted Spider:7, Skeleton Assassin:8, Undead Priest:6, Twisted Jester:6 32 75.00 % 10 Alric Stormbringer:7 Naga Warrior:5, Medusa:6, Crustacean King:7, Mischievous Mermaid:5 32 75.00 % 0 Zintar Mortalis:6 Haunted Spirit:6, Twisted Jester:5, Undead Priest:5, Screaming Banshee:5, Haunted Spider:7 43 51.16 % 4 Malric Inferno:7 Serpentine Soldier:7, Kobold Miner:6, Fire Beetle:6, Goblin Shaman:9, Fire Demon:4 31 67.74 % 1 Lyanna Natura:6 Cocatrice:1, Flesh Golem:8, Goblin Sorcerer:4, Magi of the Forest:5, Swamp Thing:5 35 57.14 % 3 Alric Stormbringer:6 Naga Warrior:5, Medusa:6, Crustacean King:7, Mischievous Mermaid:5 28 71.43 % 5 Lyanna Natura:6 Cocatrice:1, Flesh Golem:8, Earth Elemental:6, Swamp Thing:5, Magi of the Forest:5 31 64.52 % 2 Zintar Mortalis:7 Haunted Spirit:7, Undead Priest:6, Haunted Spider:7, Screaming Banshee:5, Twisted Jester:7 30 63.33 % 4 Selenia Sky:3 Lord of Darkness:3, Skeleton Assassin:8, Haunted Spider:8, Twisted Jester:6 ConclusionIt is possible to win some matches also with level 1 cards due to the leaderboard system. It is possible to beat a max level deck, when the card level is at least 50 % to 75% of the max level. There are clearly dominating decks, let see what a different mana cap will bring. This page is synchronized from the post: ‘Steemmonsters deck analysis of the first two days - which deck has won most often?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-deck-analysis-of-the-first-two-days-which-deck-has-won-most-often/"},{"title":"Do you want to know which decks currently win in steem monsters?","text":"You can find interesting deck statistics on https://beempy.com/steemmonsters. Every hour, the newly played matches are analyzed and the html pages are updated. The number of decks which is included is currently limited by the API. You find the first and last time stamp on top. Different deck definition Max level deck - only cards with maximum level Min Level deck - only cards with level 1 0% - 25% Level deck - only cards with a level below 25% of max level 25% - 50% Level deck - only cards with a level below 50% of max level 50% - 75% Level deck - only cards with a level below 75% of max level 75% - 100% Level deck - only decks with at least one card level below 100% of max level For example for a max level deck: Counter deckHere, you find all decks that were able to win against a max level deck. This page is synchronized from the post: ‘Do you want to know which decks currently win in steem monsters?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/do-you-want-to-know-which-decks-currently-win-in-steem-monsters/"},{"title":"New features in python steemmonsters added","text":"In release 0.0.10, some new features were added to the python version of steemmonsters (github). InstallationInstall beem1pip install beem -U or when using anaconda (how to install beem on anaconda)1conda install beem Create a beempy walletWhen not created, create one1beempy createwallet and add the posting key1beempy addkey You can check by1beempy walletinfo if a wallet is already installed.1beempy listaccounts shows, if a posting key already exists. Using github12345pip install colorama termcolor six requestsgit clone https://github.com/holgern/steemmonsters.gitcd steemmonstersnano config.jsonpython steemmonsters.py Using pip (does not work on windows)12345pip install steemmonsters -Umkdir steemmonster_config1cd steemmonster_config1nano config.jsonsteemmonsters New featuresplay foreeverWhen setting &quot;play_counter&quot;: -1, in the config.json playing do not stop. Wait some seconds after each matchWhen setting play_delay, e.g. play_delay: 10, in the config.json a sleep is done after each match. The integer defines the wait time in seconds. play_delay: 0 means no sleep. Stop playing when ranking is outside a defined borderWhen &quot;play_inside_ranking_border&quot;: true is set in the config.json and a ranking border is defined: &quot;ranking_border&quot;: [2800, 3000], playing stops when the ranking is below the first number and above the second number. For the example [2800, 3000], playing stops when the ranking is 2799 or 3001 after playing a match. When only one direction should be limited: &quot;ranking_border&quot;: [0, 3000] - stop only when the ranking is above 3000 &quot;ranking_border&quot;: [2800, 10000] - stop only when the ranking is below 2800. (a ranking of 10000 cannot be reached). Play a random deckWhen no deck is specified:sm&gt; playa random deck is selected and played. Show rankingsm&gt; ranking shows the current ranking of the player. Reload configsm&gt; reload_config reads the changed config.json. Current conflictSet the following values for the current conflictExample config.json with all new features:123456789101112131415{ &quot;wallet_password&quot;: &quot;123&quot;, &quot;account&quot;: &quot;holger80&quot;, &quot;mana_cap&quot;: 19, &quot;ruleset&quot;: &quot;Lost Legendaries&quot;, &quot;match_type&quot;: &quot;Ranked&quot;, &quot;decks&quot;: { &quot;water1&quot;: [&quot;Alric Stormbringer&quot;, &quot;Spineback Turtle&quot;, &quot;Medusa&quot;, &quot;Crustacean King&quot;, &quot;Mischievous Mermaid&quot;], &quot;death1&quot;: [&quot;Zintar Mortalis&quot;, &quot;Haunted Spirit&quot;, &quot;Skeleton Assassin&quot;, &quot;Undead Priest&quot;, &quot;Twisted Jester&quot;] }, &quot;play_counter&quot;: -1, &quot;play_delay&quot;: 10, &quot;play_inside_ranking_border&quot;: true, &quot;ranking_border&quot;: [2800, 3000]} Do you have any suggestions? Please let me know. This page is synchronized from the post: ‘New features in python steemmonsters added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/new-features-for-python-steemmonsters-0-0-10-added/"},{"title":"steemmonsters, a new command line tool for battling opponents with your cards","text":"Repositoryhttps://github.com/holgern/steemmonsters steemmonsters - a new command line tool for pythonSteem monsters is a fully decentralized trading card game on the steem blockchain. This new toolbox can be used to play ranked matches and to stream currently played matches. Installation1pip install steemmonsters Copy https://github.com/holgern/steemmonsters/blob/master/config.json to a directory and adapt it. Start steemmonsters in the directory with the config.json. Windows userclone the github1git clone https://github.com/holgern/steemmonsters.git CommandsThe steem monsters shell can be started with1steemmonsters config.json must be available in the current directory of the terminal. When cloned the github instead of using pip (e.g. on windows with the anaconda terminal):1python steemmonsters.py Available commands inside the tool1sm&gt; stream This command shows the current battles and which player are participating 1sm&gt; play deck_name deck_name is one of the stored decks defined in config.json. E.g. death1: 1sm&gt; play random selects randomly a deck. 1sm&gt; show_deck deck_name shows deck deck_name. Setup the beem walletCreate a new wallet, when not already done.1beempy createwallet Add the posting key of the player by:1beempy addkey ConfigurationA file config.json must exist in the current directory with the following content:12345678910111213{ &quot;wallet_password&quot;: &quot;123&quot;, &quot;account&quot;: &quot;holger80&quot;, &quot;mana_cap&quot;: 23, &quot;ruleset&quot;: &quot;Standard&quot;, &quot;match_type&quot;: &quot;Ranked&quot;, &quot;decks&quot;: { &quot;death1&quot;: [&quot;Zintar Mortalis&quot;, &quot;Haunted Spirit&quot;, &quot;Skeleton Assassin&quot;, &quot;Twisted Jester&quot;, &quot;Haunted Spider&quot;, &quot;Screaming Banshee&quot;, &quot;Undead Priest&quot;], &quot;water1&quot;: [&quot;Alric Stormbringer&quot;, &quot;Naga Warrior&quot;, &quot;Medusa&quot;, &quot;Mischievous Mermaid&quot;, &quot;Pirate Captain&quot;, &quot;Crustacean King&quot;], &quot;fire1&quot;: [&quot;Malric Inferno&quot;, &quot;Serpentine Soldier&quot;, &quot;Elemental Phoenix&quot;, &quot;Goblin Shaman&quot;, &quot;Fire Demon&quot;], }, &quot;play_counter&quot;: 1} wallet_password is the beempy wallet password account: steem user name of the player mana_cap: current mana cap ruleset: current rule set match_type: match type decks contains the different pre defined decks. There is no mana_cap check play_counter diffens how often a deck is played How does it workThe package uses beem for broadcasting the necessary custom_json and finding the transation id. Play a matchAt first a deck is build from the config.json. Therefore, all cards of the player are fetched bythe get_collection function from the Api class. The card names are than matched and the card uid is selected. It is always the card with the highest level selected. In the next step, a secret is created:1&apos;&apos;.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) and the team hash is calculated:123m = hashlib.md5()m.update((summoner+&apos;,&apos; + &apos;,&apos;.join(monsters)+ &apos;,&apos;+secret).encode(&quot;utf-8&quot;))team_hash = m.hexdigest() The first custom_json with id sm_find_match can then be broadcasted:12json_data = {&quot;match_type&quot;:match_type, &quot;mana_cap&quot;:mana_cap,&quot;team_hash&quot;:team_hash,&quot;summoner_level&quot;:summoner_level,&quot;ruleset&quot;:ruleset}trx = self.stm.custom_json(&apos;sm_find_match&apos;, json_data, required_posting_auths=[acc[&quot;name&quot;]]) All custom_json are now streamed until a custom_json with the correct team_hash is found:12345for h in self.b.stream(opNames=[&quot;custom_json&quot;]): if h[&quot;id&quot;] == &apos;sm_find_match&apos;: if json.loads(h[&apos;json&apos;])[&quot;team_hash&quot;] == team_hash: found = True break The trx_id is then stored into the deck dict:1deck[&quot;trx_id&quot;] = h[&apos;trx_id&apos;] It is now checked that a opponent wants to play with the get_from_block function from the steemmonsters api. When at least one player also searches for a match, the second custom_json is send12json_data = decktrx = self.stm.custom_json(&apos;sm_team_reveal&apos;, json_data, required_posting_auths=[acc[&quot;name&quot;]]) Now the battle result is checked:1response = requests.get(&quot;https://steemmonsters.com/transactions/lookup?trx_id=%s&quot; % deck[&quot;trx_id&quot;]) and printed. Roadmap Improved config file handling Show more details about the battle Fetch currently played decks and allow using them for the next battle How to contributePlease create issues in https://github.com/holgern/steemmonsters when something does no work or for a feature wish or improvement. Pull requests are welcome. You can contact me also in discord holger80 [Witness]#3688 GitHub Accounthttps://github.com/holgern/ This page is synchronized from the post: ‘steemmonsters, a new command line tool for battling opponents with your cards’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-a-new-command-line-tool-for-battling-opponents-with-your-decks/"},{"title":"beem version 0.20.9 released - beempy excecutables for windows available","text":"beem is a python library for steem (beem discord channel) The newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem Changelog for release 0.20.8 fix hardfork property in steem Fix resource_market_bytes calculation Adding additional parameter to recharge time calculations by flugschwein (PR #103) fix Comment reward calculations by crokkon (PR #105) Fix typo in witness update feed Fix appveyor CI 0.20.9 - bug fix release to fix beempy excecutables for windows add missing scrypt to the pyinstaller prepare for removed witness api in rpc nodes As all changes are pull requests or bug fixes, I did not create a utopian-io post. Using beempy on windows without pythonIn version 0.20.9, I fixed the appveyor CI. Thus executables for beempy are available for windows as download. The executables do not need an installed python.In the current build, pyinstaller is used to create a standalone exe-file of beempy inside the ci environment: As you can see in the screenshot the sha256 checksum for beempy-0.20.8-1137-ecbefc7f-py36_win64.zip and beempy-onefile-0.20.8-1137-ecbefc7f-py36_win64.zip is12BA214B4603B0740E467612D758400F0716D4E7096758BDA7D37F336133A4C7B87F8FE471EEA226E753ECE37A11355644EFF055920F089DFB315C43C4B8D33808 I copied both zip files with its sha256 checksum from the artifact section ofand uploaded it to the github release section. You can find it here: https://github.com/holgern/beem/releases/tag/0.20.8. You will find a one-file version and a normal version in the release. The one-file version consists of a single EXE file, but is a lot slower than the normal release, as its content has to extracted every time, the exe is started. Installation of the beempy-exeAt first, the file should be downloaded from the github release site.After downloading beempy-0.20.9-1140-3794947a-py36_win64.zip and extracting the zip file, you will find a directory called beempy. Move this directory to e.g.C:\\: Open the powershell (win+x -&gt; Windows PowerShell) As C:\\beempy was not added to the PATH variable, beempy.exe must be started by .\\beempy.exe We can now add C:\\beempy to the path. First, start the normal cmd as admin (Windows+R, enter cmd and press Ctrl+Shift+Enter)1setx PATH &quot;$env:path;C:\\beempy&quot; -m New restart the powershell and beempy can be started everywhere: beempy.exe uses the same sqlite database, as the python script. Edit:Please download the binaries from release 0.20.9: beempy-0.20.9-1140-3794947a-py36_win64.zip beempy-onefile-0.20.9-1140-3794947a-py36_win64.zip This page is synchronized from the post: ‘beem version 0.20.9 released - beempy excecutables for windows available’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beem-version-0-20-8-released-beempy-excecutables-for-windows-available/"},{"title":"Application for a witness vote from the Minnow Support Project","text":"This is my application for a witness vote from the Minnow Support Project (post). I think my main contribution to the Steemit Community is the development of beem. beem is a powerful python library to access the steem blockchain. Starting in February 2018, I added 80,000 lines and committed 650 different changes. beem is almost feature complete and widely used: source.beem is currently on the 26. place of all steem dapps. Currently, I released version 0.20.9 in which I created easy to use executables for windows (post). I also write tutorials about how to use beem: How to encrypt and decrypt memos with beem I check every day which full nodes are working publish a post. The information about node state is also written every 3 hours as json_metadata into a account update operation. As a C/C++ programmer, I have the necessary skills to read the steem C++ code. I try to analyse changes in the source code in my posts: Measuring RC costs for 0.20.6 code review of changes since 0.20.5 - resource delegations pool objects were added I created a website https://beempy.com which let steem user see how the RC costs develop over time (https://beempy.com/resource_costs) and what an account can do with the remaining RC: I’m also developing for steemmonsters: New features in python steemmonsters added. What are you pledging to do to support the Steemit Community?I will continue my effort in developing beem and I will further improve beempy.com. I will analyze the steem source code and write about changes. I will use beem, to test new versions of steem in the testnet. What are you pledging to do to support the Minnow Community?By continuously working on beem, minnows can be further supported by great communities as qurator, steemmonsters and others. What are you pledging to do to support the Minnow Support Project?As mentioned above, by actively developing and maintaining beem, the Minnow Support Project is able to upvote post from registered members. This page is synchronized from the post: ‘Application for a witness vote from the Minnow Support Project’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/application-for-a-witness-vote-from-the-minnow-support-project/"},{"title":"More statistics about the ongoing steemmonster ranked play","text":"I added several statistics about the played steemmonster matches. ELO Rating of all 34032 played decksOn https://beempy.com/static/sm_decks_ranking_all.html, the top 1000 decks are shown.The ranking is a ELO rating number, which is calculated by:andwhereR_A is the rating of deck A, R_B is the rating of deck B, k is set to 40 and S_A is 1 when deck A won, 0 when deck B won or 0.5 when there is a draw. I also show the top deck rating for each mana cap and ruleset: https://beempy.com/static/sm_decks_ranking_20_Standard.html https://beempy.com/static/sm_decks_ranking_17_Standard.html https://beempy.com/static/sm_decks_ranking_23_Standard.html https://beempy.com/static/sm_decks_ranking_19_Lost_Legendaries.html https://beempy.com/static/sm_decks_ranking_18_Taking_Sides.html https://beempy.com/static/sm_decks_ranking_22_Silenced_Summoners.html The data are updated every hour. This page is synchronized from the post: ‘More statistics about the ongoing steemmonster ranked play’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/more-statistics-about-the-ongoing-steemmonster-ranked-play/"},{"title":"python steemmonsters 0.0.13 released - several improvements","text":"Repositoryhttps://github.com/holgern/steemmonsters steemmonsters is a python command line tool for playing steemmonsters. Decks, player name and other settings are defined in a json file. Before playing, the posting key has to be stored inside the beem wallet. The password which is used to encrypt the posting key, can be stored in the config file or entered each time on start. New featuresLoad different settings files on startupIt is possible to load different config json files on startup:1steemmonsters -c config2.json or1python steemmonsters.py -c config2.json The wallet password must not anymore stored in the config fileInstead of storing the wallet password, it can now be entered each time when the tool is started. Just removed the wallet_password line from the config file. Play mode can be aborted with ctrl+c when waitingWhen play_delay is set in the config file, playing a new match can be aborted by pressing ctrl+c after a match when the line1waiting 5 seconds is shown. When pressing ctrl+c at this time point, the program itself is not terminated. Unit tests and CI integration addedA simple unit test for testing generate_key and generate_team_hash has been added. Integration into travis-ci and appveyor.com has been done. steemmonsters can be used without the need to install python on windowsAfter downloading the standalone version of beempy (https://github.com/holgern/beem/releases) and the standalone version of steemmonsters in hte release-site, they can be extracted and used to play steemmonsters. Two versions can be downloaded, a packed one-file exe or a directory containing. The packed one-file is easier to handle, but slower on startup: steemmonsters-0.0.13-29-21b9a931-py36_win64.zip steemmonsters-onefile-0.0.13-29-21b9a931-py36_win64.zip Both zip files are created inside the appveyor CI: After unpacking the beem and the steemmonsters zip file into two different directories, they can be used. Open e.g. the Windows PowerShell and go into the directory containing beem.When not already a wallet was created:1.\\beempy.exe createwallet Adding the posting key of the playing steem account:1.\\beempy.exe addkey On Windows PowerShell, the key can be pasted, using a right click. Create a config.json as shown in https://github.com/holgern/steemmonsters. Go to the directory containing steemmonsters.exe1.\\steemmonsters.exe or1.\\steemmonsters.exe -c ..\\path\\to\\config.json Short help texts were added for all commandsWhen entering ? or help all available commands can be seen: Stop play when reaching a loosing streakIn the config file, stop_on_loosing_streak can be defined. When set, playing stops when loosing the defined number in a row. Commit historyRelease 0.0.13 21b9a93 ctrl+c can be used after a battle to abort playing the wallet password can be removed from the config.json and entered each time instead Release 0.0.12 commit 4fbd84c Help text for commands added Option to change the config file on startup Fix bug in stream Release 0.0.11 commit bc810e4 CI tools (travis and appveyor) added pep8 formating fixed steemmonsters play function improved more information better handling new configuration added: stop_on_loosing_streak - stops fighting when a loosing streak is reached Unit test for utils added spec files for standalone executable addedRelease 0.0.10 commit b3e4e85 New options added for play several bug fixes readme improved GitHub Accounthttps://github.com/holgern/ This page is synchronized from the post: ‘python steemmonsters 0.0.13 released - several improvements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-steemmonsters-0-0-13-released-several-improvements/"},{"title":"The approximated RC costs on steemd.com are wrong for 0.20.6","text":"The RC costs which are currently shown on https://steemd.com are currently wrong. Script to measure RC costsI used the script to measure RC costs:123456789101112131415161718192021222324252627#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentfrom beem.account import Accountimport timewif_posting = &quot;5xx&quot;wif_active = &quot;5xx&quot;if __name__ == &quot;__main__&quot;: stm = Steem(node = &quot;https://api.steemit.com&quot;, keys=[wif_posting, wif_active]) account = Account(&quot;beembot&quot;, steem_instance=stm) rc_mana_old = account.get_rc_manabar() print(account.steem) # vote RC costs # c = Comment(&quot;@holger80/which-influence-has-the-card-order-in-a-deck&quot;, steem_instance=stm) # c.upvote(voter=&quot;beembot&quot;) # transfer RC costs #account.transfer(&quot;holger80&quot;, 0.001, &quot;SBD&quot;, memo=&quot;Measure RC costs&quot;) # comment RC costs tags = [&quot;test&quot;] stm.post(&quot;Test to measure RC costs&quot;, &quot;This is a test to measure the RC costs for a post&quot;, author=&quot;beembot&quot;, parse_body=True, tags=tags) time.sleep(5) rc_mana_new = account.get_rc_manabar() rc_costs = rc_mana_old[&quot;current_mana&quot;] - rc_mana_new[&quot;current_mana&quot;] print(&quot;Costs: %f G RC&quot; % (rc_costs / 1e9)) MeasurementThe table shows the obtained results: type RC costs vote 0.119031 G RC transfer 0.335866 G RC comment 1.464279 G RC It seems that the shown RC costs on https://steemd.com are divided by a factor of 2.The measured RC costs for a vote is 0.11, whereas steemd showed 0.064. A transfer needs 0.33, whereas steemd shows 0.15. A short post costs 1.45 and steemd shows 0.9. This page is synchronized from the post: ‘The approximated RC costs on steemd.com are wrong for 0.20.6’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/the-approximated-rc-costs-on-steemd-com-are-wrong-for-0-20-6/"},{"title":"python steemmonsters 0.0.14 released ","text":"steemmonsters 0.0.14 is available for download: https://github.com/holgern/steemmonsters/releases/tag/0.0.14 questsIt is possible to view the current quest with the quest command:s Issue #5 fixedAn error Transaction [ ] not found. was shown sometime. This was caused by checking the steemmonsters api to early. This should be fixed in 0.0.14 Stream crashes somethimeThis is also improved in version 0.0.14 Two new api calls were added get_player_quests(player) - uses https://steemmonsters.com/players/quests?username= for getting the current quest state get_purchases_status(id) - uses https://steemmonsters.com/purchases/status?id= for getting information about a pack Please let me know if everything is working. When not please open an issue in https://github.com/holgern/steemmonsters/issues/ This page is synchronized from the post: ‘python steemmonsters 0.0.14 released ‘ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-steemmonsters-0-0-14-released/"},{"title":"python steemmonsters 0.0.15 - Several improvements and new features","text":"Repositoryhttps://github.com/holgern/steemmonsters steemmonsters is a python command line tool for playing steemmonsters without graphics. The newest version 0.0.15 can be downloaded here. New API comandsget_purchases_status returns information about a purchased card pack:123from steemmonsters.api import Apiapi = Api()api.get_purchases_status(&quot;P-DTQ5OEKIVK&quot;) get_player_quests returns information about the quest:123from steemmonsters.api import Apiapi = Api()api.get_player_quests(&quot;holger80&quot;) get_purchases_stats returns how many packs were purchased:1234&gt;&gt;&gt; from steemmonsters.api import Api&gt;&gt;&gt; api = Api()&gt;&gt;&gt; api.get_purchases_stats(){&apos;packs&apos;: [{&apos;edition&apos;: 0, &apos;qty&apos;: &apos;300000&apos;}, {&apos;edition&apos;: 1, &apos;qty&apos;: &apos;181059&apos;}]} api.settings() shows the current games settings. api.players_leaderboard() shows the leaderboard. get_player_login returns the encrypted token for login:123from steemmonsters.api import Apiapi = Api()api.get_player_login(&quot;holger80&quot;) player_save_team( name, team, player, token, mana_cap) can be used to store a new team, which then also available in the homepage. token is the decrypted token using the posting key from the get_player_login call. player_delete_team(name, player, token, mana_cap) deletes deck name. get_player_saved_teams(player, token, mana_cap) returns all saved teams. get_player_teams_last_used(player, mana_cap) returns the last used team of a player. get_battle_history(player=&quot;%24top&quot;) gets the last top battles. When settings player=holger80 the last battles of the player are returned instead. New Commands addteam1addteam water_test Alric Stormbringer:2, Frost Giant:1, Spineback Turtle:2, Pirate Captain:3, Crustacean King:3 or1addteam water_test Alric Stormbringer, Frost Giant, Spineback Turtle, Pirate Captain, Crustacean King adds the water_test team. The stored team can then be used for play:1play water_test The team is also stored in the steemmonsters.com homepage: The token for modifing teams is decrypted by:12345678from beembase import memo as BtsMemofrom beemgraphenebase.account import PrivateKeyfrom steemmonsters.api import Apiapi = Api()response = api.get_player_login(&quot;holger80&quot;)wif = &quot;5xxx&quot; # posting keytoken = BtsMemo.decode_memo(PrivateKey(wif), response[&quot;token&quot;]).replace(&apos;\\n&apos;, &apos;&apos;) deleleteam1deleteteam water_test removes a stored team. copyteam1copyteam clove71 test1 copies the last played team from clove71 and stores is as test1 team1team test1 shows a stored team lastteam1lastteam or1lastteam clove71 shows the last played team copytopteamIs the same command, but instead of a player name, the top100 position is used.1copytopteam 4 test2 stores the last team from the top 4 player as test2 lasttopteam1lasttopteam 4 shows the last played team from top 4 player savedteams1savedteams shows all saved teams startquest123sm&gt; startquestsm_start_quest broadcasted!You have to solve the Stir the Volcano quest can be used to start a new quest. In this example, 10 games using a fire deck will solve the quest. claimquestWhen a quest is solved, this command can b e used to claim the reward. conflictShows the current conflict playplay can now be used with stored teams from the homepage. At first the json is checked and when there is no such team, the stored teams are checked. When a team with the given name is found, it is used. play random works only with decks stored in the json file. mana_cap and ruleset must not be defined in the json file, it is now fetched on startup. Commit historyMore commands added commit 913b1577 conflict - shows the currect conflict team - shows a stored team player - shows the information about the player lasttopteam - shows the last played team copytopteam - copies the last played teamMerged changes from #7 manually commit 18af8edRelease 0.0.15 commit acc7bc6Add api calls and improve stream and play commit 534cc06New api calls added: get_purchases_status get_player_quests quest command added for showing the current player quest stream fixed play improved GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘python steemmonsters 0.0.15 - Several improvements and new features’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-steemmonsters-0-0-15-several-improvements-and-new-features/"},{"title":"steem forever (rewarding old posts) with beem","text":"What to do when you want to reward an old post with an upvote? There are services that are doing this as steem-forever but they charge some percentage for their service. We need a script that creates a comment under the post, set the beneficiaries and upvote the comment.We are using beem:1pip install beem for this. Store the following script as steem-forever.py 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentfrom datetime import datetime, timedeltaimport timeimport getpassimport argparsedef valid_age(post, hours=156): &quot;&quot;&quot; Checks if post is within last twelve hours before payout. &quot;&quot;&quot; if post.time_elapsed() &gt; timedelta(hours=hours): return False return Trueif __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser() parser.add_argument(&quot;authorperm&quot;) parser.add_argument(&quot;votepercentage&quot;) args = parser.parse_args() authorperm = args.authorperm votepercentage = float(args.votepercentage) wif = getpass.getpass(prompt=&apos;Enter your posting key.&apos;) stm = Steem(keys=[wif]) account = stm.wallet.getAccountFromPrivateKey(wif) c = Comment(authorperm, steem_instance=stm) if c.is_pending() and valid_age(c): while c.time_elapsed() &lt; timedelta(seconds = 60 * 15): print(&quot;waiting that the post is 15 minute old&quot;) time.sleep(60) c.upvote(weight=votepercentage, voter=account) else: body = &quot;The reward of this comment goes 100 %% to the author %s. This is done by setting the beneficiaries of this comment to 100 %%.&quot; % (c[&quot;author&quot;]) beneficiaries = [{&quot;account&quot;: c[&quot;author&quot;], &quot;weight&quot;: 10000}] stm.post(&quot;rewarding %s&quot; % c[&quot;author&quot;], body, author=account, reply_identifier=c[&quot;authorperm&quot;], beneficiaries=beneficiaries) c.refresh() c_comment = None created = None for r in c.get_all_replies(): if r[&quot;author&quot;] == account: if created is None: created = r[&quot;created&quot;] c_comment = r elif created &lt; r[&quot;created&quot;]: created = r[&quot;created&quot;] c_comment = r while c_comment.time_elapsed() &lt; timedelta(seconds = 60 * 15): print(&quot;waiting that the comment is 15 minute old&quot;) time.sleep(60) c_comment.upvote(weight=votepercentage, voter=account) print(&quot;Comment upvoted&quot;) When running this script, it asks for the posting key. This key is only temporarly stored in the steem object and will be forgotten when the program exits. Rewarding a paid out postI selected an old post from fullnodeupdate and will reward it with my test account @beembot with a 50% upvote:1python steem-foreever.py https://steemit.com/full-nodes/@fullnodeupdate/full-api-node-update---25102018 50 A new comment is created and after 15 minutes in a loop the comment is upvoted with 50 %.The beneficiaries are set to 100 % for giving the complete comment reward to the author. This page is synchronized from the post: ‘steem forever (rewarding old posts) with beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-forever-rewarding-old-posts-with-beem/"},{"title":"holger80`s Curation League - week 7","text":"source You can read more about the start of my new Curation League.28 accounts wanted to participate, thanks and welcome to my Curation League. There are two new participants from last week. Thank you all for participating! The curation of the last seven days ending by 26.08.2018 7:00:00 UTC are included in this analysis. To enter the contest, please write a comment with add me. A comment with remove me will exclude an account from the contest. I will automatically scan the comments for building a participation list. Winner for week 7Gratulations to mys for winning this round! 7.28 is a really great score! reazuliqbal for the second place! arabson1990 for the third place! All three did a great job in selecting undervalued posts for curation! Result table eff_sp is the median effective Steem power of the account over last week sum_weight is the sum of all given votes. As a 100% votes can be given every 2.4 hours, this number should be close to 7000 (24 * 7 / 2.4 * 100). median weight is the median vote weight over the last week reward is the collected curation rewards within a week divided by effective Steem Power and multiplied by 1000 adj. rew. is reward when sum_weight is smaller than 7000 and reward / sum_weight * 7000 otherwise. This assures that voting more than the optimum will not lead to a better ranking. # account eff_sp sum weight median weight reward adj. rew. 1. mys 2932.5 5737 2.00 7.28 7.28 2. reazuliqbal 726.6 7200 100.00 5.28 5.13 3. arabson1990 170.6 7400 100.00 4.89 4.63 4. amosbastian 1630.0 5862 15.00 3.85 3.85 5. sourovafrin 936.9 6635 100.00 3.62 3.62 6. jacekw 604.7 7671 25.00 2.69 2.45 7. grzyb77 227.4 5920 50.00 2.10 2.10 8. diosbot 2414.5 7824 43.00 2.01 1.80 9. holger80 6935.9 7126 25.00 1.54 1.51 10. crypto-econom1st 506.9 5433 100.00 1.36 1.36 11. abh12345 15688.1 7492 5.00 1.41 1.32 12. cryptoyzzy 348.9 6239 100.00 1.26 1.26 13. doughtaker 763.5 9632 66.00 1.73 1.26 14. yasu24 2084.8 5321 12.00 1.09 1.09 15. ajayyy 169.1 1800 100.00 0.83 0.83 16. blanchy 558.7 5429 100.00 0.72 0.72 17. annaburska 1228.0 4782 51.00 0.71 0.71 18. isnochys 1243.5 4983 10.00 0.71 0.71 19. emrebeyler 6211.7 7732 100.00 0.77 0.69 20. rose98734 28.9 1100 100.00 0.59 0.59 21. yailinbel 31.3 870 100.00 0.52 0.52 22. synergysteem 153.1 800 100.00 0.52 0.52 23. dexterdev 196.9 2500 100.00 0.42 0.42 24. jlordc 94.7 1600 100.00 0.34 0.34 25. lelon 136.4 2200 100.00 0.34 0.34 26. hispeedimagins 208.2 2397 100.00 0.32 0.32 27. isarmoewe 757.7 2000 25.00 0.23 0.23 28. mariusclaassen 15.2 100 100.00 0.07 0.07 Top 10 curationThis table shows the best ten curation rewards. The reward are calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Comments were skipped. This section is dominated this week by mys. Nice work! Keep in mind that the reward is normalized to a 100% vote. reward voter delay author title 0.523 mys 23.4 altcointrading Understanding Blockchain Technology infographic inside 0.515 mys 662.1 eu-id eSteem University Update #5 - Jejak eSteem di Indonesia 0.367 mys 656.8 eu-id eSteem University Update#3 - Reward Bulanan Untuk eSteemian Aktif Discord eSteem 0.361 reazuliqbal 87.0 bostrot Customizable Steem bot framework 0.342 mys 23.9 emsonic PL/ENG Doom 0.335 mys 23.4 karitas Kounaria Tavern - Tinos Island, Greece 0.322 mys 23.4 kaitokiva Buddy Coffee &amp; Travel Ha Noi 0.314 mys 23.4 taget Spring comes There are no stops on the field. 0.307 mys 23.4 lisa-jang 수원 매일매일 먹고 싶은 ‘간장게장’ 0.280 mys 5168.9 hyunm9 스트레스 받았을 땐? - 매콤한 숯불쭈꾸미와 새우튀김! 0.279 mys 23.4 dolphinscute Casa Italia - Restaurant i choice Top 25 AuthorsThis table shows the post authors which leaded to the highest post curation reward divided by effective Steem Power and multiplied by 1000. All rewards from all participating accounts were summed up. Comments were skipped. reward vote count author avatar 1.511 18 sourovafrin 0.882 2 eu-id 0.657 6 bostrot 0.601 41 hallmann 0.514 17 burnpost 0.471 12 steemit-jp 0.466 9 robertbira 0.426 6 ismailkah 0.395 3 aibolit66 0.394 6 clayjohn 0.383 6 mdsamad 0.370 14 veggie-sloth 0.353 4 aaronli 0.346 2 maruay59 0.345 5 callmejoe 0.335 10 mightypanda 0.334 19 sndbox 0.328 7 curart38 0.322 1 kaitokiva 0.307 1 lisa-jang 0.293 3 abitrolly 0.281 9 josephace135 0.279 1 dolphinscute 0.279 25 lesiopm 0.278 5 drsensor Top 3 curationThis table shows the top 3 curation posts of each participating account with at least a collected curation reward higher than 0.5. The reward is calculated by post curation reward divided by effective Steem Power and multiplied by 1000 divided by vote weight and multiplied by 100. Thus, the reward is normalized to a vote of 100%. Only posts are shown. mys reward delay [min] author title 0.523 23.4 altcointrading Understanding Blockchain Technology [infographic inside] 0.515 662.1 eu-id eSteem University Update #5 - Jejak eSteem di Indonesia 0.367 656.8 eu-id eSteem University Update#3 - Reward Bulanan Untuk eSteemian Aktif Discord eSteem reazuliqbal reward delay [min] author title 0.361 87.0 bostrot Customizable Steem bot framework 0.278 17.8 sourovafrin [Hapramp] [0.0.7] Unable to comment on any post 0.256 25.4 abitrolly [development] Running SteemPlus natively on Firefox arabson1990 reward delay [min] author title 0.217 31.6 callmejoe Uczenie maszynowe #4 Ten z innymi funkcjami aktywacji 0.181 14.6 hallmann Steem? A komu to potrzebne? A dlaczego? [PORADNIK] 0.140 26.5 nwacrypto Moja druga pasja! Wianki! amosbastian reward delay [min] author title 0.254 188.7 alvinvoo http://imglab.ml/ - new feature 0.238 45.4 sourovafrin [Hapramp] [0.0.8] Text is overlapping on Account Histroy 0.195 45.2 isabella394 Spanish Translation of Node.js (Part 1) (1130 words) sourovafrin reward delay [min] author title 0.233 1093.4 ayobam Detailed FAQs for TrebleShot 0.205 97.8 jbeguna04 Logo for Baking-Recipes 0.178 28.1 aibolit66 Strawberry - macro! jacekw reward delay [min] author title 0.258 26.8 sylmalmaj Pełnia szczęścia? - historia pierwszego miotu 0.185 23.9 photographxx Historia Maski Przeciwgazowej MUA ,,Słoń” 0.178 12.3 callmejoe Uczenie maszynowe #4 Ten z innymi funkcjami aktywacji grzyb77 reward delay [min] author title 0.206 24.2 kapitanrosomak CS:GO live 0.125 24.1 franino Zakazane narkotyki powszechnie dostępne w dawnych czasach - W medycynie, w Coca Coli i nie tylko… 0.106 24.2 angatt Druga twarz Hansa Klossa diosbot reward delay [min] author title 0.097 26.2 mefio Maoizm - ideologia komunistycznych Chin. 0.085 26.8 thomaslucania Al-Julani - ojciec chrzestny syryjskiej rebelii 0.085 25.8 koszanikokosza w upał to wszystko nie tak… holger80 reward delay [min] author title 0.157 32.4 adam-saudagar Supbot API Whatsapp Group Chatbot API Developement update #2 0.136 15.2 steemstem Utopian Hackathon - Revealing Date, Topic, Prizes &amp; More Details on The First Utopian.io Community Hackathon 0.097 62.5 juecoree Who is prone to phishing? + Report [Analysis] crypto-econom1st reward delay [min] author title 0.120 28.1 mdsamad King stal this boy funny photo 0.106 28.1 mdsamad Some news stories about news paper… 0.105 270.1 lokiyngling It’s Windy today abh12345 reward delay [min] author title 0.116 18.0 enjar World of Warcraft: Market Thoughts 0.110 16.8 danielsaori Witness-Mon: A Witness Monitoring System 0.085 19.9 hitmeasap Before I Try @Dlive There Are A Handful Of Things I Need To Do. Any Dlive&amp;OBS Experts? cryptoyzzy reward delay [min] author title 0.277 33.7 alexisdauliac Théorie ou pratique? Qui de l’œuf ou la poule est arrivé en premier? 0.083 25.2 helo The Magic Frog in French (Development Update #4) by helo 0.074 24.1 curart38 street-art by MAYE &amp; MOMIES doughtaker reward delay [min] author title 0.198 24.8 hitenkmr Actifit iOS App : Develpment contribution 3 0.099 266.6 bostrot Customizable Steem bot framework 0.096 110.9 ajayyy Cunctan’s Square Turn Based Puzzle Game yasu24 reward delay [min] author title 0.193 180.7 kaz-ami 金魚すくいもスーパーボールも✨夏の楽しみ丸ごと全部楽しめるレストラン✨山賊 0.193 333.5 afukichi 「暑い中ありがとうございました。これ、店長からです。」 0.154 333.5 matenro 祝！ newbie卒業！ ajayyy reward delay [min] author title 0.171 55.6 clayjohn Godot Documentation: Lights and Shadows in 2D 0.136 125.5 clayjohn Godot Documentation: Using a Viewport As a Texture 0.065 633.5 swapsteem Introducing SwapSteem alpha - Peer to Peer Exchange for Steem blockchain blanchy reward delay [min] author title 0.161 70.0 petesays Human touch 0.089 1700.4 petesays River deep Mountain high 0.070 496.9 willymac BONELAND annaburska reward delay [min] author title 0.074 105.6 breadcentric Bo zakwas był zły 0.037 143.8 rolsonpatison Czy chęć zachowania jednolitości etnicznej to rasizm lub ksenofobia? 0.036 182.9 khrom [Riposto-recenzja] Serial Wiedźmin nie taki zły jak go malują. isnochys reward delay [min] author title 0.064 97.5 horpey Life Tips - Motivations 0.040 29.1 trdaily #tr etiketinde en çok ödül alan yazılar (2018-08-15) 0.033 28.0 trdaily #tr etiketinde en çok ödül alan yazılar (2018-08-14) emrebeyler reward delay [min] author title 0.120 19.4 zoltarian Travel with Friends (Halkidiki, Greece) 0.070 25.1 muratkbesiroglu Sci-Fi Novel: The Ultimate Debate - Part 32: Cold Shower In The Cave 0.057 25.1 muratkbesiroglu Sci-Fi Novel: The Ultimate Debate - Part 31: Omaga’s Story rose98734 reward delay [min] author title 0.173 139.4 aulnyaksyabandi Spending Free Time at The Beach 0.069 330.6 marena5 Rastros 0.069 1707.0 marena5 Bollo preñao yailinbel reward delay [min] author title 0.135 35.5 coliraver Café y Buenos días 0.095 28.2 angielb El culto de las 0:00 Serie fotográfica 0.065 138.1 coliraver Hortencia synergysteem reward delay [min] author title 0.215 315.8 gracefulhearts Hello Steemians, Let me introduce myself … 0.131 17.9 makinstuff Aquaponics Testing Log 0.124 131.7 youhavewings Love Friday - Caturday “Mina and Emma La Rue” If you want to participate, just drop a comment with add me. This page is synchronized from the post: ‘holger80`s Curation League - week 7’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/holger80-s-curation-league-week-7/"},{"title":"Rewarding paid-out posts without using python","text":"Yesterday I wrote a post where a python script is used for rewarding already paid-out posts. As not everybody can handle python scripts, I created a simple solution that does not need any scripts or coding. I created the account @rewarding which can be used to create comments under already paid-out posts where the beneficiaries is set to 100% for supporting the author. I hope my 50 SP delegation is sufficient for now. How does it workSend 0.001 SBD to @rewarding with a post link of an already paid-out post that is not upvoted by you. After sending the transfer, a comment is created by @rewarding, where the beneficiaries are set to 100% supporting the author. There is no automatic upvoting, after sending the transfer, the created comment has to be upvoted manually after 15 minutes. It is possible to easily check if the benificiaries are set correctly by replacing steemit.com by steemd.com. Some restrictionsIt is not possible to create comments when: post author and the memo sender are the same person, the post has not paid out yet, unexpired comment was already created, the given link points to a comment and not a post, the post was already upvoted by the memo sender. I have no idea if this is useful or will be used. If you really like the idea you can delegate some SP to @rewarding, so that the account will not run out of RCs. This page is synchronized from the post: ‘Rewarding paid-out posts without using python’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/rewarding-paid-out-posts-without-using-python/"},{"title":"python steemmonsters 0.0.23 - new play modi and pack handling added","text":"Repositoryhttps://github.com/holgern/steemmonsters steemmonsters is a python command line tool for playing steemmonsters without graphics. The newest version 0.0.23 can be downloaded here. New API commandsget_open_all_packsOpens all booster packs at once123from steemmonsters.api import Apiapi = Api()response = api.get_open_all_packs(&quot;holger80&quot;, 1, token): get_open_packsOpens an owned booster pack.123from steemmonsters.api import Apiapi = Api()response = api.get_open_packs(&quot;B-xxx&quot;, &quot;holger80&quot;, 1, token): get_cards_packsReturns the unopened packs of a player123456789101112from steemmonsters.api import Apiimport jsonfrom beembase import memo as Memofrom beemgraphenebase.account import PrivateKey, PublicKeyapi = Api()account = &quot;holger80&quot;response = api.get_player_login(account)postingwif = &quot;5xx&quot;token = Memo.decode_memo(PrivateKey(postingwif), response[&quot;token&quot;])response = api.get_cards_packs(account, token)tx = json.dumps(response, indent=4)print(tx) get_market_for_sale_by_cardReturns the currently available cards on the market1234from steemmonsters.api import Apiapi = Api()response = api.get_market_for_sale_by_card(10, &quot;true&quot;, 1)print(response[0]) get_market_for_sale_groupedShows the minimum and maximum prices for all cards.1234from steemmonsters.api import Apiapi = Api()response = api.get_market_for_sale_grouped()print(response[0]) Command line toolNew play modi1sm&gt; play quest f1 Plays team f1 until the quest is solved. 1sm&gt; play mirror Whenever the current team loses a defined number of times in a row, a new team from the last played teams of the top 100 is copied and used. 1sm&gt; play t1,t2,t3 Play team t1 until a defined number of loses in a row occurs. Then the team is switched to the next one. For the example, &quot;switch_on_loosing_streak&quot;: 1 is set and t1 has lost two times. The next match is then played with team t2. After t3, t1 is used. 1sm&gt; play random t1,t2,t3 Plays one of the three given teams. The team is randomly chosen. The team is switched whenever a pre-defined number of loses in a row occur. New parameter for the config file1&quot;switch_on_loosing_streak&quot;: 1, defines when the current team is switched. This plays only a role, when more than one team was defined. Creating new decks based on already played teams with a high winning rate.1sm&gt; splinter fire 2 Shows up to 15 fire splinter teams with summoner level 2. One of the shown teams can be selected and stored under a given name. Show, open and gift packs1sm&gt;packs shows all unopened packs of the currently selected player 1sm&gt;openpack shows all available packs and let the user select one and opens it then. The open market value and card name of all cards are shown in a table. 1sm&gt; giftpacks holger80 After starting the command, all available decks were shown and the user can set how many packs are sent. Account switch without changing the config file1sm&gt; set_account holger80 Changes the currently selected player to holger80, without the need to change the config file and reload it. Commit historyRelease 0.0.23 commit e9bdae5 Fix value calculation for openpackRelease 0.0.22 commit fc33cd5 Add get_market_for_sale_grouped api call Improve output for openpack Collection shows card names Release 0.0.21 commit 70c4ff3 openpack added play random &lt;deck1&gt;,&lt;deck2&gt;,.. added play quest play_counter fixed get_open_packs and get_open_all_packs API-calls improvedRelease 0.0.20 commit d25cbae Utility functions get_summoner_level, convert_team_id_to_string, expand_short_form, convert_team_string_to_id and get_cards_collection added to prevent duplicated code set_account can be used to switch an account packs shows the unopened packs giftpacks moves unopened packs to an other player splinter &lt;plinter&gt; &lt;summoner_level&gt; can be used to received often played decks and store them for later usage play quest &lt;team_name&gt; - plays until the quest is solved play mirror - selects randomly a last played team for the op 100 and uses it, deck is switched when losing, or when switch_on_loosing_streake is set, when reached play &lt;deck1&gt;,&lt;deck2&gt; plays the first deck and switches when loosing, when switch_on_loosing_streake is set, when switch_on_loosing_streake is reached. Release 0.0.16 commit 0ec9576c edition 2 added quests command improvement GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘python steemmonsters 0.0.23 - new play modi and pack handling added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-steemmonsters-0-0-23-new-play-modi-and-pack-handling-added/"},{"title":"python steemmonsters 0.0.26 - bug fix release","text":"steemmonsters is a python command line tool for playing steemmonsters without graphics. The newest version 0.0.26 can be downloaded here. The previous release had a problem with mixed teams (from config-file and website). This problem should be fixed with the newest release 0.0.26. Please report any other problems. I added also the switch_on_winning_streak which switches a deck, when defined in the config and more than one deck given for the play command. Example123456789101112{ &quot;account&quot;: &quot;holger80&quot;, &quot;match_type&quot;: &quot;Ranked&quot;, &quot;decks&quot;: { &quot;light&quot;: [&quot;Tyrus Paladium&quot;, &quot;Clay Golem&quot;, &quot;Defender of Truth&quot;, &quot;Divine Healer&quot;, &quot;Angel of Light&quot;, &quot;Air Elemental&quot;] }, &quot;play_counter&quot;: 50, &quot;play_delay&quot;: 3, &quot;stop_on_loosing_streak&quot;: 10, &quot;switch_on_loosing_streak&quot;: 1, &quot;switch_on_winning_streak&quot;: 1} The dl1 deck was stored in the website. I can now mix both teams and start playing:1sm&gt; play dl1,light1 After two wins or losses in a row, the deck is switched. This page is synchronized from the post: ‘python steemmonsters 0.0.26 - bug fix release’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/python-steemmonsters-0-0-26-bug-fix-release/"},{"title":"Test for setting beneficaries with beempy","text":"My intention was to use my testing account beembot, for creating this post. I did a logout and a login with beembot, apperently holger80 was in the cache and used for posting. I created this post with the steemit.com interface, no beneficiaries are set. Now, I’m using the new beempy command:1beempy beneficiaries @holger80/test-for-setting-beneficaries-with-beempy fullnodeupdate:5%,utopian-io:5% I was to slow this time and the command failed with:1beemapi.exceptions.UnhandledRPCError: Assert Exception:_c.abs_rshares == 0: Comment must not have been voted on before specifying beneficiaries. The new beempy command will be added to the new beem version. second test with beembotI created https://steemit.com/test/@beembot/setting-beneficiaries-with-beempy-second-test with the normal steemit.com interface and set no beneficiaries. Then I use the beempy command:1beempy beneficiaries @beembot/setting-beneficiaries-with-beempy-second-test holger80:10,fullnodeupdate:10 It failed with1beemapi.exceptions.RPCError: Assert Exception:beneficiaries[i - 1] &lt; beneficiaries[i]: Benficiaries must be specified in sorted order (account ascending) I tried again with1beempy beneficiaries @beembot/setting-beneficiaries-with-beempy-second-test fullnodeupdate:10,holger80:10 and succeeded! So, setting beneficiaries with beempy will be added to the next update! This page is synchronized from the post: ‘Test for setting beneficaries with beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/test-for-setting-beneficaries-with-beempy/"},{"title":"update for beem - post, reply and beneficiaries commands added to beempy","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 504 unit tests and a coverage of 72 %. The current version is 0.20.10.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New Featuresbeempy beneficiaries1beempy beneficiaries authorperm account1:10%,account2:20%,... Adds beneficiaries to post/comment authorperm. This is only sucecssfully when the post/comment was not upvoted yet. More information about this can be found in this test post. beempy post12345678910111213141516usage: beempy post [OPTIONS] BODY broadcast a post/commentOptions: -a, --account TEXT Account are you posting from -t, --title TEXT Title of the post -p, --permlink TEXT Manually set the permlink (optional) --tags TEXT A komma separated list of tags to go with the post. --reply_identifier TEXT Identifier of the parent post/comment, when set a comment is broadcasted --community TEXT Name of the community (optional) -b, --beneficiaries TEXT Post beneficiaries (komma separated, e.g. a:10%,b:20%) --no-parse-body Disable parsing of links, tags and images --help Show this message and exit. BODY is the link to a text file containing the body text of the post/comment. The post command can also parse a yaml header. typora can be used to create a markdown with yaml header. Broadcasting was done by:1beempy post beempy-post-test.md The broadcasted test post can be found here,The yaml header of the example:123456---title: beempy test posttags: test, beempyauthor: beembotbeneficiaries: holger80:10%--- The following keywords can be used: title author permlink reply_identifier community parse_body beneficiaries Parameter set as option overwrite parameter defined in the YAML part. When e.g. --title a is set and in the file title: b is written, the resulting title is then a. Editing of posts is possible.Just edit the markdown file and broadcast the post again. The beneficiaries must be removed when the post should be modified. beempy reply12345678Usage: beempy reply [OPTIONS] AUTHORPERM BODY replies to a commentOptions: -a, --account TEXT Account are you posting from -t, --title TEXT Title of the post --help Show this message and exit. The reply can be used to broadcast short comments. New GetWitnesses class1234from beem.witness import GetWitnessesw_list = GetWitnesses([&quot;gtg&quot;, &quot;timcliff&quot;])print(w_list [0])print(w_list [0]) results in12&lt;Witness gtg&gt;&lt;Witness timcliff&gt; The class can be used to fastly fetch a list of witnesses at once. RC costs adapted to the changes of 0.20.6With 0.20.6 some parameter for RC costs calculation were changed. The changes are adapted in the RC class. Most important change is that resource_execution_time is included in the RC calculation. update_account_keys function added12345from beem import Steemfrom beem.account import Accountstm = Steem(keys=[&quot;5xx&quot;]) # owner keyaccount = Account(&quot;name&quot;, steem_instance=stm)account.update_account_keys(&quot;new_password&quot;) new_password is the new master password and the posting_key, active_key, owner_key and memo_key are calculated from the master password.This is done by:123for role in [&apos;owner&apos;, &apos;active&apos;, &apos;posting&apos;, &apos;memo&apos;]: pk = PasswordKey(account[&apos;name&apos;], new_password, role=role) key_auths[role] = format(pk.get_public_key(), self.steem.prefix) Commit historyFix typo and adapt changelog commit a5adc41beAdd beempy post and beempy reply commit 5b4d413Add beneficiaries command to beempy commit 3145ffd New anyx.io node added to nodelist GetWitnesses fixedFix issue #115 - Signing operations from Python2 throw beem.exceptios.InvalidWifError commit 5e1e77beFix for issue #109: Add missing get_witnesses commit 71827a6 GetWitnesses added to witnessSeveral improvements and prepare next release commit 5b269ab9Account update_account_keys added for changing account keys comment fixed for chains without SBDRC RC changes from 0.20.6 includedWitness Fixed for chains without SBD symbolOperations Claim_reward_balance fixed for chains without SBD symbol Chains VIT fixed Github accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - post, reply and beneficiaries commands added to beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-post-reply-and-beneficiaries-commands-added-to-beempy/"},{"title":"rewarding - delayed upvote and paid-out post upvote helper","text":"source You probably saw me using the @rewarding bot for giving delayed upvotes. Always waiting until a post is 15 minutes old before I can finally give a vote, has annoyed me. Thus, I coded this little helper. It is open to everyone but works only when giving @rewarding the posting role. Giving rewarding the posting authority can be done by https://steemconnect.com/authorize/@rewarding. Giving the other account posting authority means that this account can broadcast all operation that need only posting authority as voting in the name of the account. In order to disable commands for a post/comment, I can add1$rewarding skip to the post/comment. Only the first version of a post / comment is parsed.Edited posts/comments are skipped and not parsed for commands. Delayed upvotes of pending posts / commentsCommand in a post1$rewarding 100% 15min This command triggers a self-vote after 15 minutes with 100%. 1$rewarding set account1:10%,account2:20% This command tries to set beneficiaries for the post. The works only when no vote arrives before. The rewarding bot parses the head blocks for commands. When one is found, it is analyzed and a comment option operation is broadcasted in this case. Due to the parsing, there is some delay and setting beneficiaries may not work when there arrived a vote before.1$rewarding set account1:10%,account2:20% upvote 100% 15 min This command sets beneficiaries and trigger a self-vote after 15 min with 100 %. Command in a comment1$rewarding 90% 14min This command triggers a vote of the direct parent of the comment after 14 minutes (time is relative to creation time of the parent comment / post). 1$rewarding 90% Triggers a vote after 15 minutes. 1$rewarding set account1:10%,account2:20% This command triggers a command_options command that tried to set beneficiaries for the comment in which the command was included. By this, I could give the post author something in return. As mentioned above, this works only when in the short delay until the operation is broadcasted no vote has arrived. 1$rewarding set account1:10%,account2:20% upvote 100% 15 min This command sets beneficiaries for the comment itself and triggers an upvote of the parent post / comment. Upvoting paid-out postsCommand in a comment1$rewarding 90% This command let @rewarding creates a comment in which beneficiaries are set 100% to the post author. In this case, the comment and the comment_options are broadcasted in the same block. Thus setting beneficiaries will always work. After 15 minutes, the created comment is upvoted with 90%. Using the commands without giving rewarding posting authorityWhen rewarding has not a posting authority, it will not upvote the post/comment but reply after the given time with a reminder comment which includes the name of the account that wrote the comment. When using a notification service as GINA this will lead to a reminder to upvote the post manually. Using the commands without giving rewarding posting authority on paid-out postsIn this case a comment with 100% beneficiaries is created and after 15 min, the account is reminded to upvote by broadcasting a new reply comment with a account name mention. Transfer 0.001 STEEM/SBD to rewardingPaid-out postWhen the memo an authorperm of a paid-out post includes, a comment with 100% beneficiaries is created. When posting authority is givenSending a memo with the following content:1100%,15min,authorperm will trigger an upvote of the given authorperm.When the given authorperm is a paid-out post, a comment is created with 100% beneficiaries and this comment is then upvoted with 100% Thanks to all Delegators that allow me to run this project:Incoming - 300.000 SP50 SP delegated by @idikuci50 SP delegated by @dimitrisp50 SP delegated by @condeas50 SP delegated by @dj12350 SP delegated by @pechichemena Please let me know if you have ideas of other commands that I should implement or other suggestions. Please report also bugs. This page is synchronized from the post: ‘rewarding - delayed upvote and paid-out post upvote helper’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/rewarding-an-delayed-upvote-and-paid-out-post-upvote-helper/"},{"title":"rewarding - Contribution to Steem Business Plan Competition from aggroed","text":"ProblemWhen I manually curate and I see a post long before it is 15 minutes old, I have to wait and upvote later (Upvoting before will reduce my upvote value linearly). Normally, I get distracted and forget to upvote optimally at 15 minutes. The same happens for comments. It would also be convenient to specify an STU amount for upvoting comments. (The upvote should be higher than the dust threshold of 0.02$). For example, I would like to upvote the comments under my post with 0.03$. It is not easily possible to set beneficiaries of a post or comment. I have currently no options to specify beneficiaries when writing comments. I have no direct possibility to reward already paid-out posts without paying a fee. VisionI want to create a simple solution that solves these problems. Writing a simple command into a comment will trigger a bot that upvotes the post/comment in my name. By doing this, I increase my engagement as I have to write a comment, so I can also write something about the post. MissionI will create and maintain a bot that continuously parses the blockchain and reacts on specific commands. Everything will be free, but delegating small amounts to the bot will be rewarded (delegation is needed, as the bot may get RC problems otherwise). Plan I already created the @rewarding project to give a solution to this problem. The @rewarding bot is currently parsing the blockchain and reacts on the following commands (when the user has given rewarding the posting role, otherwise automatic upvoting is not possible):(I will deactivate the rewarding bot by $rewarding skip) $rewarding 50% 15min -&gt; will upvote the parent post/comment with 50% using the voting power of the comment writer. If there is no parent, the post is upvoted instead (triggered self-vote). The bot will upvote the comment with a small percentage to confirm the command. $rewarding 0.03$ 15min -&gt; calculates the necessary vote percentage and upvotes in 15 min $rewarding set account1:10%,account2:10% -&gt; sets beneficiaries of the post/comment itself $rewarding set account1:10% and upvote 50% -&gt; set beneficiaries of the post/comment itself and upvote the parent. If there is no parent, the post is upvoted instead (triggered self-vote) $rewarding 50% 15min in a comment replied to a paid-out post/comment: will create a comment with beneficiaries set to 100% to the author and upvote this created comment after 15min with 50%. As mentioned, the bot will confirm the command when it is correct with a small upvote. It is also possible to send a memo with 0.001 SBD/STEEM to rewarding with the following content: 100%,15min,authorpermauthorperm is a steemit post/commentThe link is then upvoted after 15 min with 100% in the example. Already paid-out posts are handled as above. In the next three month, I will improve the command syntax, add new commands and observe it’s usage. BudgetThe script runs on a small server that costs a small fee each month. The bot consumes RC in operation. I will try to solve this by casting a vote from rewarding after the vote of the delegator was broadcasted on the same post/comment. By this, rewarding may earn some small curation reward that is sufficient in paying the server fee. By casting an additional vote for delegators, delegation is rewarded and the bot has sufficient RCs for operation from the delegated Steem Power. @rewarding will also upvote all comments with a rewarding command inside to show that the command is valid. This may also lead to some tiny curation reward earnings. Using the service with a transfer memo costs 0.001 SBD/STEEM. @rewarding is only a small business, but I hope it still counts for the competition :). Also, I hope that I already started with the implementation does not disqualify me. You can find the post about the business plan competition here. This page is synchronized from the post: ‘rewarding - Contribution to Steem Business Plan Competition from aggroed’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/rewarding-contribution-to-steem-business-plan-competition-from-aggroed/"},{"title":"How to write all decrypted memos into a csv-file","text":"As far as I know it is not possible to search encrypted memos. What to do when I want to go through all me sent and received transfers containing an encrypted memo text? The following script uses beem. More information about installing this can be found on the github site. The following script asks for a username and a memo key. Then it go through the complete account history and decrypts all encrypted transfer memos. The decrypted text is printed and stored into a csv file. Store the following lines into a file decrypt_memos.py.1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/pythonfrom beem import Steemfrom beem.memo import Memofrom beem.account import Accountfrom beem.amount import Amountimport getpassimport siximport csvif __name__ == &quot;__main__&quot;: if six.PY3: account = input(&quot;Enter account name: &quot;) else: account = raw_input(&quot;Enter account name: &quot;) memo_wif = getpass.getpass(prompt=&apos;Enter the memo key of %s:&apos; % account) stm = Steem(keys=[memo_wif]) acc = Account(account, steem_instance=stm) with open(&apos;encrypted_memos.csv&apos;, mode=&apos;w&apos;) as csv_file: fieldnames = [&apos;timestamp&apos;, &apos;from&apos;, &apos;to&apos;, &apos;amount&apos;, &apos;decrypted_memo&apos;] writer = csv.DictWriter(csv_file, fieldnames=fieldnames) writer.writeheader() for h in acc.history_reverse(only_ops=[&quot;transfer&quot;]): if len(h[&quot;memo&quot;]) &lt; 2: continue if h[&quot;memo&quot;][0] != &apos;#&apos;: continue memo = Memo(from_account=h[&quot;from&quot;], to_account=h[&quot;to&quot;], steem_instance=stm) try: decrypted_memo = memo.decrypt(h[&quot;memo&quot;]) except: decrypted_memo = &quot;decryption failed.&quot; amount = Amount(h[&quot;amount&quot;], steem_instance=stm) print(&quot;%s - from: %s, to: %s, amount: %s, decr. text: %s&quot; % (h[&quot;timestamp&quot;], h[&quot;from&quot;], h[&quot;to&quot;], str(amount), decrypted_memo)) writer.writerow({&quot;timestamp&quot;: h[&quot;timestamp&quot;], &quot;from&quot;: h[&quot;from&quot;], &quot;to&quot;: h[&quot;to&quot;], &quot;amount&quot;: str(amount), &quot;decrypted_memo&quot;: decrypted_memo}) The script can then be started by:1python decrypt_memos.py or1python3 decrypt_memos.py The script generates an output as:12018-10-13T07:00:21 - from: beembot, to: holger80, amount: 0.001 SBD, decr. text: This is a test and writes all memos in a csv-file “encrypted_memos.csv”. image source This page is synchronized from the post: ‘How to write all decrypted memos into a csv-file’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-write-all-decrypted-memos-into-a-csv-file/"},{"title":"rewarding - setting a bounty for post engagement","text":"source I’m testing and developing for some time now my @rewarding helper. It can be used as soon as he has the posting authority (https://steemconnect.com/authorize/@rewarding). I will disable the bot by $rewarding skip, so that I can write down commands to rewarding without triggering them. You can find commands for delayed upvotes and for rewarding paid-out posts in my last post about rewarding. In the newest update, I added a way to reward comment writer by distributing a 100% vote between them. The command for this is:1$rewarding bounty 100% 3days where 100% is the upvote percentage of the comment in which the beneficiaries is set. 3days is the delay, when the comment upvotes will be counted. At the moment only days are possible, but it is possible to define hours by using a float number: 0.1days (2.4 hours). The command has to be written down into a comment or in the post itself. It is possible to set a bounty on posts from other authors. When days are not set, the comments are counted after 6.5 days since post creation. After 3 days, the rshares of all top level comments are counted. The rshares of the bounty creator have a 80% weight, whereas the rshares of all others votes are counted with 20% weight. Self-votes are skipped. Comments from the bounty creator are also skipped. The top 8 comment writer, will then be rewarded proportional to their voted and weighted rshares. This is done by creating a comment and adding beneficiaries to the winners, so that the comment reward is distributed between them. Thanks to all Delegators who allow me to run this project:50 SP delegated by @idikuci50 SP delegated by @dimitrisp50 SP delegated by @condeas50 SP delegated by @dj12350 SP delegated by @pechichemena This page is synchronized from the post: ‘rewarding - setting a bounty for post engagement’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/rewarding-setting-a-bounty-for-post-engagement/"},{"title":"How to post using typora and beempy","text":"beempyBroadcasting a markdown file with beempy needs at least version 0.20.12. You can check it by: 1beempy --version Windows use can find a exe-file without the need to install python or other software in github. The current version is beempy-0.20.12-1166-49a8db87-py36_win64.zip. After downloading, the content can be extracted anywhere. Then the powershell can be used for using beempy, when the directory was changed to the directory in which the beempy.exe was stored. When python is already installed, beempy can be installed by 1pip install beem -U pip3 should be used when python 3 is installed. When no wallet was created yet, it can be created by 1beempy createwallet Before being able to broadcast a post, the posting key must be added by: 1beempy addkey When entering this command, a first prompt asks for the wallet password and a second prompt asks for the posting key. It is useful to try copy/past to the terminal before. Depending on the terminal, pasting could be possible by right-click or ctrl-v. Post parameterBy using the YAML extension, it is very convenient to write a steem post with typora. It is possible to set: title - set the post title tags - set the tags, at least one must be set permlink - when not set, it is derived from the title benficiaries - set’s beneficiaries reply_identifier - when a authorperm is set as reply_identifier, the broadcasted content will be a reply to the reply_identifier percent-steem-dollars - can be 0 for 100% SP or 10000 for 50%/50% max-accepted-payout - can be used to reduce the payout, default is 1000000.000 community - defines the community, when not set the first tag is used as community The yaml part of this post consists of It starts with three - and ends with three -. There must be one space after each:. I will also try to improve robustness in a next update. Please do not use the three - somewhere else in the markdown file. This is something that I have to fix for the next beempy release! Thus, I used a screenshot to show the yaml part. Be sure to use always a new title, otherwise you would edit your old post. Maybe I will add a prompt, that will ask if the post should really be edited… Uploading imagesUploading images can be done by copy and pasting the image into the steemit.com editor and copying the steemitimages.com llink: A simple image uploader is already implemented into beem. I will work on a command for beempy, so that upload is easily possible. TyporaI enjoying writing my post with typora. It has some advantages over the steemit.com editor: build in spellchecker which shows possible corrections What you see is what you get: improved speed easy to store all written posts in markdown working offline less distraction during writing I can work on several post at once or working on a specific post for a longer time By storing the md-file in a cloud, editing on the smart phone / tablet or on a different notebook is possible Editing a postWhen I do not change the title, or when I add the permlink field, I can easily edit a post by re-posting it with beempy. Just edit the file and repost it with 1beempy post -a author file_name.md Broadcasting the postI’m now finish with writing my post. I stored the file as How-to-post-with-typora-and-beempy.md. I go now to the terminal and write: 1beempy post -a holger80 How-to-post-with-typora-and-beempy.md After entering my wallet password, my post is broadcasted. Summary Write the post with typora and store the content as md-file. Add a YAML field and do never use the three-somewhere else in the post. I will improve this in the next update. Upload images to steemitimages.com by pasting them into the steemit.com editor, I will add an uploader for beempy. Be careful not to use the same title again, otherwise the old post will be edited. I will work an a prompt that asks in this case for a confirmation. You can change the payout to 100% SP by setting percent-steem-dollars:0 This page is synchronized from the post: ‘How to post using typora and beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-post-using-typora-and-beempy/"},{"title":"Execute python code directly from a steem post","text":"It is possible to execute python code directly from a post. I took my last post and stored the included python code in a post from @beempy: https://steemit.com/python/@beempy/decrypt-memos-csv It is now possible to run this code without storing it on a file: 12345678910111213141516171819202122#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentimport argparseif __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser() parser.add_argument(&quot;authorperm&quot;) parser.add_argument(&quot;timestamp&quot;, nargs=&apos;?&apos;, default=None) args = parser.parse_args() authorperm = args.authorperm timestamp = args.timestamp stm = Steem(node=&quot;https://api.steemit.com&quot;) comment = Comment(authorperm, steem_instance=stm) if timestamp is not None and comment.json()[&quot;last_update&quot;] != timestamp: print(&quot;%s != %s, aborting&quot; % (comment.json()[&quot;last_update&quot;], timestamp)) else: start_position = comment.body.find(&quot;```&quot;) + 4 end_position = comment.body.find(&quot;```&quot;, 2) python_file = comment.body[start_position:end_position] exec(python_file, globals()) This simple script reads the post and searches the position of the included python code. Then, the code is executed. Store the lines as python script read_python_from_post.py and execute it by 1python read_python_from_post.py @beempy/decrypt-memos-csv The output and behavior are the same as when the script would be stored directly in the python file. I added more security by checking the last_update timestamp. When the given timestamp is different from the comment parameter, the code is not executed:1python read_python_from_post.py @beempy/decrypt-memos-csv 2018-11-22T23:11:18 This prevents the execution of malicious code when the posting key of @beempy would have been leaked and someone had edited the posts. It is also possible to store all python scripts that were published by @beempy: 123456789101112131415161718192021#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentfrom beem.account import Accountimport osif __name__ == &quot;__main__&quot;: output_file_path = &quot;.&quot; stm = Steem(node=&quot;https://api.steemit.com&quot;) account = Account(&quot;beempy&quot;, steem_instance=stm) blog_posts = account.get_blog() index = 0 for comment in blog_posts: print(&quot;writing %s.py&quot; % comment[&quot;permlink&quot;]) start_position = comment.body.find(&quot;```&quot;) + 4 end_position = comment.body.find(&quot;```&quot;, 2) python_file = comment.body[start_position:end_position] file_name = os.path.join(output_file_path, comment[&quot;permlink&quot;] + &apos;_&apos; + comment.json()[&quot;last_update&quot;] + &quot;.py&quot;) with open(file_name, &quot;w&quot;) as f: f.write(python_file) At the moment, only one script is published, but I plan to add more content to @beempy. This page is synchronized from the post: ‘Execute python code directly from a steem post’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/execute-python-code-directly-from-a-steem-post/"},{"title":"update for beem - beempy post improved and imageuploader added","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 506 unit tests and a coverage of 72 %. The current version is 0.20.13.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by: 1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New Featuresbeempy post improvedUtility functions derive_beneficiaries, derive_tags and seperate_yaml_dict_from_body are added to utils.py and unit tests are added for each function. The yaml dection was improved, it is now possible to use --- everywhere in the document. derive_tagsdetects now tags correctly: a,b a, b a b are detected as tags = [&apos;a&apos;, &apos;b&apos;]. The yaml-parameter percent-steem-dollars and max-accepted-payout were added. 100 SP payout is: 1percent-steem-dollars: 0 50/50 payout is: 1percent-steem-dollars: 10000 Too Many Requests error handled in graphenerpcThis server error lead before to a unhandled rpc exception (The problem occurred in whaleshares). With the changes, the error is now handled and the failed rpc call is automatically retried. beempy uploadimageaddedIt is now possible to upload images with Â´beempyÂ´ to steemitimages. 1beempy uploadimage -a holger80 -n beem-logo beem.png When successfully uploaded, a markdown code for embedding the image is returned: 1![beem-logo](https://cdn.steemitimages.com/DQmcRrwLPSywSYMierfP6um6mejeMNGjN9Rxw7audJqTDgb/beem-logo) -n specify a image name (optional) and -aspecify the account name which is used for uploading. An account must be specified and the posting key of this account must be available in the wallet. Issue #125 fixedThe prefix of the pubkey is now checked. It is now possible to store different keys from different chains for the same account in the wallet. beempy listaccounts and beempy listkeys returns only the keys and accounts for the current chain, which is set by beempy set nodes . The default chain is steem. VotedBeforeWaitTimeReached exception addedWhen voting twice within 3 seconds, an error with Can only vote once every 3 seconds is returned. This raises now to an exception VotedBeforeWaitTimeReached. Commit historyAdd uploadimage to beempy commit 96e98c3) VotedBeforeWaitTimeReached exception added for “Can only vote once every 3 seconds” commit 9c7594eFix issue #126 commit e92cdf4Improved key handling fixes issue #125 commit 355042e prefix is checked in getPublicKeysderive_beneficiaries, derive_tags and seperate_yaml_dict_from_body added to utils commit 5b17c5e unit tests added for all new functionsFix claimaccount and improve post commands for beempy commit d2cefdeRelease 0.20.12 commit 49a8db8 pep8 formating improved Too Many Requests error handled different limit handling in WLS fixed for account history percent-steem-dollars and max-accepted-payout added to beempy postGithub accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - beempy post improved and imageuploader added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem---beempy-post-improved-and-imageuploader-added/"},{"title":"Store all posts from an author in markdown files","text":"I would find it very convenient to have all my written posts in one folder on my hard drive. The content of each file should be identical to the blockchain data. I did not found a tool for this task, so I wrote a python script. The script does the following: it reads the blog section of the given author (limited to the newest 500 posts) skip resteemed posts extracts title, timestamp, permlink and store them as YAML extension at top of the md file saves the content as markdown file 1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentfrom beem.account import Accountimport osimport ioimport argparseif __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser() parser.add_argument(&quot;author&quot;) parser.add_argument(&quot;path&quot;) args = parser.parse_args() author = args.author path = args.path stm = Steem(node=&quot;https://api.steemit.com&quot;) account = Account(author, steem_instance=stm) for comment in account.get_blog(limit=500): if comment[&quot;author&quot;] != author: continue markdown_content = comment.body title = comment.title timestamp = comment.json()[&quot;created&quot;] author = comment[&quot;author&quot;] permlink = comment[&quot;permlink&quot;] yaml_prefix = &apos;---\\n&apos; yaml_prefix += &apos;title: %s\\n&apos; % title yaml_prefix += &apos;date: %s\\n&apos; % timestamp yaml_prefix += &apos;permlink %s&apos; % permlink yaml_prefix += &apos;author: %s\\n---\\n&apos; % author filename = os.path.join(path, timestamp.split(&apos;T&apos;)[0] + &apos;_&apos; + permlink + &quot;.md&quot;) with io.open(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(yaml_prefix + markdown_content) Store this file as save_posts_as_md.py. beem need to be installed. The script needs two parameter: 1python save_posts_as_md.py &lt;author&gt; &lt;path&gt; The posts from the author are stored in the given path. The filename consists of the date and the permlink. Result for holger801python save_posts_as_md.py holger80 . Viewing the markdown files works best using the great typora editor. Storing one post as markdown file1234567891011121314151617181920212223242526272829#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentfrom beem.account import Accountimport ioimport argparseif __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser() parser.add_argument(&quot;authorperm&quot;) parser.add_argument(&quot;filename&quot;) args = parser.parse_args() authorperm = args.authorperm filename = args.filename stm = Steem(node=&quot;https://api.steemit.com&quot;) comment = Comment(authorperm, steem_instance=stm) markdown_content = comment.body title = comment.title timestamp = comment[&quot;created&quot;] author = comment[&quot;author&quot;] yaml_prefix = &apos;---\\n&apos; yaml_prefix += &apos;title: %s\\n&apos; % title yaml_prefix += &apos;date: %s\\n&apos; % str(timestamp) yaml_prefix += &apos;author: %s\\n---\\n&apos; % author with io.open(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(yaml_prefix + markdown_content) This script works when a authorperm and filename was given: 1python save_post_as_md.py @holger80/how-to-post-using-typora-and-beempy how-to-post-using-typora-and-beempy.md This page is synchronized from the post: ‘Store all posts from an author in markdown files’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/store-all-posts-from-an-author-in-markdown-files/"},{"title":"The steemmonsters site on beempy is adapted to the new gameplay","text":"I adapted https://beempy.com/steemmonsters for the new battle rules of steemmonsters. Elo-rating of all played decks are shown for all possible rulesets and mana-caps: Each played deck (cards and levels) is stored into a database as unique string (e.g. 49-1,48-1,47-1,51-1,52-1,62-1). The first number is the card id and the second number the card level. In the next step, I calculate the ELO ranking while handling each deck as player. The ELO rating is calculated by:andwhereR_A is the rating of deck A, R_B is the rating of deck B, k is set to 40 and S_A is 1 when deck A won, 0 when deck B won or 0.5 when there is a draw. The ELO-ranking is shown for each possible mana-cap / ruleset combination that has at least one played match. For example, the best decks for the Unprotected rule set with a mana-cap of 20 can be found here:https://beempy.com/static/sm_decks_ranking_20_Unprotected.html Mana_cap = [20,21] means the deck was used for a mana-cap of 20 and 21. Ruleset = [&apos;Standard&apos;, &apos;Silenced Summoners&apos;, &apos;Melee Mayhem&apos;, &apos;Taking Sides&apos;, &apos;Unprotected&apos;, &apos;Weak Magic&apos;, &apos;Target Practice&apos;] shows for which rulesets the deck was used. Currently, all played battles are analysed. It will take some more hours to be complete. Then, the data are recalculated every hour. I hope listing all played decks will help to master the steemmonsters card game. This page is synchronized from the post: ‘The steemmonsters site on beempy is adapted to the new gameplay’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/the-steemmonsters-site-on-beempy-is-adapted-to-the-new-gameplay/"},{"title":"Monthly fullnode report for November 2018","text":"IntroductionA full node server is necessary to receive specific steem blockchain data. There are API-calls for most use cases: receiving the newest posts for a feed of a specific user show all comments/replys of/to a user show who already voted for a post show the latest transfers of a user receiving the operation from the last 10 blocks And so on. All these information are organized in databases inside the full node. These databases are needing a lot of RAM, which makes them very expensive. Each server unit can handle only a limited number of responses per second. When the number of calls per second is higher than the server can handle, the delay time for each response will increase until the server breaks down. This report tries to measure the current state of all available full nodes. Over the last 30 days, a benchmark was performed every 3 hours on all available full nodes. The results of these benchmarks are stored as account update in @fullnodeupdate. The following parameters were measured: Blocks per second - It was measured how many blocks could be streamed in 30 seconds. Api call duration - The mean duration of receiving a vote, a comment, and an account is measured in seconds Account history operation per second - It was measured how many account history operation could be streamed in 30 seconds Irreversible block time delay in seconds- The time difference of the latest irreversible block that the node returns to the newest block is measured Available full nodes Over the last 30 days, at least 8 different full nodes were online and working. https://steemd.minnowsupportproject.org The https://steemd.minnowsupportproject.org node has an incredible performance. It handles around 2545 history operation per second, 31 blocks per second and needs only 0.28 seconds for an API call. The block delay is around 46 - 80 seconds. https://anyx.io The https://anyx.io node has a good performance. It handles around 445 history operation per second, 8 blocks per second and needs 1.20 seconds for an API call. The block delay is around 47 - 84 seconds. https://api.steemit.com The https://api.steemit.com node has a good performance. It handles around 580 history operation per second, 8 blocks per second and needs 1.60 seconds for an API call. The block delay is around 47 - 82 seconds. wss://gtg.steem.house:8090 The wss://gtg.steem.house:8090 node has a very good performance. It handles around 989 history operation per second, 11 blocks per second and needs 1.27 seconds for an API call. The block delay is around 46 - 81 seconds. https://rpc.steemliberator.com The https://rpc.steemliberator.com node has a satisfactory performance. It handles around 295 history operation per second, 2 blocks per second and needs 4.11 seconds for an API call. The block delay is around 47 - 82 seconds. https://api.steem.house The https://api.steem.house node has a satisfactory performance. It handles around 296 history operation per second, 2 blocks per second and needs 2.24 seconds for an API call. The block delay is around 47 - 83 seconds. wss://rpc.curiesteem.com The wss://rpc.curiesteem.com node has a good performance. It handles around 964 history operation per second, 10 blocks per second and needs 2.89 seconds for an API call. The block delay is around 46 - 85 seconds. https://rpc.steemviz.com The https://rpc.steemviz.com node has a sufficient performance. It handles around 0 history operation per second, 2 blocks per second and needs 6.20 seconds for an API call. The block delay is around 46 - 80 seconds. https://appbasetest.timcliff.com The https://appbasetest.timcliff.com node has a sufficient performance. It handles around 86 history operation per second, 1 blocks per second and needs 11.30 seconds for an API call. The block delay is around 45 - 180 seconds. https://steemd.privex.io The https://steemd.privex.io node has a sufficient performance. It handles around 72 history operation per second, 1 blocks per second and needs 9.50 seconds for an API call. The block delay is around 47 - 86 seconds. ConclusionOver the last month, 8 to 11 different full nodes were available online. Some of the nodes are faster than others, but most of the nodes were useable over the last month. The benchmark shows only the current state of the node and does know nothing about the specific load. The api.steemit.com node is the default node and used for the steemit.com website. Thus, its load is significantly higher than the load of other nodes. I also do not know which nodes are consists of more than one server. I assume that the full node from steemit.com consists of several servers and that the load is handled by a load balancer. Tools and ScriptsThe following python script is used for generating all plots:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201import sysfrom datetime import datetime, timedelta, dateimport timeimport ioimport jsonfrom timeit import default_timer as timerimport loggingfrom beem.account import Accountfrom beem.steem import Steemfrom beem.utils import formatTimedelta,formatTimeString, addTzInfofrom beem.nodelist import NodeListimport matplotlib as mplimport matplotlib.pyplot as pltlog = logging.getLogger(__name__)logging.basicConfig(level=logging.CRITICAL)if __name__ == &quot;__main__&quot;: # nobroadcast = True node_stm = Steem(use_condenser=True) acc = Account(&quot;fullnodeupdate&quot;, steem_instance=node_stm) metadata_list = [] # json.loads(acc[&quot;json_metadata&quot;]) stopdate = datetime.utcnow() - timedelta(days=30) startdate = datetime.utcnow() end_time = addTzInfo(datetime.utcnow()) for h in acc.history_reverse(stop=stopdate, only_ops=[&quot;account_update&quot;]): metadata_list.append(json.loads(h[&quot;json_metadata&quot;])) end_time = formatTimeString(metadata_list[-1][&quot;parameter&quot;][&quot;end_time&quot;]) timestamp = [] working_nodes = [] for metadata in metadata_list: report = metadata[&quot;report&quot;] first_entry = True node_url_list = [] for r in report: if r[&quot;node&quot;] not in [&quot;https://api.steemitstage.com&quot;, &quot;https://api.steemitdev.com&quot;, &quot;https://steemd-appbase.steemit.com&quot;, &quot;wss://steemd-appbase.steemit.com&quot;]: node_url = r[&quot;node&quot;].split(&quot;://&quot;)[1] if node_url not in node_url_list: node_url_list.append(node_url) if first_entry: first_entry = False timestamp.append(formatTimeString(metadata[&quot;parameter&quot;][&quot;end_time&quot;])) working_nodes.append(1) else: working_nodes[-1] += 1 timestamp_node = {} block_per_sec_node = {} history_per_sec_node = {} block_diff_seconds_node = {} apicall_time_node = {} block_diff_head_delay_node = {} block_diff_diff_head_irreversible_node = {} for metadata in metadata_list: report = metadata[&quot;report&quot;] first_entry = True for r in report: if r[&quot;node&quot;] not in [&quot;https://api.steemitstage.com&quot;, &quot;https://api.steemitdev.com&quot;, &quot;https://steemd-appbase.steemit.com&quot;, &quot;wss://steemd-appbase.steemit.com&quot;]: if r[&quot;node&quot;] not in timestamp_node: timestamp_node[r[&quot;node&quot;]] = [formatTimeString(metadata[&quot;parameter&quot;][&quot;end_time&quot;])] if r[&quot;block&quot;][&quot;rank&quot;] &gt; -1: block_per_sec_node[r[&quot;node&quot;]] = [(r[&quot;block&quot;][&quot;count&quot;] / r[&quot;block&quot;][&quot;time&quot;])] else: block_per_sec_node[r[&quot;node&quot;]] = [0] if r[&quot;history&quot;][&quot;rank&quot;] &gt; -1: history_per_sec_node[r[&quot;node&quot;]] = [r[&quot;history&quot;][&quot;count&quot;] / r[&quot;history&quot;][&quot;time&quot;]] else: history_per_sec_node[r[&quot;node&quot;]] = [0] if r[&quot;apicall&quot;][&quot;rank&quot;] &gt; -1: apicall_time_node[r[&quot;node&quot;]] = [(r[&quot;apicall&quot;][&quot;time&quot;])] else: apicall_time_node[r[&quot;node&quot;]] = [-1] if r[&quot;block_diff&quot;][&quot;rank&quot;] &gt; -1: block_diff_head_delay_node[r[&quot;node&quot;]] = [(r[&quot;block_diff&quot;][&quot;head_delay&quot;])] block_diff_diff_head_irreversible_node[r[&quot;node&quot;]] = [(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;])] block_diff_seconds_node[r[&quot;node&quot;]] = [(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;] * 3 + r[&quot;block_diff&quot;][&quot;head_delay&quot;])] else: block_diff_head_delay_node[r[&quot;node&quot;]] = [-1] block_diff_diff_head_irreversible_node[r[&quot;node&quot;]] = [-1] block_diff_seconds_node[r[&quot;node&quot;]] = [-1] else: timestamp_node[r[&quot;node&quot;]].append(formatTimeString(metadata[&quot;parameter&quot;][&quot;end_time&quot;])) if r[&quot;block&quot;][&quot;rank&quot;] &gt; -1: block_per_sec_node[r[&quot;node&quot;]].append(r[&quot;block&quot;][&quot;count&quot;] / r[&quot;block&quot;][&quot;time&quot;]) else: block_per_sec_node[r[&quot;node&quot;]].append(0) if r[&quot;history&quot;][&quot;rank&quot;] &gt; -1: history_per_sec_node[r[&quot;node&quot;]].append(r[&quot;history&quot;][&quot;count&quot;] / r[&quot;history&quot;][&quot;time&quot;]) else: history_per_sec_node[r[&quot;node&quot;]].append(0) if r[&quot;apicall&quot;][&quot;rank&quot;] &gt; -1: apicall_time_node[r[&quot;node&quot;]].append(r[&quot;apicall&quot;][&quot;time&quot;]) else: apicall_time_node[r[&quot;node&quot;]].append(-1) if r[&quot;block_diff&quot;][&quot;rank&quot;] &gt; -1: block_diff_head_delay_node[r[&quot;node&quot;]].append((r[&quot;block_diff&quot;][&quot;head_delay&quot;])) block_diff_diff_head_irreversible_node[r[&quot;node&quot;]].append(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;]) block_diff_seconds_node[r[&quot;node&quot;]].append(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;] * 3 + r[&quot;block_diff&quot;][&quot;head_delay&quot;]) else: block_diff_head_delay_node[r[&quot;node&quot;]].append(-1) block_diff_diff_head_irreversible_node[r[&quot;node&quot;]].append(-1) block_diff_seconds_node[r[&quot;node&quot;]].append(-1) show_plots = False plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, working_nodes, **opts) plt.grid() plt.legend() plt.title(&quot;Number of working nodes&quot;) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Number of working nodes&quot;) if show_plots: plt.show() else: plt.savefig(&quot;number_working_nodes.png&quot;) image_index = 0 for node in timestamp_node: timestamp = timestamp_node[node] block_per_sec = block_per_sec_node[node] apicall_time = apicall_time_node[node] history_per_sec = history_per_sec_node[node] block_diff_seconds = block_diff_seconds_node[node] plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, block_per_sec, **opts) plt.grid() plt.legend() plt.title(&quot;Blocks per second for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Blocks per second&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_blocks_per_second.png&quot; % image_index) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, apicall_time, **opts) plt.grid() plt.legend() plt.title(&quot;Api call duration for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Api call duration [s]&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_api_call.png&quot; % image_index) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, history_per_sec, **opts) plt.grid() plt.legend() plt.title(&quot;History Ops over time for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;History Operation per second&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_history_ops.png&quot; % image_index) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, block_diff_seconds, **opts) plt.grid() plt.legend() plt.title(&quot;Block time difference to newest generated block for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Block time difference [s]&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_block_time_diff.png&quot; % image_index) image_index += 1 Relevant Links and ResourcesThe benchmark of the each fullnode was repeated every 3 hours and is stored in the @fullnodeupdate account. The benchmark can be found here:https://github.com/holgern/steem-fullnode-update/ Repositoryhttps://github.com/steemit/steemThis analysis is using measured data from the steem full node servers. This page is synchronized from the post: ‘Monthly fullnode report for November 2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/monthly-fullnode-report-for-november-2018/"},{"title":"beem version 0.20.14 released - createwallet fixed and other improvements","text":"beem is a python library for steem (beem discord channel) The newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem Changelog for release 0.20.14 unit tests fixed Account: support for retrieving all delegations (thanks to crookon, PR #129) Change recovery account / list recovery account change requests (thanks to crokkon, PR #130) Exclude sbd_interest_rate, as it is not present on the VIT blockchain (thanks to svitx, PR #132) connect for beempy createwallet (thanks to crokkon, PR #133) Changes on api.steemit.comThere are some changes on the API (post). They will going live this evening.The following queries may not work: 123456789get_post_discussions_by_payout get_comment_discussions_by_payout get_discussions_by_cashoutget_discussions_by_childrenget_discussions_by_votesget_discussions_by_active get_discussions_by_trendingget_discussions_by_payout get_discussions_by_author_before_date The following function will be replaced by get_discussions_by_blog() and get_discussions_by_feed(). I will work on a replacement.1234get_feed_entries()get_feed()get_blog_entries()get_blog() This means that account.get_feed() and get_feed.get_blog() may not work. I will try to fix the related beem functions. The following function might also be unavailable from today evening.1234get_account_reputations()get_reblogged_by()get_blog_authors()get_tags_used_by_author() The following functions are available through the condenser API (beem should work, I will test).1234get_contentget_content_replies get_active_votesget_account_votes This page is synchronized from the post: ‘beem version 0.20.14 released - createwallet fixed and other improvements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beem-version-0-20-14-released-createwallet-fixed-and-other-improvements/"},{"title":"Is each splinter equally often used in battle?","text":"There are six different splinters in steemmonsters. Let’s see how often each splinter is used and how often it is able to win. The following data includes only the battles from the ongoing tournament (start date: 2018-11-26 14:00:00) Novice splinter played matches win ratio Blue 1064 49.15 % Red 990 45.56 % Green 978 41.31 % White 801 50.31 % Black 1013 68.11 % Gold 97 65.98 % Bronze splinter played matches win ratio Blue 5549 47.43 % Red 5179 44.26 % Green 10298 37.90 % White 3979 53.76 % Black 4060 66.45 % Gold 252 75.00 % Silver splinter played matches win ratio Blue 52955 51.21 % Red 49897 48.49 % Green 66467 41.58 % White 43951 49.99 % Black 58586 58.16 % Gold 6006 66.32 % Gold splinter played matches win ratio Blue 10789 45.40 % Red 9598 49.28 % Green 8931 44.73 % White 9091 50.41 % Black 14236 54.26 % Gold 3930 59.19 % Diamond splinter played matches win ratio Blue 2803 49.05 % Red 2744 49.53 % Green 2365 45.12 % White 2496 49.56 % Black 4190 49.40 % Gold 2565 56.96 % Champion splinter played matches win ratio Blue 1478 51.01 % Red 1742 50.40 % Green 961 43.50 % White 1570 51.72 % Black 1623 46.09 % Gold 2492 52.81 % ConclusionIt seems that the Gold/Dragon has an advantage in every league. The Black/Death splinter has an advantage in the lower Novice, Bronze, Silver and Gold league. The Green/Earth splinter is the weakest splinter and has the lowest win ration in all leagues. This page is synchronized from the post: ‘Is each splinter equally often used in battle?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/is-each-splinter-equally-often-used-in-battle/"},{"title":"Which splinter is the strongest one and what are the best counter splinters?","text":"In my last statistic post about steemmonster, I found out that the Green team seems to be weaker than other splinter. Now I created a more detailed view. The following data includes only the battles from the ongoing tournament (start date: 2018-11-26 14:00:00). I excluded all matches where the mana cap is not equal the mana sum of the used cards.Thus, matches are counted in which both teams have used the optimal mana sum equal to the mana cap. ResultsThe team win ratio shows how often a splinter has won. For matches where both splinter are equal, the winning rate is 100%, e.g. Blue vs Blue has a Blue team win ratio of 100%. Blue team match statisticsNovice - Blue team match played matches Blue team win ratio Blue vs Blue 70 100.00 % Blue vs Red 120 54.17 % Blue vs Green 102 71.57 % Blue vs White 73 52.05 % Blue vs Black 89 33.71 % Blue vs Gold 13 38.46 % Bronze - Blue team match played matches Blue team win ratio Blue vs Blue 279 100.00 % Blue vs Red 417 48.20 % Blue vs Green 517 59.57 % Blue vs White 382 55.50 % Blue vs Black 348 39.37 % Blue vs Gold 31 32.26 % Silver - Blue team match played matches Blue team win ratio Blue vs Blue 3889 100.00 % Blue vs Red 5609 48.85 % Blue vs Green 5026 56.61 % Blue vs White 5196 51.83 % Blue vs Black 6673 44.25 % Blue vs Gold 809 40.79 % Gold - Blue team match played matches Blue team win ratio Blue vs Blue 1426 100.00 % Blue vs Red 1825 46.79 % Blue vs Green 1745 53.58 % Blue vs White 1885 46.37 % Blue vs Black 2604 40.98 % Blue vs Gold 644 36.96 % Diamond - Blue team match played matches Blue team win ratio Blue vs Blue 380 100.00 % Blue vs Red 515 49.51 % Blue vs Green 411 53.28 % Blue vs White 468 52.56 % Blue vs Black 721 42.72 % Blue vs Gold 380 41.58 % Champion - Blue team match played matches Blue team win ratio Blue vs Blue 287 100.00 % Blue vs Red 393 47.07 % Blue vs Green 266 59.02 % Blue vs White 365 52.60 % Blue vs Black 382 52.36 % Blue vs Gold 518 46.91 % Red team match statisticsNovice - Red team match played matches Red team win ratio Red vs Blue 105 51.43 % Red vs Red 49 100.00 % Red vs Green 91 56.04 % Red vs White 78 47.44 % Red vs Black 100 31.00 % Red vs Gold 5 40.00 % Bronze - Red team match played matches Red team win ratio Red vs Blue 424 54.95 % Red vs Red 214 100.00 % Red vs Green 460 57.61 % Red vs White 348 39.66 % Red vs Black 373 29.22 % Red vs Gold 33 24.24 % Silver - Red team match played matches Red team win ratio Red vs Blue 5617 50.79 % Red vs Red 3272 100.00 % Red vs Green 4407 49.97 % Red vs White 4863 42.87 % Red vs Black 6102 36.86 % Red vs Gold 656 36.43 % Gold - Red team match played matches Red team win ratio Red vs Blue 1824 53.23 % Red vs Red 1009 100.00 % Red vs Green 1444 56.37 % Red vs White 1580 46.46 % Red vs Black 2245 42.94 % Red vs Gold 549 46.99 % Diamond - Red team match played matches Red team win ratio Red vs Blue 516 50.39 % Red vs Red 363 100.00 % Red vs Green 457 61.49 % Red vs White 435 47.36 % Red vs Black 712 46.21 % Red vs Gold 427 46.37 % Champion - Red team match played matches Red team win ratio Red vs Blue 393 52.93 % Red vs Red 362 100.00 % Red vs Green 265 64.91 % Red vs White 408 47.55 % Red vs Black 468 54.06 % Red vs Gold 581 54.91 % Green team match statisticsNovice - Green team match played matches Green team win ratio Green vs Blue 95 36.84 % Green vs Red 110 48.18 % Green vs Green 56 100.00 % Green vs White 68 41.18 % Green vs Black 101 21.78 % Green vs Gold 12 16.67 % Bronze - Green team match played matches Green team win ratio Green vs Blue 500 43.60 % Green vs Red 431 44.55 % Green vs Green 264 100.00 % Green vs White 387 40.31 % Green vs Black 381 25.20 % Green vs Gold 22 22.73 % Silver - Green team match played matches Green team win ratio Green vs Blue 5048 42.93 % Green vs Red 4414 49.68 % Green vs Green 2592 100.00 % Green vs White 4236 43.15 % Green vs Black 5296 35.08 % Green vs Gold 629 30.68 % Gold - Green team match played matches Green team win ratio Green vs Blue 1747 46.31 % Green vs Red 1446 43.71 % Green vs Green 890 100.00 % Green vs White 1357 45.62 % Green vs Black 2108 42.22 % Green vs Gold 465 37.85 % Diamond - Green team match played matches Green team win ratio Green vs Blue 411 46.72 % Green vs Red 458 38.43 % Green vs Green 259 100.00 % Green vs White 367 47.68 % Green vs Black 651 47.00 % Green vs Gold 338 38.76 % Champion - Green team match played matches Green team win ratio Green vs Blue 266 40.98 % Green vs Red 265 35.09 % Green vs Green 107 100.00 % Green vs White 247 43.72 % Green vs Black 294 44.90 % Green vs Gold 326 40.80 % White team match statisticsNovice - White team match played matches White team win ratio White vs Blue 75 46.67 % White vs Red 85 60.00 % White vs Green 83 74.70 % White vs White 38 100.00 % White vs Black 64 18.75 % White vs Gold 7 14.29 % Bronze - White team match played matches White team win ratio White vs Blue 373 51.21 % White vs Red 345 64.06 % White vs Green 384 61.46 % White vs White 156 100.00 % White vs Black 291 24.05 % White vs Gold 20 35.00 % Silver - White team match played matches White team win ratio White vs Blue 5200 47.71 % White vs Red 4858 56.77 % White vs Green 4223 56.38 % White vs White 2727 100.00 % White vs Black 5563 32.32 % White vs Gold 570 42.28 % Gold - White team match played matches White team win ratio White vs Blue 1888 53.60 % White vs Red 1580 53.42 % White vs Green 1358 54.34 % White vs White 968 100.00 % White vs Black 2168 42.20 % White vs Gold 552 49.28 % Diamond - White team match played matches White team win ratio White vs Blue 469 47.33 % White vs Red 436 52.75 % White vs Green 367 52.32 % White vs White 289 100.00 % White vs Black 625 44.48 % White vs Gold 367 44.14 % Champion - White team match played matches White team win ratio White vs Blue 364 47.53 % White vs Red 408 52.45 % White vs Green 247 56.28 % White vs White 295 100.00 % White vs Black 368 44.84 % White vs Gold 549 53.92 % Black team match statisticsNovice - Black team match played matches Black team win ratio Black vs Blue 113 66.37 % Black vs Red 97 77.32 % Black vs Green 84 82.14 % Black vs White 72 83.33 % Black vs Black 46 100.00 % Black vs Gold 11 63.64 % Bronze - Black team match played matches Black team win ratio Black vs Blue 328 67.68 % Black vs Red 382 72.77 % Black vs Green 405 79.51 % Black vs White 297 78.45 % Black vs Black 229 100.00 % Black vs Gold 21 38.10 % Silver - Black team match played matches Black team win ratio Black vs Blue 6673 55.39 % Black vs Red 6100 62.85 % Black vs Green 5287 64.54 % Black vs White 5551 67.48 % Black vs Black 4879 100.00 % Black vs Gold 912 30.04 % Gold - Black team match played matches Black team win ratio Black vs Blue 2600 59.00 % Black vs Red 2241 57.07 % Black vs Green 2108 57.69 % Black vs White 2164 57.81 % Black vs Black 2197 100.00 % Black vs Gold 781 38.28 % Diamond - Black team match played matches Black team win ratio Black vs Blue 721 57.28 % Black vs Red 712 53.93 % Black vs Green 653 52.99 % Black vs White 627 55.50 % Black vs Black 746 100.00 % Black vs Gold 520 35.38 % Champion - Black team match played matches Black team win ratio Black vs Blue 382 47.64 % Black vs Red 468 45.94 % Black vs Green 294 55.10 % Black vs White 368 55.16 % Black vs Black 298 100.00 % Black vs Gold 502 41.63 % Gold team match statisticsNovice - Gold team match played matches Gold team win ratio Gold vs Blue 14 64.29 % Gold vs Red 13 84.62 % Gold vs Green 4 75.00 % Gold vs White 6 83.33 % Gold vs Black 7 42.86 % Gold vs Gold 0 0.00 % Bronze - Gold team match played matches Gold team win ratio Gold vs Blue 37 78.38 % Gold vs Red 28 75.00 % Gold vs Green 43 86.05 % Gold vs White 29 68.97 % Gold vs Black 30 70.00 % Gold vs Gold 1 100.00 % Silver - Gold team match played matches Gold team win ratio Gold vs Blue 803 58.66 % Gold vs Red 653 63.25 % Gold vs Green 617 68.72 % Gold vs White 562 57.30 % Gold vs Black 907 69.68 % Gold vs Gold 133 100.00 % Gold - Gold team match played matches Gold team win ratio Gold vs Blue 643 62.99 % Gold vs Red 549 53.19 % Gold vs Green 465 62.15 % Gold vs White 553 50.81 % Gold vs Black 781 61.72 % Gold vs Gold 202 100.00 % Diamond - Gold team match played matches Gold team win ratio Gold vs Blue 382 58.38 % Gold vs Red 427 53.40 % Gold vs Green 337 61.13 % Gold vs White 366 56.01 % Gold vs Black 520 64.42 % Gold vs Gold 288 100.00 % Champion - Gold team match played matches Gold team win ratio Gold vs Blue 516 53.10 % Gold vs Red 581 45.09 % Gold vs Green 326 59.20 % Gold vs White 549 46.08 % Gold vs Black 502 58.37 % Gold vs Gold 654 100.00 % ConclusionThe Blue team (water) is weak against the Red (fire) and the Gold (dragon) team. Blue is weak against the Black team below the Champion league. The Red team (fire) is weak against the White (life) team. Below the Champion league, the Red team is also weak against the Black (death) and the Gold (dragon) team. The Green team (earth) is weak against every other splinter. The White team (life) is weak against the Black (death) and Blue (water) team. Below the Champion league, the White team is also weak against the Gold (dragon) team. The Black team (death) is weak against the Blue, Red and Gold team. The Gold team (dragon) is weak against the Red and the White team. Summary for Champion league splinter weak against strong against Blue Red, Gold, Green, White, Black Red White Blue, Green, Black, Gold Green Blue, Red, White, Black, Gold - White Blue, Black Red, Green, Gold Black Blue, Red, Gold Green, White Gold Red, White Blue, Green, Black So it seems that Green/Earth is the weakest splinter and should not be used but for solving a quest. Is could be that Gold in combination with Green is strong. This is something, I will analyze next. This page is synchronized from the post: ‘Which splinter is the strongest one and what are the best counter splinters?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/which-splinter-is-the-strongest-one-and-what-are-the-best-counter-splinters/"},{"title":"Witness survey - holger80","text":"My answers to the first witness survey: What is your position/stance on bid-bots (ownership/delegations/opinion)? - @abh12345, @ammonite As there are technically possible, they are existing. They are useful as they allow that everyone can boost the visibility of their post without investing heavily and self-vote. They should only be used for high-quality posts. What does the witness want to do to make the blockchain more user-friendly and help to on-board new users. What do THEY personally want to see done and what will they do to get it there? - @ericwilson I’m working very hard on a user-friendly python library (beem) for steem. With this library, it is easier for developer to create more user-friendly tools to help onboarding new users. I’m writing posts with useful examples which demonstrate the usage of my python library. I’m maintaining beempy, in which each new steem user can see the remaining RCs and how many votes, posts or transfer are possible. Do you think votes for witnesses should last indefinitely or should they time out (or perhaps decay over time) so that periodically voters will need to reevaluate and affirm their positions by recasting their votes? - @harvhat Both choices have their advantages, but steem has more important issues at the moment which should be solved first. A decay over time is not easy to implement and may increase the costs in running the nodes, as each vote has to be handled separately (each vote has a unique decay time). Do you think the 30 witness votes each steemian gets is the correct number, especially in light of the fact there are only 20 top witnesses to be seated? - @harvhat I’m in favor for 30 witness votes, so that smaller witnesses have a chance. What is a concern or two that you have about the #steem blockchain? - @johnspalding I think that it is important that the costs of full node APIs are strongly reduced. Without fast full node APIs, nobody can use steem. When this succeeds, we can onboard more users without increasing the costs. The problem is that viewing old posts is quite costly, the post data cannot just be stored on a disc, they have to be partly stored in RAM, which is too expensive. I hope that steemit succeed in bring the down the costs. What are you hopeful about for the #steem blockchain? - @johnspalding There are really great projects on steem (e.g. stemmonsters, actifit, steem keychain, utopian-io, steemstem, …). They all show that the steem blockchain is not just a place to earn by posting, it allows far more. What is the monthly cost of equipment? - @abh12345 At the moment, my witness rewards are almost equal to my server costs. Where do your earnings go? - @abh12345 I do no powing down. I support steem-ua ( 5000 SP) and comedyopenmic (500 SP). [What are some of your] Current projects? - @abh12345 I’m working since February 2018 on beem and continuously improving it. I maintain @fullnodeupdate which benchmark continuously (every 3 hours) all full node server and publishes the result on the blockchain. I’m working on @rewarding a small and free helper for delayed upvotes. @rewarding can also be used to reward already payout posts. I maintain and develop https://beempy.com, a small and useful site about steem and steemonsters. [Will you provide an] Alt accounts list? - @abh12345 I have created several accounts, but I’m actively using:@rewarding, @fullnodeupdate, @holger.random (posting actifit and other stuff), @curbot (for doing curation experiments), @beembot and @beempy for testing What are the benefits associated with being a witness? - @klassic You actively helping that the steem blockchain is securely running. You can also decide for what your witness rewards are being used. How do I become a witness? - @steemingmark The technical site is not so complicated. The most important part is to participate in projects that provide value for the blockchain and the community. What do you think the SBD [STEEM] price for a new account should be? - @harvhat In order to protect that someone claims all namespaces, they should have a fee. I have set the fee to 3 STEEM as the majority of witnesses. What is a witness and how I become a good worker? - @rubaethsyed A witness provides and run a witness node, on which a block is signed by the witness key on the given schedule. It is important to monitor the server and check for new releases in the github repository. Sometimes there are emergency fixes and it is important that the witnesses update their node. Have you implemented any new procedures for evaluating potential hardforks? - @patrickulrichI wrote some python scripts for testing new steem changes. I’m also doing code reviews of the steem code and post it on steem. How does a new user make the availability of his vote known to the cabal of witnesses wannabes trying to overthrow the current witness regime? - @grimgriz Read blog posts of the witness and check it’s github repository, when available. Should we have interest for SBD? - @patrickulrich Not in the current market situation. What takeaways do you have from the Hardfork 20 issues that occurred? - @patrickulrich Code review and a separated testnet is not sufficient. The next HF should be tested on a mirrored (transaction are copied from the steem network) steem network with real data. Do you think 20/21 top witnesses a good number or should there be more or less? - @harvhat I think that number is a good tradeoff between security and costs. This page is synchronized from the post: ‘Witness survey - holger80’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-survey-holger80/"},{"title":"Receive a  desktop notification when a steemmonster opponent is matched","text":"Waiting at the seeking enemy screen of steemmonsters is quite boring, and when I get distracted, I will lose due to timeout… InstallationYou need beem:1pip install beem For windows:1pip install win10toast and for mac:1pip install pync It should work out of the box for linux (notify-send must be available). Store the following script as sm_opponent_ready.py:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145from beem.blockchain import Blockchainfrom beem.nodelist import NodeListfrom beem.account import Accountimport requestsfrom beem import Steemimport jsonimport osimport platformimport subprocessfrom time import sleepimport argparseapp_name = &apos;sm-notifier&apos;is_mac = platform.system().lower() == &apos;darwin&apos;is_win = platform.system().lower() == &apos;windows&apos;if is_mac: from pync import notify as mac_notifyif is_win: from win10toast import ToastNotifier toaster = ToastNotifier()def notify(msg, link=None): &quot;&quot;&quot;Platform agnostic notifier&quot;&quot;&quot; if is_mac: mac_notify(&quot;&quot;, title=msg, open=link) elif is_win: toaster.show_toast(app_name, msg) else: subprocess.run([&apos;notify-send&apos;, app_name, msg])if __name__ == &quot;__main__&quot;: parser = argparse.ArgumentParser() parser.add_argument(&quot;account&quot;) args = parser.parse_args() account = args.account max_batch_size = 50 threading = False wss = False https = True normal = False appbase = True last_deck = {} nodes = NodeList() nodes.update_nodes() node_list = nodes.get_nodes(normal=normal, appbase=appbase, wss=wss, https=https) stm = Steem(node=node_list, num_retries=5, call_num_retries=3, timeout=15) b = Blockchain(steem_instance=stm, mode=&quot;head&quot;) acc = Account(account, steem_instance=stm) match_type = &quot;Ranked&quot; while True: found = False start_block_num = None for h in b.stream(opNames=[&quot;custom_json&quot;], threading=threading, max_batch_size=max_batch_size): if start_block_num is None: start_block_num = h[&quot;block_num&quot;] if h[&quot;id&quot;] == &apos;sm_find_match&apos;: if json.loads(h[&apos;json&apos;])[&quot;match_type&quot;] == match_type and h[&quot;required_posting_auths&quot;][0] == acc[&quot;name&quot;]: found = True break trx_id = h[&apos;trx_id&apos;] block_num = h[&quot;block_num&quot;] notify(&quot;Transaction id found (%d - %s)&quot; % (block_num, trx_id)) response = &quot;&quot; cnt2 = 0 trx_found = False while not trx_found and cnt2 &lt; 90: response = requests.get(&quot;https://steemmonsters.com/transactions/lookup?trx_id=%s&quot; % trx_id) if str(response) != &apos;&lt;Response [200]&gt;&apos;: sleep(4) else: if &apos;error&apos; in response.json() and &quot;not found&quot; in response.json()[&quot;error&quot;]: sleep(1) elif &apos;error&apos; in response.json(): trx_found = True elif &quot;trx_info&quot; in response.json() and response.json()[&quot;trx_info&quot;][&quot;success&quot;]: trx_found = True else: sleep(2) cnt2 += 1 if &apos;error&apos; in response.json(): print(response.json()[&quot;error&quot;]) match_cnt = 0 match_found = False while not match_found and match_cnt &lt; 180: match_cnt += 1 response = &quot;&quot; cnt2 = 0 trx_found = False while response == &quot;&quot; and cnt2 &lt; 45: response = requests.get(&quot;https://steemmonsters.com/battle/status?id=%s&quot; % trx_id) if str(response) != &apos;&lt;Response [200]&gt;&apos;: sleep(4) response = &quot;&quot; if &quot;status&quot; in response.json() and response.json()[&quot;status&quot;] &gt; 0 and response.json()[&quot;status&quot;] &lt; 3: match_found = True submit_expiration_block_num = response.json()[&quot;submit_expiration_block_num&quot;] opponent_player = response.json()[&quot;opponent_player&quot;] ruleset = response.json()[&quot;ruleset&quot;] mana_cap = response.json()[&quot;mana_cap&quot;] else: sleep(2) if not match_found: notify(&quot;Timeout and no opponent found...&quot;) continue notify(&quot;Opponent found... %s&quot; % opponent_player) match_cnt = 0 can_reveal = False error_occured = False while not can_reveal and match_cnt &lt; 45 and not error_occured: match_cnt += 1 response = &quot;&quot; cnt2 = 0 trx_found = False while response == &quot;&quot; and cnt2 &lt; 45: response = requests.get(&quot;https://steemmonsters.com/battle/status?id=%s&quot; % trx_id) if str(response) != &apos;&lt;Response [200]&gt;&apos;: sleep(4) response = &quot;&quot; current_block = b.get_current_block_num() submit_expiration_block_num = response.json()[&quot;submit_expiration_block_num&quot;] status = response.json()[&quot;status&quot;] if &quot;opponent_team_hash&quot; in response.json() and response.json()[&quot;opponent_team_hash&quot;] is not None and response.json()[&quot;opponent_team_hash&quot;] != &quot;&quot;: can_reveal = True notify(&quot;Opponent submitted a team...&quot;) elif &quot;team_hash&quot; in response.json() and response.json()[&quot;team_hash&quot;] is not None and response.json()[&quot;team_hash&quot;] != &quot;&quot;: sleep(4) else: if (submit_expiration_block_num - current_block) % 2 == 0: notify(&quot;%d blocks or %.2f seconds left...&quot; % ((submit_expiration_block_num - current_block), (submit_expiration_block_num - current_block) * 3.)) sleep(4) if status &gt; 2: error_occured = True if current_block &gt; submit_expiration_block_num: error_occured = True and run it with1python sm_opponent_ready.py holger80 Replace holger80 with your account name. When python 3.x is installed, pip and python may be replayed by pip3 and python3. You will now get a notification, when an opponent is found and you will be reminded when you did not select a team yet. The script scans new blocks for custom_json transaction with a sm_find_match id. When one is found, the https://steemmonsters.com/battle/status?id= API is asked if an opponent was matched. The API data are requested in a loop, until both opponents submitted a team. Please let me know if you find this script useful and If I can improve something on it. This page is synchronized from the post: ‘Receive a desktop notification when a steemmonster opponent is matched’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/receive-a-desktop-notification-when-a-steemmonster-opponent-is-matched/"},{"title":"Automation of Steem Basic Income","text":"Repositoryhttps://github.com/holgern/steembasicincome Steem Basic IncomeAt the moment 6800 accounts have bought shares or were sponsored by others in the steem basic income program. Upvotes of member posts were handled by manually adjusted steemauto rules. This was a lot of work, as the upvote percentage has to be adjusted whenever the member gains more shares or when the member changes its posting frequency. The automation scripts handle all these steps by storing a rshares balance for each member. Every 144 minutes, the rshares balance is increased by 80,000,000 rshares for each share. Upvotes of posts from sbi related accounts will also increase the rshares balance. Whenever a member has written a post, it is upvoted by 20% of the rshares balance. The vote rshares are then subtracted from the rshares balance. The scripts detect when new shares are bought or sponsored. It checks also all incoming delegations. In both cases, the share amount are updated. In the next 144 min cycle, more rshares will be added to the rshares balance. There is no waiting for enrollment anymore. You can read more here about the Initial Automation Release. Technology StackThe scripts are using beem for accessing the STEEM blockchain. Instruction for installation can be found in the readme. sbi_store_ops_db.pyThis scripts stores new account history entries for all sbi accounts in the database for later usage.All transfer operation of minnowbooster is also stored in the database. sbi_transfer.pyNew transfer and delegate_vesting_shares account operation are loaded from the database and analyzed for new delegations and STEEM transfer of enrolling new sbi shares. The processed transfer ops are stored in the trx database. sbi_update_member_db.pyEvery 144 minutes, this script adds 80,000,000 rshares for each sbi share to all sbi share holders.The script calculates the total share days which indicates how long the sbi shares are hold. This is used for initially calculating the rshares balance for all accounts. This script checks also who upvoted posts from sbi accounts (steembasicincome to sbi10) and adds the upvote rshares multiplied by a factor to the balance. sbi_store_member_hist.pyThis script streams all blocks for outgoing votes. The rshares balance is reduced by the rshares value of all outgoing votes. sbi_update_post_count.pyThe last checked member account is selected and the timestamp of its last post and comment is stored in the database. sbi_stream_post_comment.pyThis script fetches new posts and comments from all members and stores them in the database. sbi_check_delegation.pyNew delegations are checked if they are bought through minnowbooster by checking if a transfer to minnowbooster in the same time exists. bi_upvote_post_comment.pyThis script handles all upvotes of member posts/comments. It loads all not already upvoted posts/comments from the database and go throught them. When post was found and the member has a positive rshares balance, an upvote is casted with 20% of the rshares balance. It is automatically selected from which sbi account the upvote will be casted. It is always the sbi account selected that has the most mana and a sufficient high upvote value. sbi_check_blacklist.pyIt is checked if a member is currently blacklisted by buildawhale or by steemcleaners. When this is the case, the member will not be upvoted until the flag is manually cleared or the blacklist state of buildawhale or steemcleaners changes. Python library steembiThe scripts uses the provided library steembi. The library contains a class for memo parsing and classes for storing and accessing the different databases. The library contains unit tests for memo parsing. It has also a member class, which is used for calculating the share age and avg share age. RoadmapIn the next release, a comment answer bot will be provided, so that every member can ask the shares amount and how big the next upvote will be. Then, a confirmation transfer to the share buyer will be added which shows the new shares count. How to contributePlease fork the repository and do a pull requests. It is also possible to open a new issue. You will also find help in the discord server. GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Automation of Steem Basic Income’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/automation-of-steem-basic-income/"},{"title":"By carefull with account history index, it is not reliable","text":"Today, I was wondering why I was getting different results by using different nodes.12345678910from beem import Steemfrom beem.account import Accountfrom beem.amount import Amountif __name__ == &quot;__main__&quot;: stm = Steem(node=&quot;https://steemd.minnowsupportproject.org&quot;) stm = Steem(node=&quot;https://api.steemit.com&quot;) acc = Account(&quot;steembasicincome&quot;, steem_instance=stm) for h in acc.history(start=289250, only_ops=[&quot;transfer&quot;], use_block_num=False): print(&quot;%d - %s transfer %s to %s - %s&quot; % (h[&quot;index&quot;], h[&quot;from&quot;], str(Amount(h[&quot;amount&quot;], steem_instance=stm)), acc[&quot;name&quot;], str(h[&quot;timestamp&quot;]))) When I run the script with https://steemd.minnowsupportproject.org:12289481 - nateonsteemit transfer 5.000 STEEM to steembasicincome - 2018-12-19T16:35:21289484 - nateonsteemit transfer 3.000 STEEM to steembasicincome - 2018-12-19T16:39:36 When I use https://api.steemit.com:123456789101112131415161718289280 - kimzwarch transfer 3.000 STEEM to steembasicincome - 2018-12-19T07:34:06289288 - darklands transfer 2.000 STEEM to steembasicincome - 2018-12-19T07:58:48289334 - paulag transfer 8.000 STEEM to steembasicincome - 2018-12-19T09:28:42289402 - shaidon transfer 1.000 STEEM to steembasicincome - 2018-12-19T11:41:00289477 - elizacheng transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:07:51289478 - djennyfloro transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:10:15289487 - bengy transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:27:54289488 - bengy transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:28:09289491 - tazi transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:31:00289492 - tazi transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:31:18289498 - runicar transfer 3.000 STEEM to steembasicincome - 2018-12-19T13:52:24289499 - runicar transfer 2.000 STEEM to steembasicincome - 2018-12-19T13:52:42289501 - runicar transfer 1.000 STEEM to steembasicincome - 2018-12-19T13:56:45289504 - team-cn transfer 2.000 STEEM to steembasicincome - 2018-12-19T14:09:54289514 - barmbo transfer 1.000 STEEM to steembasicincome - 2018-12-19T15:01:03289518 - cryptoyzzy transfer 6.000 STEEM to steembasicincome - 2018-12-19T15:13:12289759 - nateonsteemit transfer 5.000 STEEM to steembasicincome - 2018-12-19T16:35:21289762 - nateonsteemit transfer 3.000 STEEM to steembasicincome - 2018-12-19T16:39:36 So, using the history account index for receiving new account transactions is not a good idea. The index is calculated within the node and it is not reliable. This page is synchronized from the post: ‘By carefull with account history index, it is not reliable’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/by-carefull-with-account-history-index-it-is-not-reliable/"},{"title":"steemhistory - a command line tool for storing all posts and images from an account","text":"Repositoryhttps://github.com/holgern/steemhistory steemhistoryI wrote a post about storing all your posts in markdown files. The script did not store images and uses also the limited get_blog function from beem (limited to 500 entries).The second version of this script fetches all posts without limitation and stores also all linked images in a second folder. This version is also a full python package which can now be easily installed. InstallationThe python package can be installed by:1pip install steemhistory For Windows, standalone executables are provided:One file version: steemhistory-onefile-0.1.2-5-f84a425f-py36_win64.zipA faster, not packed version is also provided steemhistory-0.1.2-5-f84a425f-py36_win64.zip Technology Stacksteemhistory uses the beem library for receiving all account history. UsageThe following script does the following: fetches the complete account history and searches for new posts extracts title, timestamp, permlink,tags and store them as YAML extension at top of the md file scans the body for image links and downloads them to the image folder adds the content to the md file When images should be stored, three arguments are needed:1steemhistory posts &lt;author&gt; &lt;path&gt; &lt;image_path&gt; The images are stored in the given image_path. When no images should be stored, two arguments are needed:1steemhistory posts &lt;author&gt; &lt;path&gt; RoadmapBesides storing all posts, commands for storing all other account history operations are planned.It is also planned to allow the storage of all posts in different formats, as e.g. PDF. How to contribute?Please use the issue tracker for bug reports and feature wishes. Pull requests are also welcome. GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemhistory - a command line tool for storing all posts and images from an account’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemhistory-a-command-line-tool-for-storing-all-posts-and-images-from-an-account/"},{"title":"Update for Steem Basic Income Automation - improved account history storage and sbi status command added","text":"Repositoryhttps://github.com/holgern/steembasicincome Bug fixesI found out that the account history index is not reliable (post), so I had to change the database structure. I changed it from using the account index as a primary index to a combined index using block number, trx number, op in trx number and virtual operation count. The following example code shows how it works:123456789101112131415161718192021222324252627282930313233343536373839start_block = 1000trx_in_block = 0op_in_trx = 0virtual_op = 0last_block = 0last_trx = 0for op in account.history(start=start_block - 3, use_block_num=True): if op[&quot;block&quot;] &lt; start_block: last_block = op[&quot;block&quot;] continue elif op[&quot;block&quot;] == start_block: if op[&quot;virtual_op&quot;] == 0: if op[&quot;trx_in_block&quot;] &lt; trx_in_block: last_trx = op[&quot;trx_in_block&quot;] continue if op[&quot;op_in_trx&quot;] &lt;= op_in_trx and (trx_in_block != last_trx): continue else: if op[&quot;virtual_op&quot;] &lt;= virtual_op and (trx_in_block == last_trx): continue start_block = op[&quot;block&quot;] virtual_op = op[&quot;virtual_op&quot;] trx_in_block = op[&quot;trx_in_block&quot;] if trx_in_block != last_trx or op[&quot;block&quot;] != last_block: op_in_trx = op[&quot;op_in_trx&quot;] else: op_in_trx += 1 if virtual_op &gt; 0: op_in_trx = 0 if trx_in_block &gt; 255: trx_in_block = 0 # do something with the op dict start_index += 1 last_block = op[&quot;block&quot;] last_trx = trx_in_block The code uses now history with use_block_num=True. Instead of an unreliable index, the block number is used. As a block has more than one transaction, it is also checked that: virtual_op is higher than the last op when it is a virtual operation (only inside the same block) trx_in_block is higher and also op_in_trx is increased for non-virtual operations (only inside the same block) I found that the op_in_trx value in the dictionary is not always reliable, so I increased it by myself. I adapt the database structure so that virtual_op,block,trx_in_block,op_in_trx are the primary keys. New featuresI added a way for user to receive information about their sbi unit state. As already all posts and comments are obtained in sbi_stream_post_comment.py, I additionally scan the comments body for !sbi status. When a sbi unit holder wrote a comment, containing this text, a sbi account will reply with some information regarding this user.The sbi units are returned and the rshares balance. The next upvote is estimated and also returned. In this case, the next upvote value would be below the upvote threshold and the sbi user has to wait until his rshares balance is above the upvote threshold CommitsSeveral improvements commit 8e98c97 Execution time is measured Store account history ops based on block, trx_num, op_num and virtual_op_num Change table structure commit cc7faae Clean up code and remove old steembasicincome_ops database (replaced by sbi_ops) commit 227c625 Remove deprated create_table and exists_table commit 046bfe1 Remove unused steembasicincome_ops in which account history ops were stored by index commit 13ef090 GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for Steem Basic Income Automation - improved account history storage and sbi status command added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-steem-basic-income-automation-improved-account-history-storage-and-sbi-status-command-added/"},{"title":"Splinter statistics for for the last  steemmonster season","text":"You can find my last statistics post here. This time, I skip the novice and bronze league as there were to less matches. The following data includes only the battles from the last season (start date: 2018-12-11 2:00:00, end date: 2018-12-28 2:00:00). I excluded all matches where the mana cap is not equal the mana sum of the used cards. Thus, matches are counted in which both teams have used the optimal mana sum equal to the mana cap. splinter name Blue Water Red Fire Green Earth White Life Black Death Gold Dragon ResultsThe team win ratio shows how often a splinter has won. For matches where both splinter are equal, the winning rate is 100%, e.g. Blue vs Blue has a Blue team win ratio of 100%. Blue team match statisticsSilver - Blue match played matches Blue team win ratio Blue vs Blue 1761 100.00 % Blue vs Red 2417 46.46 % Blue vs Green 2249 61.32 % Blue vs White 2174 51.24 % Blue vs Black 2579 53.55 % Blue vs Gold 173 49.13 % Gold - Blue match played matches Blue team win ratio Blue vs Blue 2545 100.00 % Blue vs Red 3222 45.81 % Blue vs Green 2961 52.08 % Blue vs White 3528 50.71 % Blue vs Black 3905 50.09 % Blue vs Gold 396 54.55 % Diamond - Blue match played matches Blue team win ratio Blue vs Blue 1717 100.00 % Blue vs Red 2171 49.19 % Blue vs Green 1732 50.52 % Blue vs White 2398 50.29 % Blue vs Black 2865 49.53 % Blue vs Gold 474 46.20 % Champion - Blue match played matches Blue team win ratio Blue vs Blue 1483 100.00 % Blue vs Red 2224 45.59 % Blue vs Green 1429 48.15 % Blue vs White 2680 53.54 % Blue vs Black 2049 48.32 % Blue vs Gold 1220 41.97 % Red team match statisticsSilver - Red match played matches Red team win ratio Red vs Blue 2421 53.53 % Red vs Red 1715 100.00 % Red vs Green 2049 51.83 % Red vs White 2065 43.29 % Red vs Black 2602 38.43 % Red vs Gold 147 36.05 % Gold - Red match played matches Red team win ratio Red vs Blue 3227 54.14 % Red vs Red 2000 100.00 % Red vs Green 2715 53.74 % Red vs White 3098 49.10 % Red vs Black 3466 43.80 % Red vs Gold 331 51.66 % Diamond - Red match played matches Red team win ratio Red vs Blue 2169 50.85 % Red vs Red 1412 100.00 % Red vs Green 1570 53.82 % Red vs White 2145 47.97 % Red vs Black 2551 44.73 % Red vs Gold 444 47.30 % Champion - Red match played matches Red team win ratio Red vs Blue 2223 54.39 % Red vs Red 2163 100.00 % Red vs Green 1598 56.51 % Red vs White 2953 53.17 % Red vs Black 2375 48.29 % Red vs Gold 1427 48.49 % Green team match statisticsSilver - Green match played matches Green team win ratio Green vs Blue 2263 38.75 % Green vs Red 2043 48.26 % Green vs Green 1393 100.00 % Green vs White 1808 44.41 % Green vs Black 2298 40.56 % Green vs Gold 135 42.22 % Gold - Green match played matches Green team win ratio Green vs Blue 2958 47.84 % Green vs Red 2709 46.25 % Green vs Green 1508 100.00 % Green vs White 2865 47.57 % Green vs Black 3129 44.01 % Green vs Gold 351 42.74 % Diamond - Green match played matches Green team win ratio Green vs Blue 1733 49.62 % Green vs Red 1573 46.22 % Green vs Green 830 100.00 % Green vs White 1725 50.96 % Green vs Black 1942 42.64 % Green vs Gold 339 40.12 % Champion - Green match played matches Green team win ratio Green vs Blue 1430 51.75 % Green vs Red 1598 43.49 % Green vs Green 664 100.00 % Green vs White 1764 52.83 % Green vs Black 1481 48.28 % Green vs Gold 920 40.98 % White team match statisticsSilver - White match played matches White team win ratio White vs Blue 2164 48.89 % White vs Red 2064 56.73 % White vs Green 1803 55.74 % White vs White 1249 100.00 % White vs Black 2287 39.13 % White vs Gold 141 53.19 % Gold - White match played matches White team win ratio White vs Blue 3530 49.26 % White vs Red 3099 50.89 % White vs Green 2865 52.32 % White vs White 2316 100.00 % White vs Black 3692 42.82 % White vs Gold 379 54.88 % Diamond - White match played matches White team win ratio White vs Blue 2402 49.71 % White vs Red 2145 51.98 % White vs Green 1722 49.13 % White vs White 1596 100.00 % White vs Black 2620 42.02 % White vs Gold 462 52.60 % Champion - White match played matches White team win ratio White vs Blue 2679 46.44 % White vs Red 2952 46.85 % White vs Green 1765 47.14 % White vs White 2414 100.00 % White vs Black 2722 36.59 % White vs Gold 1350 42.81 % Black team match statisticsSilver - Black match played matches Black team win ratio Black vs Blue 2578 46.55 % Black vs Red 2592 61.61 % Black vs Green 2301 59.37 % Black vs White 2287 61.00 % Black vs Black 2256 100.00 % Black vs Gold 159 37.74 % Gold - Black match played matches Black team win ratio Black vs Blue 3907 49.88 % Black vs Red 3469 56.21 % Black vs Green 3132 56.00 % Black vs White 3699 57.18 % Black vs Black 3048 100.00 % Black vs Gold 461 46.42 % Diamond - Black match played matches Black team win ratio Black vs Blue 2864 50.45 % Black vs Red 2549 55.32 % Black vs Green 1941 57.39 % Black vs White 2618 57.94 % Black vs Black 2217 100.00 % Black vs Gold 559 41.14 % Champion - Black match played matches Black team win ratio Black vs Blue 2050 51.66 % Black vs Red 2376 51.68 % Black vs Green 1481 51.72 % Black vs White 2719 63.44 % Black vs Black 1695 100.00 % Black vs Gold 1083 36.66 % Gold team match statisticsSilver - Gold match played matches Gold team win ratio Gold vs Blue 171 50.88 % Gold vs Red 142 63.38 % Gold vs Green 135 57.78 % Gold vs White 141 46.81 % Gold vs Black 157 61.78 % Gold vs Gold 8 100.00 % Gold - Gold match played matches Gold team win ratio Gold vs Blue 399 45.61 % Gold vs Red 331 48.34 % Gold vs Green 350 56.86 % Gold vs White 379 45.12 % Gold vs Black 461 53.58 % Gold vs Gold 27 100.00 % Diamond - Gold match played matches Gold team win ratio Gold vs Blue 473 53.70 % Gold vs Red 443 52.82 % Gold vs Green 340 60.00 % Gold vs White 462 47.40 % Gold vs Black 560 58.75 % Gold vs Gold 127 100.00 % Champion - Gold match played matches Gold team win ratio Gold vs Blue 1219 58.00 % Gold vs Red 1428 51.47 % Gold vs Green 920 59.02 % Gold vs White 1350 57.19 % Gold vs Black 1083 63.34 % Gold vs Gold 888 100.00 % ConclusionIn this season, the white / life splinter is the weakest one and should be avoided. The gold/dragon splinter is again the strongest one and the black splinter is also stronger than the other splinters. The rebalancing and the new cards improved the Green splinter, but weaken the White Splinter. Summary for Champion league splinter strong against Blue White Red Blue, Green, White Green Blue, White White - Black Blue, Red, Green, White Gold Red, White, Blue, Green, Black This page is synchronized from the post: ‘Splinter statistics for for the last steemmonster season’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/splinter-statistics-for-for-the-last-steemmonster-season/"},{"title":"Update for Steem Basic Income Automation - get_blog and comment_history replaced and comment upvoting enabled","text":"Repositoryhttps://github.com/holgern/steembasicincome Comment upvote enabled and sbi_update_post_count.py removedThe old solution with sbi_update_post_count.py was checking only one account at a time. This was to slow and the comment_upvote flag could not be set fast enough. The comment_upvote flag is set when last_post is older than 7 days and comments willl be upvoted until a post is written. last_post, last_comment and comment_upvote are now updated in sbi_store_member_hist.py by:1234567891011121314151617181920212223for op in b.stream(start=int(start_block), stop=int(end_block), opNames=[&quot;vote&quot;, &quot;comment&quot;], threading=False, thread_num=8): if op[&quot;type&quot;] == &quot;comment&quot;: if op[&quot;author&quot;] not in member_accounts: continue try: c = Comment(op, steem_instance=stm) c.refresh() except: continue main_post = c.is_main_post() if main_post: member_data[op[&quot;author&quot;]][&quot;last_post&quot;] = c[&quot;created&quot;] else: member_data[op[&quot;author&quot;]][&quot;last_comment&quot;] = c[&quot;created&quot;] if member_data[op[&quot;author&quot;]][&quot;last_post&quot;] is None: member_data[op[&quot;author&quot;]][&quot;comment_upvote&quot;] = 1 elif addTzInfo(member_data[op[&quot;author&quot;]][&quot;last_post&quot;]) &lt; date_7_before: member_data[op[&quot;author&quot;]][&quot;comment_upvote&quot;] = 1 elif member_data[op[&quot;author&quot;]][&quot;comment_upvote&quot;] == 1: member_data[op[&quot;author&quot;]][&quot;comment_upvote&quot;] = 0 member_data[op[&quot;author&quot;]][&quot;updated_at&quot;] = c[&quot;created&quot;] updated_member_data.append(member_data[op[&quot;author&quot;]]) where b is a Blockchain object from beem.blockchain and date_7_before contains the datetime from 7 days before now. get_blog and comment_history replacedAs the full-node api.steemit.com does not support get_blog anymore, I replaced it with fetching the account history operation itself. I created a new function get_newest to read only the newest account history operation from the database:123456789def get_newest(self, op_types = [], limit=100): ops = [] table = self.db[self.__tablename__] for op in table.find(order_by=&apos;-op_acc_index&apos;): if op[&quot;type&quot;] in op_types or len(op_types) == 0: ops.append(op) if len(ops) &gt;= limit: return ops return ops This function can be used to replace get_blog:1234567891011121314if account[&quot;name&quot;] == &quot;steembasicincome&quot;: ops = accountTrx[&quot;sbi&quot;].get_newest(op_types=[&quot;comment&quot;], limit=500)else: ops = accountTrx[account[&quot;name&quot;]].get_newest(op_types=[&quot;comment&quot;], limit=500)blog = []for op in ops[::-1]: comment = (json.loads(op[&quot;op_dict&quot;])) if comment[&quot;parent_author&quot;] == &quot;&quot; and comment[&quot;author&quot;] == account[&quot;name&quot;] and formatTimeString(comment[&quot;timestamp&quot;]) &gt; addTzInfo(last_paid_post): try: c = Comment(comment, steem_instance=stm) c.refresh() blog.append(c) except: continue blog contains now the same posts that would be returned by get_blog. comment_history can be replaced with the same code, only1if comment[&quot;parent_author&quot;] == &quot;&quot; and comment[&quot;author&quot;] == account[&quot;name&quot;] and formatTimeString(comment[&quot;timestamp&quot;]) &gt; addTzInfo(last_paid_post): is replaced by:12345if comment[&quot;parent_author&quot;] != &quot;&quot; and comment[&quot;author&quot;] == account[&quot;name&quot;] and formatTimeString(comment[&quot;timestamp&quot;]) &gt; addTzInfo(last_paid_comment):``` ## posts with a nsfw or sbi-skip tag will be skippedThis is hard coded at the moment: skip = Falsefor tag in c[“tags”]: if tag.lower() in [“nsfw”, “sbi-skip”]: skip = True`` The post and comment database has now a new boolean field which is set byskip. Only posts are upvoted withskip == False` CommitsReplace get_blog and comment_history with already stored account history ops commit 733f0fb new function get_newest for receiving a limited number of account history ops from the database skip posts with specific tags commit 7f453f4 update sql structure use accounts and other_accounts from database only skip posts with specific tags limit upvoted posts/comments to the last 24 hours last_comment and last post is took directly from the scanned blocks commit 655122b sbi_update_post_count.py removed, last_comment and last_post is took directly from the scanned blocks in sbi_store_member_hist.py sbi status comments improved, when comments from a member are upvoted post will be also upvoted when the comment_upvote flag is set Comment upvoting prepared commit 1ab0bd1 2x minimum_vote_threshold for comment upvoting sbi status adapted for comment upvoting bug fix for account history storage GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for Steem Basic Income Automation - get_blog and comment_history replaced and comment upvoting enabled’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-steem-basic-income-automation-getblog-and-commenthistory-replaced-and-comment-upvoting-enabled/"},{"title":"Monthly fullnode report for December 2018","text":"IntroductionA full node server is necessary to receive and broadcast blockchain data. There are API-calls for most use cases: receiving the newest posts for a feed of a specific user show who already voted for a post show the latest transfers of a user receiving the operation from the last 10 blocks broadcasting an operation to the blockchain (e.g. for posting, voting, …) … All these information are organized in databases inside the full node. These databases are needing a lot of RAM, which makes them very expensive. Each server unit can handle only a limited number of responses per second. When the number of calls per second is higher than the server can handle, the delay time for each response will increase until the server breaks down. This report tries to measure the current state of all available full nodes. Over the last 30 days, a benchmark was performed every 3 hours on all available full nodes. The results of these benchmarks are stored as account update in @fullnodeupdate. The following parameters were measured: Blocks per second - It was measured how many blocks could be streamed in 30 seconds. Api call duration - The mean duration of receiving a vote, a comment, and an account is measured in seconds Account history operation per second - It was measured how many account history operation could be streamed in 30 seconds Irreversible block time delay in seconds- The time difference of the latest irreversible block that the node returns to the newest block is measured Available full nodes The number of available full nodes is declining from 11 to currently only 7. Disabled nodes are: rpc.buildteam.io - post about going offline rpc.steemliberator.com is currently not working (https issue?) The websocket from rpc.curiesteem.com was disabled, I will switch to the https interface. https://steemd.minnowsupportproject.org The https://steemd.minnowsupportproject.org node has a good performance. It handles around 2563 history operation per second, 31 blocks per second and needs 0.31 seconds for an API call. The block delay is around 46 - 81 seconds. https://anyx.io The https://anyx.io node has a good performance. It handles around 481 history operation per second, 2 blocks per second and needs 2.14 seconds for an API call. The block delay is around 47 - 82 seconds. https://api.steemit.com The https://api.steemit.com node has a good performance. It handles around 780 history operation per second, 8 blocks per second and needs 1.50 seconds for an API call. The block delay is around 47 - 82 seconds. https://api.steem.house The https://api.steem.house node has a good performance. It handles around 305 history operation per second, 2 blocks per second and needs 2.16 seconds for an API call. The block delay is around 47 - 84 seconds. https://rpc.steemviz.com The https://rpc.steemviz.com node has a good performance. It handles around 0 history operation per second, 2 blocks per second and needs 5.98 seconds for an API call. The block delay is around 47 - 81 seconds. https://appbasetest.timcliff.com The https://appbasetest.timcliff.com node has a good performance. It handles around 87 history operation per second, 1 blocks per second and needs 12.06 seconds for an API call. The block delay is around 45 - 193 seconds. https://steemd.privex.io The https://steemd.privex.io node has a good performance. It handles around 83 history operation per second, 1 blocks per second and needs 11.91 seconds for an API call. The block delay is around 49 - 84 seconds. ConclusionAlmost all websocket connection to full nodes are disabled now. One full node is not reachable (maybe https certificate problems) and one full node was shut down. This is not a big problem as all nodes are also reachable through an https connection. The performance of all working nodes is very consistent and all full nodes show a good performance. There is no up- or down trend in the performance visible, which is good, as it shows that the performance of the nodes is sufficient for handling the load. Tools and ScriptsThe following python script is used for generating all plots: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212import sysfrom datetime import datetime, timedelta, dateimport timeimport ioimport jsonfrom timeit import default_timer as timerimport loggingfrom beem.account import Accountfrom beem.steem import Steemfrom beem.utils import formatTimedelta,formatTimeString, addTzInfofrom beem.nodelist import NodeListimport matplotlib as mplimport matplotlib.pyplot as pltlog = logging.getLogger(__name__)logging.basicConfig(level=logging.CRITICAL)if __name__ == &quot;__main__&quot;: node_stm = Steem(use_condenser=True) acc = Account(&quot;fullnodeupdate&quot;, steem_instance=node_stm) metadata_list = [] stopdate = datetime.utcnow() - timedelta(days=30) startdate = datetime.utcnow() end_time = addTzInfo(datetime.utcnow()) for h in acc.history_reverse(stop=stopdate, only_ops=[&quot;account_update&quot;]): metadata_list.append(json.loads(h[&quot;json_metadata&quot;])) end_time = formatTimeString(metadata_list[-1][&quot;parameter&quot;][&quot;end_time&quot;]) timestamp = [] working_nodes = [] for metadata in metadata_list: report = metadata[&quot;report&quot;] first_entry = True node_url_list = [] for r in report: if r[&quot;node&quot;] not in [&quot;https://api.steemitstage.com&quot;, &quot;https://api.steemitdev.com&quot;, &quot;https://steemd-appbase.steemit.com&quot;, &quot;wss://steemd-appbase.steemit.com&quot;]: node_url = r[&quot;node&quot;].split(&quot;://&quot;)[1] if node_url not in node_url_list: node_url_list.append(node_url) if first_entry: first_entry = False timestamp.append(formatTimeString(metadata[&quot;parameter&quot;][&quot;end_time&quot;])) working_nodes.append(1) else: working_nodes[-1] += 1 timestamp_node = {} block_per_sec_node = {} history_per_sec_node = {} block_diff_seconds_node = {} apicall_time_node = {} block_diff_head_delay_node = {} block_diff_diff_head_irreversible_node = {} for metadata in metadata_list: report = metadata[&quot;report&quot;] first_entry = True for r in report: if r[&quot;node&quot;] not in [&quot;https://api.steemitstage.com&quot;, &quot;https://api.steemitdev.com&quot;, &quot;https://steemd-appbase.steemit.com&quot;, &quot;wss://steemd-appbase.steemit.com&quot;]: if r[&quot;node&quot;] not in timestamp_node: timestamp_node[r[&quot;node&quot;]] = [formatTimeString(metadata[&quot;parameter&quot;][&quot;end_time&quot;])] if r[&quot;block&quot;][&quot;rank&quot;] &gt; -1: block_per_sec_node[r[&quot;node&quot;]] = [(r[&quot;block&quot;][&quot;count&quot;] / r[&quot;block&quot;][&quot;time&quot;])] else: block_per_sec_node[r[&quot;node&quot;]] = [0] if r[&quot;history&quot;][&quot;rank&quot;] &gt; -1: history_per_sec_node[r[&quot;node&quot;]] = [r[&quot;history&quot;][&quot;count&quot;] / r[&quot;history&quot;][&quot;time&quot;]] else: history_per_sec_node[r[&quot;node&quot;]] = [0] if r[&quot;apicall&quot;][&quot;rank&quot;] &gt; -1: apicall_time_node[r[&quot;node&quot;]] = [(r[&quot;apicall&quot;][&quot;time&quot;])] else: apicall_time_node[r[&quot;node&quot;]] = [-1] if r[&quot;block_diff&quot;][&quot;rank&quot;] &gt; -1: block_diff_head_delay_node[r[&quot;node&quot;]] = [(r[&quot;block_diff&quot;][&quot;head_delay&quot;])] block_diff_diff_head_irreversible_node[r[&quot;node&quot;]] = [(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;])] block_diff_seconds_node[r[&quot;node&quot;]] = [(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;] * 3 + r[&quot;block_diff&quot;][&quot;head_delay&quot;])] else: block_diff_head_delay_node[r[&quot;node&quot;]] = [-1] block_diff_diff_head_irreversible_node[r[&quot;node&quot;]] = [-1] block_diff_seconds_node[r[&quot;node&quot;]] = [-1] else: timestamp_node[r[&quot;node&quot;]].append(formatTimeString(metadata[&quot;parameter&quot;][&quot;end_time&quot;])) if r[&quot;block&quot;][&quot;rank&quot;] &gt; -1: block_per_sec_node[r[&quot;node&quot;]].append(r[&quot;block&quot;][&quot;count&quot;] / r[&quot;block&quot;][&quot;time&quot;]) else: block_per_sec_node[r[&quot;node&quot;]].append(0) if r[&quot;history&quot;][&quot;rank&quot;] &gt; -1: history_per_sec_node[r[&quot;node&quot;]].append(r[&quot;history&quot;][&quot;count&quot;] / r[&quot;history&quot;][&quot;time&quot;]) else: history_per_sec_node[r[&quot;node&quot;]].append(0) if r[&quot;apicall&quot;][&quot;rank&quot;] &gt; -1: apicall_time_node[r[&quot;node&quot;]].append(r[&quot;apicall&quot;][&quot;time&quot;]) else: apicall_time_node[r[&quot;node&quot;]].append(-1) if r[&quot;block_diff&quot;][&quot;rank&quot;] &gt; -1: block_diff_head_delay_node[r[&quot;node&quot;]].append((r[&quot;block_diff&quot;][&quot;head_delay&quot;])) block_diff_diff_head_irreversible_node[r[&quot;node&quot;]].append(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;]) block_diff_seconds_node[r[&quot;node&quot;]].append(r[&quot;block_diff&quot;][&quot;diff_head_irreversible&quot;] * 3 + r[&quot;block_diff&quot;][&quot;head_delay&quot;]) else: block_diff_head_delay_node[r[&quot;node&quot;]].append(-1) block_diff_diff_head_irreversible_node[r[&quot;node&quot;]].append(-1) block_diff_seconds_node[r[&quot;node&quot;]].append(-1) show_plots = False plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, working_nodes, **opts) plt.grid() plt.legend() plt.title(&quot;Number of working nodes&quot;) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Number of working nodes&quot;) if show_plots: plt.show() else: plt.savefig(&quot;number_working_nodes.png&quot;) image_index = 0 for node in timestamp_node: timestamp = timestamp_node[node] block_per_sec = block_per_sec_node[node] apicall_time = apicall_time_node[node] history_per_sec = history_per_sec_node[node] block_diff_seconds = block_diff_seconds_node[node] mean_hist = sum(history_per_sec) / len(history_per_sec) mean_block = sum(block_per_sec) / len(block_per_sec) mean_api = sum(apicall_time) / len(apicall_time) mean_diff = sum(block_diff_seconds) / len(block_diff_seconds) max_diff = 20 min_diff = 80 for x in block_diff_seconds: if x &gt; max_diff and x &lt; 1000: max_diff = x if x &lt; min_diff and x &gt; 0: min_diff = x print(&quot;The %s node has a good performance. It handles around %.0f history operation per second, %.0f blocks per second and needs %.2f seconds for an API call. The block delay is around %.0f - %.0f seconds.&quot; % (node, mean_hist, mean_block, mean_api, min_diff, max_diff)) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, block_per_sec, **opts) plt.grid() plt.legend() plt.title(&quot;Blocks per second for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Blocks per second&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_blocks_per_second.png&quot; % image_index) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, apicall_time, **opts) plt.grid() plt.legend() plt.title(&quot;Api call duration for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Api call duration [s]&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_api_call.png&quot; % image_index) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, history_per_sec, **opts) plt.grid() plt.legend() plt.title(&quot;History Ops over time for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;History Operation per second&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_history_ops.png&quot; % image_index) plt.figure(figsize=(12, 6)) opts = {&apos;linestyle&apos;: &apos;&apos;, &apos;marker&apos;: &apos;.&apos;} plt.plot_date(timestamp, block_diff_seconds, **opts) plt.grid() plt.legend() plt.title(&quot;Block time difference to newest generated block for %s&quot; % node) plt.xlabel(&quot;Date&quot;) plt.ylabel(&quot;Block time difference [s]&quot;) if show_plots: plt.show() else: plt.savefig(&quot;%d_block_time_diff.png&quot; % image_index) image_index += 1 Relevant Links and ResourcesThe benchmark for each full node was repeated every 3 hours and is stored in the @fullnodeupdate account. The benchmark can be found here:https://github.com/holgern/steem-fullnode-update/ Repositoryhttps://github.com/steemit/steemThis analysis is using measured data from the steem full node servers. This page is synchronized from the post: ‘Monthly fullnode report for December 2018’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/monthly-fullnode-report-for-december-2018/"},{"title":"beempy.com shows results of all played steemmonster challenges ","text":"https://beempy.com/sm_challenges shows now the result of the last 1000 played steemmonster challenges. The site is updated every minute (the shown current timestamp is in UTC time). This site is helpful to organize tournaments, in which manually started challenges are used to find the winner. https://beempy.com/sm_challenges can be used to check who played and which player won. This is a lot easier than entering all participants manually into the steemmonster battle log and check the results: Please let me know, if I can something improve :). This page is synchronized from the post: ‘beempy.com shows results of all played steemmonster challenges ‘ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beempy-com-shows-results-of-all-played-steemmonster-challenges/"},{"title":"Automatic result scoring for challonge steemmonster tournaments","text":"I played a little with the powerchallonge API library for challonge.com and created a small bot for letting everyone automatically scoring challenge results into the challonge tournament. How does it work?At first, a new tournament should be created at https://challonge.com/tournaments/new: The entered name in URL is the identifier and will be important later.It is important that every participant changed their displayed name to the steem account name. The challonge username can be different. Their is no limitation to the game info or the registration. Example of a single elimination tournament with a registration page and check in: Important are the advanced options. Everything works only if smtournament is added as admin for entering scoring:Without this, automatic scoring is not possible. In summary: create a new tournament remember your url add smtournament as admin Send now a transfer memo to the steem account @smtournament with follwoing text:identifier,level_limit,allowed_cards,match_type identifier is the URL without challonge.com, in my example sm_test_tournament_010 level_limit can be Novice, Bronze, Silver, Gold or Diamond allowed_cards can be all, gold_only, alpha_only match_type can be best_of_one or best_of_three level_limit and allowed_cards define which challenges will count. They have to be set at the beginning of each challenge. Played challenges with not fitting values will not count. When match_type is best_of_one, one win is sufficient to win a match. If the match was a draw, it is repeated.If it is set to best_of_three, a participant has won the match when he wins 2 steemmonster challenges. Test if it works as intentedI created a new tournament which is played today 14:00 UTC. Checkin is opened 15 minutes before.I set level_limit to Silver, allowed_cards to all and match_type to best_of_one. You can find the tournament here: https://challonge.com/sm_test_tournament_010 I send 0.001 STEEM to @smtournament for registering my tournament: When I start the tournament at challonge.com, I will receive a transfer from @smtournament when everything has worked so far and the results of all played matches should be entered automatically. SummaryIt is possible to register a challonge tournament for automatc scoring. Create a tournament with smtournament as admin Send a transfer memo to @smtournament Start the tournament and check if you receive a confirmation All results should be entered automatically now. When a participant has a displayed name different from the steem account name, the results of all matches in which this participant is involved must be entered manually (_ are fine) When all matches are played, the tournament at challonge has to be closed manually Please register at https://challonge.com/sm_test_tournament_010 and help me checking if everything works :). The tournament starts at 14:00 UTC. What do you think? This page is synchronized from the post: ‘Automatic result scoring for challonge steemmonster tournaments’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/automatic-result-scoring-for-challonge-steemmonster-tournaments/"},{"title":"Improved automatic result scoring for challonge steemmonster tournaments","text":"I introduced yesterday my @smtournament bot for automatically entering score points during a steemmonsters tournament at challonge.com. Everyone can use this bot. You can find the post here. How to do it Go to https://challonge.com/tournaments/new create a new tournament with smtournament as admin ( Advanced Options, share admin access) Send a transfer memo to @smtournament The memo consists of a comma separated string with the following components: identifier (this is the URL after challonge.com) and not the name of the tournament level_limit (Novice, Bronze, Silver, Gold or Diamond) allowed_cards can be all, gold_only, alpha_only match_type can be best_of_one or best_of_three For example:sm_test_tournament_011,Silver,all,best_of_3 New featuresIt is now possible to add auto and randomize to the transfer memo. It does not matter which is put first. auto will automatically check participants in (when selected) and will start the tournament at the given time. It is also automatically finished when all results were entered. randomize will shuffle the seeds of all participands before starting the tournament. auto and randomize must be placed last in the tranfer memo. Example:1sm_test_tournament_011,Silver,all,best_of_3,auto or1sm_test_tournament_011,Silver,all,best_of_3,randomize,auto New posts for announcement and resultsWhen sending the transfer to @smtournament, a short announcement post is created. You can find a example here: https://steemit.com/steemmonsters/@smtournament/tournament-announcement-for-second-test-tournament-with-automatic-scoring When the tournament is finished, a result post is created. Here is the post of the last test tournament:https://steemit.com/steemmonsters/@smtournament/tournament-results-for-first-tournament-with-automatic-scoring This page is synchronized from the post: ‘Improved automatic result scoring for challonge steemmonster tournaments’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/improved-automatic-result-scoring-for-challonge-steemmonster-tournaments/"},{"title":"Multisignature Transaction Guide for beempy","text":"This guide will describe how to broadcast a multisignature transactions to the steem blockchain using beempy. It is my submission to this bounty. beempy is the command line tool provided by the python library beem. It is installed when the beem library is installed. InstallationThere are three different ways to install beem/beempy: Install beem through pip / pip3Assuming that python and pip is already installed, beem can be installed by1pip install beem This does not work on windows. Install beem through condaWhen anaconda is used, beempy can be installed by1conda install beem This works also on windows Unzip beempy provided by pyinstaller for windowsDownload the newest beempy zip file from the release site and unpack it. A more detailed installation guide can be found in the readme file. This guide is only valid for beempy version 0.20.16 or higher. The version can be checked by:1beempy --version The guide will not work for versions below 0.20.16! Setting up multisignature authority for the active authority - Part 1In order to change the active authority permissions, the active key of the account that should be changed, must be stored in the key wallet.It can be checked if there is already a wallet by:1beempy walletinfo When there is no, it can be created by:1beempy createwallet Now we can add the active key:1beempy addkey There will be two prompts, the first will ask for the wallet master password and the second will ask for the active key. At first we should check if the account which should be set up, already has more than one permission.1beempy permissions &lt;account_name&gt; If there is more than one Key listed and all accounts that were given active authority permission should be removed, it can be done by:1beempy disallow --permission active -a &lt;account_name&gt; &lt;account_with_active_permission&gt; Now, active permissions can be granted to other accounts by using the allow command. Lets assume we want to allow N accounts / keys for active permission.when adding the first N-1 accounts/keys we must not define the treshold T:1234beempy allow --permission active -a &lt;account_name&gt; --weight W_1 &lt;pubkey_or_accountname_1&gt;beempy allow --permission active -a &lt;account_name&gt; --weight W_2 &lt;pubkey_or_accountname_2&gt;...beempy allow --permission active -a &lt;account_name&gt; --weight W_n-1 &lt;pubkey_or_accountname_n-1&gt; Now we can set the threshold T for the last account/key:1beempy allow --permission active -a &lt;account_name&gt; --weight W_n --threshold T &lt;pubkey_or_accountname_n&gt; Posting authorityWhen permissions to the posting authority should be changed,1--permission active must be replaced by1--permission posting ExampleWe want to setup the active authority with 7 keys: A user wants to have their active authority setup with seven keys. Keys one and two each have a weight of 25%. Keys three, four, five, six, and seven each have a weight of 10%. In order for a transaction to be valid, it must have at least 40% weighted signatures. 12345678910111213beempy allow --permission active -a testholger --weight 25 STM6bVMCVr4FcLmbcckEgaHcHmcfytzoanTW1FrnTQ6rL5NWuBeGA beempy allow --permission active -a testholger --weight 25 STM8RsufKpLfEeirs6WYDJm93UT1U5ntQqkSZrumWhv9Tw8B1NWTxbeempy allow --permission active -a testholger --weight 10 STM58dtFYRZviGgbm4nhnELczhGDK78R3Vi7M1VCdkNS2vZG8pkbJ beempy allow --permission active -a testholger --weight 10 STM8A2zgE2wouhMfd6ycAvpboB6m2PKwa31pih49yZTsbD5jGMT3t beempy allow --permission active -a testholger --weight 10 STM5qoHyJrKCsW4FFhrrbWPuS52N2FUjQTFiHJVHfuBykEVvENrvS beempy allow --permission active -a testholger --weight 10 STM8LaqooL399EZXUacyBVFCXJiGRnQsyw6YYGEN7UqQksdH5oAta beempy allow --permission active -a testholger --weight 10 --threshold 40 STM8Y8aYJC7EbFRZ34imY2sJ7b78WprTMWiQAp4hbYcg2JCr4EcT9 Let’s check if everything has worked out:1234567891011121314151617 beempy permissions testholger+------------+-----------+------------------------------------------------------------+| Permission | Threshold | Key/Account |+------------+-----------+------------------------------------------------------------+| owner | 1 | STM8k9awBgjduUdkoTyP1DFSLYNrtqgnCeeETFFWHeox4BKybT71n (1) || active | 40 | STM58dtFYRZviGgbm4nhnELczhGDK78R3Vi7M1VCdkNS2vZG8pkbJ (10) || | | STM5qoHyJrKCsW4FFhrrbWPuS52N2FUjQTFiHJVHfuBykEVvENrvS (10) || | | STM6bVMCVr4FcLmbcckEgaHcHmcfytzoanTW1FrnTQ6rL5NWuBeGA (25) || | | STM8A2zgE2wouhMfd6ycAvpboB6m2PKwa31pih49yZTsbD5jGMT3t (10) || | | STM8LaqooL399EZXUacyBVFCXJiGRnQsyw6YYGEN7UqQksdH5oAta (10) || | | STM8RsufKpLfEeirs6WYDJm93UT1U5ntQqkSZrumWhv9Tw8B1NWTx (25) || | | STM8Y8aYJC7EbFRZ34imY2sJ7b78WprTMWiQAp4hbYcg2JCr4EcT9 (10) || | | STM8YQFkpJrj74SdR8JWRv12DHVRn3eKoAaEcwrj1QmLGArZY39o8 (1) || posting | 1 | STM52tq9RWwdYJ3gzxz2fzhcg9HCBfouqcHBYVU439tLdk73Ed7SM (1) |+------------+-----------+------------------------------------------------------------+ Setting up multisignature authority for the active authority - Part 2When an account has more than one key assigned to the active permission, broadcasting is successfully when at least the weight sum of all signed keys is at least the threshold T. At first we need to create a unsigned transaction. We can do this with beempy by:1beempy -xd -e 3600 &lt;command&gt; &lt;options&gt; &gt; unsigned_transaction.json The parameter x and d prevent that the transaction is signed and broadcasted. -e 3600 increases the expiration time to the maximum time of 1 hour. This means that all participants have 1 hour to sign and finally to broadcast. We need the key that should sign in the wallet:1beempy addkey Signing can than be done by1beempy sign --file unsigned_transaction.json -o signed_1_transaction.json The next signer with has the next key in its wallet can sign with:1beempy sign --file signed_1_transaction.json -o signed_2_transaction.json This is repeated until the weight sum of signer exceed the threshold. Broadcasting can then be done by:1beempy broadcast --file signed_2_transaction.json ExampleLet’s continue our example and transfer some STEEM: One of the key holders of the account wants to transfer 5.0 STEEM tokens to another user. The transaction should be signed with keys one, four, and five (which would exceed the 40% threshold). We need to create the unsigned transaction first:1beempy -xd -e 3600 transfer -a testholger holger80 5.000 STEEM &gt; unsigned_transaction.json Then the first signer will sign. The first key must be stored in the wallet1beempy addkey and we can sign:1beempy sign --file unsigned_transaction.json -o signed_1_transaction.json Now we delete the key with:1beempy delkey STM6bVMCVr4FcLmbcckEgaHcHmcfytzoanTW1FrnTQ6rL5NWuBeGA Now the forth key should sign and we add this key to the wallet1beempy addkey and we can sign:1beempy sign --file signed_1_transaction.json -o signed_2_transaction.json Now we delete the key with:1beempy delkey STM8A2zgE2wouhMfd6ycAvpboB6m2PKwa31pih49yZTsbD5jGMT3t Now the fifth key will sign. We will add it first:1beempy addkey and we can sign:1beempy sign --file signed_2_transaction.json -o signed_3_transaction.json We have enough signer and we can now broadcast the transaction by:1beempy broadcast --file signed_3_transaction.json Let’s see if it has worked: There are the three signatures, so everything worked out! This page is synchronized from the post: ‘Multisignature Transaction Guide for beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/multisignature-transaction-guide-for-beempy/"},{"title":"update for beem - nodelist updated, beempy sign and broadcast improved","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 494 unit tests and a coverage of 72 %. The current version is 0.20.16.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by: 1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New FeaturesCheck for ùtf-16 codingbeempy sign and beempy broadcast can now read utf-8 files which occur when using1beempy -xd -e 3600 &lt;command&gt; &lt;options&gt; &gt; unsigned_transaction.json on windows. It is now checked if the file contains any \\0 characters. When this is the case it is loaded as utf-16 file.123if tx.find(&apos;\\0&apos;) &gt; 0: with open(file, encoding=&apos;utf-16&apos;) as fp: tx = fp.read() Add oufile to beempy signAs beempy sign asks for the wallet password, a1beempy sign --file unsigned.json &gt; signed.json is not working properly. I added a new option --outfile which allow it to store the signed file and enter the wallet password:1beempy sign --file unsigned.json -o signed.json Prevent that beempy sign deletes signaturesBefore this commt, beempy sign was deleting already stored signatures. This prevents that more than one signing was possible.By adding a new optionreconstruct_tx to steem.sign() which allows to set reconstruct_tx of TransactionBuilder.sign(), it is now possible to use steem.sign with stem.sign(reconstruct_tx=False) which allows to sign without deleting old signatures. It is now possible to create a unsigned.json and let it sign by several signers.123beempy -xd -e 3600 &lt;command&gt; &lt;options&gt; &gt; unsigned_transaction.jsonbeempy sign --file unsigned_transaction.json -o sign1.jsonbeempy sign --file sign1.json -o sign2.json sign2.json has now the signatures from the first and the second signing. beempy walletinfo1beempy walletinfo works now without going offline (using -o). Nodelist updatedNot working nodes: wss://rpc.curiesteem.com wss://anyx.io https://rpc.buildteam.io were removed. CommitsFix beempy walletinfo and sign commit 577ec41 Disable not working nodes and improve beempy sign and broadcast commit 915107d Improve file reading for beempy sign and broadcast add option to write file for beempy sign Fix unit tests commit 4aef469 Github accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - nodelist updated, beempy sign and broadcast improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-nodelist-updated-beempy-sign-and-broadcast-improved/"},{"title":"Steemmonsters tournament ranking week#1","text":"Since 2018-12-22 19:21:05, 6356 steemmonsters challenge battles were played. 654 player participated (104 more than last week). I collected all played challenges and calculated the ELO rating for each player. Data sourceI streamed all custom_json operation with a sm_submit_team id. Then I checked the steemmonsters API: https://steemmonsters.com/battle/result?id=trx_id by entering the transaction id. When the match_type is equal to Challenge, I store the battle result in my database. Declined matches are skipped. ResultsThe table shows the ELO rating for the top 150 steemmonsters tournament and challenge participants.The displayed changes are the increase or decrease of the rating from last week to now. The ELO rating was calculated by skipping declined matches. The k-factor is set to 40 when a participant has less than 30 matches and to 20 otherwise. When the rating is over 2400, the k-factor is reduced to 10. rank name wins battles ELO Changes 1 bji1203 165 250 321.93 + 109.85 2 glory7 197 284 291.22 + 7.53 3 tufkat 31 41 284.91 + 128.17 4 fenrir78 25 36 266.70 + 206.59 5 toocurious 73 107 211.82 + 9.30 6 marabara 61 93 186.91 + 21.23 7 beeyou 58 90 183.45 + 31.90 8 smongo 77 142 177.12 + 128.88 9 wombykus 53 81 176.79 -77.01 10 bubke 13 19 172.52 + 152.52 11 gfriend96 27 54 165.60 + 234.39 12 clayboyn 111 178 160.69 -64.12 13 pedrojesuss 12 14 160.62 + 160.62 14 jarunik 36 65 159.00 + 144.88 15 tradingideas 81 126 157.51 -41.28 16 jrvacation 28 45 156.20 -6.42 17 masterthematrix 90 149 148.10 + 3.91 18 exyle 11 18 145.78 + 165.78 19 jaki01 29 48 140.41 + 103.35 20 tailcock 72 113 137.54 -39.55 21 clove71 24 40 136.95 + 90.31 22 pladozero 27 45 136.86 -40.19 23 stiant 55 92 135.37 + 135.37 24 jarvie 36 58 132.32 + 26.65 25 oendertuerk 10 11 132.08 0.00 26 hendersonp 79 150 131.01 + 88.83 27 colovhis 43 69 129.64 -40.62 28 imperfect-one 17 27 128.81 + 82.45 29 goodhello 41 67 126.13 -16.99 30 ramires 28 51 124.94 -25.08 31 aewind 8 13 124.63 + 124.63 32 cranium 106 167 124.43 -82.43 33 mellofello 43 77 123.54 -17.14 34 vaansteam 52 85 123.09 -93.36 35 just2random 55 92 121.52 -7.23 36 digitalart 9 9 119.95 0.00 37 roki112 12 16 119.52 + 119.52 38 pizzachain 63 116 119.51 + 90.03 39 ivz 16 23 114.42 0.00 40 steelman 10 13 112.80 0.00 41 cryptoeater 11 16 112.09 + 112.09 42 nealmcspadden 23 38 111.26 + 4.67 43 kevinli 11 16 107.19 0.00 44 sirtorito 82 160 105.22 + 63.45 45 uwelang 62 107 103.77 -41.74 46 freddhill 10 15 101.91 + 101.91 47 elarawatodigital 28 43 101.76 0.00 48 tufkat.monsters 21 36 100.68 -13.73 49 bountywolf 114 218 100.66 + 99.43 50 dreemit 39 86 99.52 + 72.59 51 wizardave 70 125 97.16 + 0.71 52 dreamryder007 52 102 97.04 + 8.28 53 monster-one 8 9 96.86 0.00 54 flauwy 18 29 95.53 + 21.19 55 wonsama 13 29 95.46 + 162.33 56 munkiioh 50 92 92.08 + 30.82 57 emrebeyler 7 12 91.15 + 91.15 58 holoz0r 13 19 89.18 + 89.18 59 abh12345 9 14 85.80 0.00 60 freddbrito 13 22 85.72 + 105.20 61 minloulou 5 8 84.81 + 131.92 62 tendershepard 17 39 84.03 + 93.45 63 stream-master 15 28 83.94 0.00 64 goose20 29 51 83.71 -7.65 65 wilhb81 22 41 83.28 + 69.06 66 gorayii 8 10 83.16 0.00 67 doctorcrypto 11 22 83.07 + 133.23 68 damper 16 30 82.73 + 29.95 69 zaku 12 18 81.46 + 31.08 70 khan.dayyanz 44 68 80.34 -73.38 71 pocus 5 5 80.07 0.00 72 aykaco 12 18 79.85 + 18.52 73 nicholaslive 13 24 77.58 + 8.08 74 coolbowser 8 14 74.91 0.00 75 randomgold 7 11 73.90 + 73.90 76 sourovafrin 26 49 71.81 + 155.41 77 andreinaabril 12 20 71.62 + 9.57 78 smonster 11 20 70.51 + 70.51 79 fantasycrypto 5 6 69.33 0.00 80 hotsauceislethal 5 6 68.70 0.00 81 pharesim 52 99 68.02 + 24.07 82 gringotts 7 13 66.77 + 66.77 83 ironshield 12 16 66.34 0.00 84 stever82 12 22 66.15 -31.44 85 aggamun 10 17 65.26 + 52.92 86 pavonj 19 28 65.23 + 22.82 87 contestkings 3 6 64.86 + 64.86 88 stealthtrader 97 223 64.22 + 66.72 89 monstermother 63 112 64.07 -64.22 90 devonstokes 5 6 63.01 + 13.27 91 spirits4you 19 35 63.01 + 7.59 92 palikari123 67 137 61.75 -43.53 93 salvao 37 67 60.61 -3.72 94 feuerbolt 31 51 60.40 -34.69 95 newageinv 6 10 59.91 0.00 96 vegemite 10 18 59.79 + 21.08 97 mmunited 24 47 59.21 + 59.21 98 ausbitbank 6 10 56.08 0.00 99 morrona 39 65 55.04 -81.73 100 hafizul 18 37 54.55 + 54.55 101 sheikhsayem 3 3 54.35 + 54.35 102 tech-master 5 7 53.89 + 16.18 103 happy33 6 11 53.51 0.00 104 gdwcoins 3 3 53.43 + 53.43 105 randolphrope 26 47 52.76 -9.79 106 jarwow 22 47 52.49 + 8.31 107 amvanaken 4 5 52.46 + 53.61 108 ablacknerd 9 17 51.86 + 51.86 109 j-p-bs 9 16 50.98 + 76.77 110 syedshakil 4 5 48.98 + 48.98 111 joedukeg 6 8 48.38 0.00 112 rawutah 5 9 48.24 + 48.24 113 tashidelek 60 114 47.05 -35.55 114 walhallo777 3 4 45.76 + 24.87 115 floridasnail 4 8 45.15 + 65.15 116 onefatindian 15 28 43.72 + 33.57 117 aries02 28 54 43.58 -12.35 118 nateaguila 16 29 43.04 + 4.64 119 rentmoney 57 113 42.15 -35.80 120 kensai 6 9 41.99 0.00 121 xerox-bru 61 118 41.80 -38.21 122 marcuswahl 12 24 41.64 -31.28 123 philippekiene 3 4 41.38 0.00 124 fromthebeginning 2 2 39.93 + 19.93 125 gank 2 2 39.87 0.00 126 jiann19 2 2 38.83 0.00 127 otage 14 28 38.75 -23.80 128 funworlding 3 4 38.07 + 14.49 129 yabapmatt 2 2 37.71 0.00 130 biglotto 2 2 37.71 0.00 131 fratheone 2 2 37.71 0.00 132 leonardot1 2 2 37.71 0.00 133 gpiglioni 2 2 37.71 0.00 134 von-doom 2 2 37.71 0.00 135 chromatic-dragon 7 13 36.67 + 36.67 136 goldenhawkeye 3 4 35.89 + 35.89 137 jedigeiss 4 6 35.71 0.00 138 davemccoy 48 96 35.43 + 2.20 139 heyimsnuffles 15 31 35.09 + 0.96 140 niklaus22 5 8 35.07 0.00 141 willsaldeno 57 124 35.06 + 84.55 142 jimbobbill 15 35 34.01 + 58.62 143 fromheart 6 12 32.92 + 19.19 144 treasurehunt 3 5 31.97 0.00 145 tcpolymath 4 7 31.47 0.00 146 malric-inferno 7 11 31.46 + 31.46 147 zacki 12 23 31.05 + 31.05 148 frankcapital 5 8 30.55 + 10.42 149 alex-hm 39 75 29.47 -39.30 150 mapanare 43 76 28.65 -38.55 This page is synchronized from the post: ‘Steemmonsters tournament ranking week#1’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-tournament-ranking-week-1/"},{"title":"Improved ranked deck lists for all leagues, rulesets and mana caps on beempy.com","text":"I reorganized my https://beempy.com/steemmonsters site. It shows now the best decks for the different leagues, mana caps and rule sets. The ranking of shown decks is calculated by the ELO formula. Each deck gets a unique string which consists of card id and level. E.g. 49-1,48-1,47-1,51-1,52-1,62-1. All played decks with exactly this card and level combination influence its rating. When the deck wins, it ELO-rating increases and when not then it will decrease. As player of a league can only play against each other, it is useful to group the deck rating by the different leagues. There is now a fast entry point for getting to a specific deck list: It is possible to switch to a different league: The list is updated every hour. It contains at the moment all played matches from 2018-12-28 02:00:00 on. How to use it?I start a new ranked game. I go to https://beempy.com/steemmonsters and select the correct ruleset, mana cap and league: When the site opened,I decided that I want to use a Sea Genie, so I press ctrl+F and search for genie: I enter the shown deck in the steemmonsters game and play. Hopefully, I win :). This page is synchronized from the post: ‘Improved ranked deck lists for all leagues, rulesets and mana caps on beempy.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/improved-ranked-deck-lists-for-all-leagues-rulesets-and-mana-caps-on-beempy-com/"},{"title":"Which steemmonsters cards have a high winning ratio for the different rule sets?","text":"These statistics show how often full leveled cards are able to win, depending on the ruleset. All ranked battles since 2018-12-28 02:00:00 are included. Only full leveled cards that were played at least 100 times are included. Only matches were both teams are using the full mana cap were included. As the post would be to big to broadcast, I excluded all monster cards with a winning ratio between 40% - 60%. Aim TrueSummoner card splinter wins n win_ratio Selenia Sky Dragon 492 750 65.60 % Lyanna Natura Earth 690 1335 51.69 % Zintar Mortalis Death 1107 2151 51.46 % Tyrus Paladium Life 1833 3592 51.03 % Alric Stormbringer Water 1014 2101 48.26 % Daria Dragonscale Dragon 95 211 45.02 % Malric Inferno Fire 675 1641 41.13 % Xia Seachan Water 92 235 39.15 % Monster card splinter wins n win_ratio Defender of Truth Life 642 1047 61.32 % Magi of the Forest Earth 430 703 61.17 % Screaming Banshee Death 322 531 60.64 % Swamp Thing Earth 619 1023 60.51 % Undead Priest Death 733 1219 60.13 % Fire Beetle Fire 343 869 39.47 % Raging Impaler Neutral 39 135 28.89 % Cyclops Neutral 152 728 20.88 % Giant Roc Fire 53 321 16.51 % Back to BasicsSummoner card splinter wins n win_ratio Selenia Sky Dragon 274 442 61.99 % Alric Stormbringer Water 1908 3240 58.89 % Lyanna Natura Earth 993 1717 57.83 % Xander Foxwood Earth 145 253 57.31 % Tyrus Paladium Life 1418 3023 46.91 % Malric Inferno Fire 523 1363 38.37 % Zintar Mortalis Death 668 1771 37.72 % Daria Dragonscale Dragon 40 132 30.30 % Monster card splinter wins n win_ratio Mischievous Mermaid Water 2000 2847 70.25 % Magi of the Forest Earth 1231 1821 67.60 % Peaceful Giant Neutral 1515 2302 65.81 % Swamp Thing Earth 719 1101 65.30 % Medusa Water 1284 1988 64.59 % Goblin Sorcerer Earth 894 1392 64.22 % Magi Sphinx Neutral 1979 3116 63.51 % Defender of Truth Life 759 1200 63.25 % Silvershield Warrior Life 237 388 61.08 % Earth Elemental Earth 806 1326 60.78 % Fire Beetle Fire 329 841 39.12 % Feral Spirit Life 255 657 38.81 % Frost Giant Water 50 130 38.46 % Rexxie Earth 123 321 38.32 % Serpentine Soldier Fire 90 238 37.82 % Hydra Neutral 40 107 37.38 % Crustacean King Water 222 603 36.82 % Haunted Spirit Death 506 1377 36.75 % Lord of Darkness Death 65 178 36.52 % Haunted Spider Death 459 1313 34.96 % Pit Ogre Fire 85 252 33.73 % Kobold Miner Fire 207 631 32.81 % Skeleton Assassin Death 193 685 28.18 % Elven Cutthroat Neutral 226 975 23.18 % Giant Roc Fire 76 357 21.29 % Cyclops Neutral 126 804 15.67 % Lost LegendariesSummoner card splinter wins n win_ratio Selenia Sky Dragon 305 494 61.74 % Xia Seachan Water 75 127 59.06 % Lyanna Natura Earth 662 1245 53.17 % Zintar Mortalis Death 1118 2189 51.07 % Alric Stormbringer Water 1155 2276 50.75 % Tyrus Paladium Life 1689 3386 49.88 % Malric Inferno Fire 683 1634 41.80 % Daria Dragonscale Dragon 67 182 36.81 % Monster card splinter wins n win_ratio Defender of Truth Life 717 1132 63.34 % Swamp Thing Earth 572 923 61.97 % Undead Priest Death 767 1256 61.07 % Mischievous Mermaid Water 847 1397 60.63 % Pit Ogre Fire 88 221 39.82 % Vampire Death 45 114 39.47 % Peaceful Giant Neutral 48 122 39.34 % Centaur Neutral 660 1685 39.17 % Raging Impaler Neutral 55 144 38.19 % Rexxie Earth 40 115 34.78 % Rusty Android Neutral 35 113 30.97 % Giant Roc Fire 88 409 21.52 % Cyclops Neutral 142 778 18.25 % Melee MayhemSummoner card splinter wins n win_ratio Selenia Sky Dragon 191 318 60.06 % Malric Inferno Fire 1455 2655 54.80 % Zintar Mortalis Death 1238 2489 49.74 % Tyrus Paladium Life 1621 3353 48.34 % Alric Stormbringer Water 870 1805 48.20 % Lyanna Natura Earth 660 1416 46.61 % Daria Dragonscale Dragon 187 410 45.61 % Talia Firestorm Fire 45 116 38.79 % Monster card splinter wins n win_ratio Elemental Phoenix Fire 265 406 65.27 % Goblin Shaman Fire 571 903 63.23 % Serpentine Soldier Fire 892 1422 62.73 % Defender of Truth Life 547 877 62.37 % Gold Dragon Dragon 81 132 61.36 % Flame Imp Fire 173 282 61.35 % Medusa Water 438 714 61.34 % Mischievous Mermaid Water 469 770 60.91 % Lord Arianthus Neutral 332 547 60.69 % Serpent of the Flame Fire 541 895 60.45 % Elven Cutthroat Neutral 725 1824 39.75 % Rexxie Earth 186 468 39.74 % Water Elemental Water 250 697 35.87 % Centaur Neutral 330 1077 30.64 % Cyclops Neutral 73 624 11.70 % Reverse SpeedSummoner card splinter wins n win_ratio Selenia Sky Dragon 199 294 67.69 % Lyanna Natura Earth 613 1034 59.28 % Alric Stormbringer Water 929 1696 54.78 % Daria Dragonscale Dragon 61 126 48.41 % Tyrus Paladium Life 1221 2524 48.38 % Zintar Mortalis Death 604 1323 45.65 % Malric Inferno Fire 377 1085 34.75 % Monster card splinter wins n win_ratio Gold Dragon Dragon 94 130 72.31 % Swamp Thing Earth 449 642 69.94 % Medusa Water 624 919 67.90 % Stone Golem Earth 247 367 67.30 % Mischievous Mermaid Water 443 661 67.02 % Sea Genie Water 256 385 66.49 % Frost Giant Water 382 587 65.08 % Magi of the Forest Earth 351 540 65.00 % Mushroom Seer Earth 251 389 64.52 % Earth Elemental Earth 571 887 64.37 % Wood Nymph Earth 141 224 62.95 % Undead Priest Death 399 663 60.18 % Pit Ogre Fire 141 366 38.52 % Silvershield Knight Life 70 187 37.43 % Serpentine Soldier Fire 66 179 36.87 % Elven Cutthroat Neutral 405 1109 36.52 % Fire Beetle Fire 215 594 36.20 % Cyclops Neutral 417 1214 34.35 % Kobold Miner Fire 290 862 33.64 % Centaur Neutral 330 1017 32.45 % Giant Roc Fire 35 267 13.11 % Rise of the CommonsSummoner card splinter wins n win_ratio Selenia Sky Dragon 300 477 62.89 % Zintar Mortalis Death 1267 2353 53.85 % Alric Stormbringer Water 1077 2002 53.80 % Xia Seachan Water 75 147 51.02 % Tyrus Paladium Life 1498 3126 47.92 % Lyanna Natura Earth 591 1294 45.67 % Malric Inferno Fire 667 1548 43.09 % Daria Dragonscale Dragon 72 175 41.14 % Monster card splinter wins n win_ratio Undead Priest Death 925 1435 64.46 % Frozen Soldier Water 378 591 63.96 % Twisted Jester Death 1136 1811 62.73 % Sabre Shark Water 535 880 60.80 % Medusa Water 753 1244 60.53 % Stonesplitter Orc Earth 90 250 36.00 % Rexxie Earth 51 143 35.66 % Hobgoblin Neutral 43 122 35.25 % Cyclops Neutral 422 1396 30.23 % Rusty Android Neutral 44 160 27.50 % Giant Roc Fire 122 459 26.58 % Silenced SummonersSummoner card splinter wins n win_ratio Xander Foxwood Earth 209 316 66.14 % Jarlax the Undead Death 153 246 62.20 % Selenia Sky Dragon 239 386 61.92 % Kiara Lightbringer Life 134 230 58.26 % Xia Seachan Water 231 415 55.66 % Zintar Mortalis Death 1084 2129 50.92 % Alric Stormbringer Water 882 1777 49.63 % Talia Firestorm Fire 212 428 49.53 % Lyanna Natura Earth 652 1325 49.21 % Tyrus Paladium Life 1459 3141 46.45 % Daria Dragonscale Dragon 51 110 46.36 % Malric Inferno Fire 680 1508 45.09 % Monster card splinter wins n win_ratio Undead Priest Death 838 1317 63.63 % Gold Dragon Dragon 132 209 63.16 % Swamp Thing Earth 653 1038 62.91 % Spirit of the Forest Earth 343 554 61.91 % Flame Imp Fire 241 390 61.79 % Defender of Truth Life 684 1110 61.62 % Twisted Jester Death 942 1544 61.01 % Stone Golem Earth 160 264 60.61 % Frozen Soldier Water 143 236 60.59 % Raging Impaler Neutral 45 115 39.13 % Centaur Neutral 618 1607 38.46 % Stonesplitter Orc Earth 76 198 38.38 % Rexxie Earth 36 115 31.30 % Giant Roc Fire 73 372 19.62 % Cyclops Neutral 99 726 13.64 % StandardSummoner card splinter wins n win_ratio Selenia Sky Dragon 362 577 62.74 % Lyanna Natura Earth 721 1313 54.91 % Alric Stormbringer Water 1128 2170 51.98 % Zintar Mortalis Death 1106 2250 49.16 % Tyrus Paladium Life 1574 3243 48.54 % Talia Firestorm Fire 47 101 46.53 % Malric Inferno Fire 787 1749 45.00 % Daria Dragonscale Dragon 80 209 38.28 % Xia Seachan Water 76 208 36.54 % Monster card splinter wins n win_ratio Swamp Thing Earth 632 988 63.97 % Spirit of the Forest Earth 299 476 62.82 % Mischievous Mermaid Water 866 1405 61.64 % Magi of the Forest Earth 490 796 61.56 % Defender of Truth Life 625 1017 61.46 % Sea Genie Water 252 413 61.02 % Medusa Water 667 1106 60.31 % Stonesplitter Orc Earth 64 162 39.51 % Elven Cutthroat Neutral 718 1836 39.11 % Centaur Neutral 591 1558 37.93 % Vampire Death 37 117 31.62 % Giant Roc Fire 87 386 22.54 % Cyclops Neutral 126 737 17.10 % Super SneakSummoner card splinter wins n win_ratio Selenia Sky Dragon 198 325 60.92 % Malric Inferno Fire 1305 2479 52.64 % Zintar Mortalis Death 1168 2262 51.64 % Lyanna Natura Earth 729 1426 51.12 % Tyrus Paladium Life 1594 3375 47.23 % Daria Dragonscale Dragon 155 336 46.13 % Alric Stormbringer Water 851 1865 45.63 % Xia Seachan Water 46 105 43.81 % Monster card splinter wins n win_ratio Undead Priest Death 611 975 62.67 % Angel of Light Life 75 120 62.50 % Spirit of the Forest Earth 163 262 62.21 % Swamp Thing Earth 432 695 62.16 % Defender of Truth Life 548 891 61.50 % Rusty Android Neutral 64 167 38.32 % Raging Impaler Neutral 106 279 37.99 % Water Elemental Water 280 758 36.94 % Centaur Neutral 323 1099 29.39 % Cyclops Neutral 82 676 12.13 % Taking SidesSummoner card splinter wins n win_ratio Selenia Sky Dragon 319 511 62.43 % Zintar Mortalis Death 879 1671 52.60 % Jarlax the Undead Death 55 105 52.38 % Lyanna Natura Earth 473 935 50.59 % Tyrus Paladium Life 965 1964 49.13 % Alric Stormbringer Water 675 1438 46.94 % Malric Inferno Fire 556 1210 45.95 % Talia Firestorm Fire 45 107 42.06 % Daria Dragonscale Dragon 60 153 39.22 % Monster card splinter wins n win_ratio Serpent of the Flame Fire 138 355 38.87 % Pit Ogre Fire 70 189 37.04 % Silvershield Warrior Life 84 242 34.71 % Silvershield Knight Life 120 347 34.58 % Animated Corpse Death 66 200 33.00 % Vampire Death 41 135 30.37 % Giant Roc Fire 32 148 21.62 % Target PracticeSummoner card splinter wins n win_ratio Selenia Sky Dragon 491 775 63.35 % Lyanna Natura Earth 689 1300 53.00 % Malric Inferno Fire 1075 2086 51.53 % Alric Stormbringer Water 1039 2153 48.26 % Daria Dragonscale Dragon 88 184 47.83 % Talia Firestorm Fire 123 259 47.49 % Zintar Mortalis Death 1018 2158 47.17 % Tyrus Paladium Life 1497 3178 47.11 % Monster card splinter wins n win_ratio Spirit of the Forest Earth 280 428 65.42 % Gold Dragon Dragon 237 370 64.05 % Stone Golem Earth 133 208 63.94 % Swamp Thing Earth 578 911 63.45 % Elemental Phoenix Fire 726 1171 62.00 % Flame Imp Fire 257 415 61.93 % Centaur Neutral 540 1384 39.02 % Spineback Wolf Death 39 103 37.86 % Wood Nymph Earth 67 181 37.02 % Rexxie Earth 31 107 28.97 % Giant Roc Fire 100 400 25.00 % Cyclops Neutral 152 784 19.39 % UnprotectedSummoner card splinter wins n win_ratio Selenia Sky Dragon 368 596 61.74 % Zintar Mortalis Death 1405 2341 60.02 % Lyanna Natura Earth 867 1505 57.61 % Talia Firestorm Fire 82 148 55.41 % Malric Inferno Fire 1127 2043 55.16 % Daria Dragonscale Dragon 124 252 49.21 % Alric Stormbringer Water 879 2056 42.75 % Tyrus Paladium Life 963 2705 35.60 % Monster card splinter wins n win_ratio Undead Priest Death 1010 1415 71.38 % Flame Imp Fire 283 399 70.93 % Lord of Darkness Death 203 297 68.35 % Twisted Jester Death 1155 1700 67.94 % Swamp Thing Earth 686 1012 67.79 % Mushroom Seer Earth 338 517 65.38 % Screaming Banshee Death 380 584 65.07 % Goblin Shaman Fire 800 1242 64.41 % Magi of the Forest Earth 530 837 63.32 % Gold Dragon Dragon 129 204 63.24 % Dark Enchantress Death 208 329 63.22 % Cerberus Fire 512 835 61.32 % Earth Elemental Earth 717 1174 61.07 % Skeleton Assassin Death 1021 1677 60.88 % Vampire Death 81 134 60.45 % Fire Demon Fire 749 1247 60.06 % Water Elemental Water 372 958 38.83 % Feral Spirit Life 396 1037 38.19 % Peacebringer Life 745 2037 36.57 % Divine Healer Life 929 2564 36.23 % Silvershield Knight Life 112 311 36.01 % Silvershield Warrior Life 46 130 35.38 % Giant Roc Fire 140 398 35.18 % Spineback Turtle Water 376 1095 34.34 % Silvershield Paladin Life 658 2023 32.53 % Frozen Soldier Water 40 153 26.14 % Cyclops Neutral 131 730 17.95 % Up Close &amp; PersonalSummoner card splinter wins n win_ratio Zintar Mortalis Death 1019 1614 63.14 % Malric Inferno Fire 1117 1879 59.45 % Daria Dragonscale Dragon 179 330 54.24 % Selenia Sky Dragon 43 101 42.57 % Lyanna Natura Earth 396 971 40.78 % Alric Stormbringer Water 337 833 40.46 % Tyrus Paladium Life 649 2034 31.91 % Monster card splinter wins n win_ratio Lord of Darkness Death 653 947 68.95 % Skeleton Assassin Death 888 1393 63.75 % Serpent of the Flame Fire 638 1017 62.73 % Haunted Spirit Death 771 1268 60.80 % Spineback Wolf Death 344 569 60.46 % Serpentine Soldier Fire 626 1038 60.31 % Hobgoblin Neutral 237 597 39.70 % Rexxie Earth 131 340 38.53 % Stone Golem Earth 93 242 38.43 % Stonesplitter Orc Earth 249 652 38.19 % Feral Spirit Life 650 1961 33.15 % Rusty Android Neutral 120 364 32.97 % Silvershield Knight Life 491 1538 31.92 % Minotaur Warrior Earth 80 264 30.30 % Clay Golem Life 80 264 30.30 % Silvershield Warrior Life 183 651 28.11 % Silvershield Paladin Life 401 1520 26.38 % Weak MagicSummoner card splinter wins n win_ratio Selenia Sky Dragon 408 633 64.45 % Tyrus Paladium Life 2060 3959 52.03 % Lyanna Natura Earth 649 1314 49.39 % Zintar Mortalis Death 1030 2088 49.33 % Xia Seachan Water 70 143 48.95 % Alric Stormbringer Water 861 1812 47.52 % Daria Dragonscale Dragon 101 233 43.35 % Malric Inferno Fire 740 1711 43.25 % Monster card splinter wins n win_ratio Defender of Truth Life 938 1438 65.23 % Gold Dragon Dragon 91 148 61.49 % Spirit of the Forest Earth 326 537 60.71 % Swamp Thing Earth 585 972 60.19 % Pit Ogre Fire 83 215 38.60 % Spineback Wolf Death 58 154 37.66 % Vampire Death 40 107 37.38 % Stonesplitter Orc Earth 71 201 35.32 % Raging Impaler Neutral 49 141 34.75 % Animated Corpse Death 39 113 34.51 % Rexxie Earth 32 107 29.91 % Giant Roc Fire 84 373 22.52 % Cyclops Neutral 107 677 15.81 % Best winning ratio across all rule sets card splinter best rule win ratio Gold Dragon Dragon Reverse Speed 72.31 % Undead Priest Death Unprotected 71.38 % Flame Imp Fire Unprotected 70.93 % Mischievous Mermaid Water Back to Basics 70.25 % Swamp Thing Earth Reverse Speed 69.94 % Lord of Darkness Death Up Close &amp; Personal 68.95 % Twisted Jester Death Unprotected 67.94 % Medusa Water Reverse Speed 67.90 % Selenia Sky Dragon Reverse Speed 67.69 % Magi of the Forest Earth Back to Basics 67.60 % Stone Golem Earth Reverse Speed 67.30 % Sea Genie Water Reverse Speed 66.49 % Xander Foxwood Earth Silenced Summoners 66.14 % Peaceful Giant Neutral Back to Basics 65.81 % Spirit of the Forest Earth Target Practice 65.42 % Mushroom Seer Earth Unprotected 65.38 % Elemental Phoenix Fire Melee Mayhem 65.27 % Defender of Truth Life Weak Magic 65.23 % Frost Giant Water Reverse Speed 65.08 % Screaming Banshee Death Unprotected 65.07 % Goblin Shaman Fire Unprotected 64.41 % Earth Elemental Earth Reverse Speed 64.37 % Goblin Sorcerer Earth Back to Basics 64.22 % Frozen Soldier Water Rise of the Commons 63.96 % Skeleton Assassin Death Up Close &amp; Personal 63.75 % Magi Sphinx Neutral Back to Basics 63.51 % Dark Enchantress Death Unprotected 63.22 % Zintar Mortalis Death Up Close &amp; Personal 63.14 % Wood Nymph Earth Reverse Speed 62.95 % Serpent of the Flame Fire Up Close &amp; Personal 62.73 % Serpentine Soldier Fire Melee Mayhem 62.73 % Angel of Light Life Super Sneak 62.50 % Jarlax the Undead Death Silenced Summoners 62.20 % Cerberus Fire Unprotected 61.32 % Silvershield Warrior Life Back to Basics 61.08 % Haunted Spirit Death Up Close &amp; Personal 60.80 % Sabre Shark Water Rise of the Commons 60.80 % Lord Arianthus Neutral Melee Mayhem 60.69 % Spineback Wolf Death Up Close &amp; Personal 60.46 % Vampire Death Unprotected 60.45 % Fire Demon Fire Unprotected 60.06 % Sacred Unicorn Life Weak Magic 59.80 % Naga Warrior Water Target Practice 59.79 % Flesh Golem Earth Reverse Speed 59.70 % Kobold Miner Fire Up Close &amp; Personal 59.58 % Hydra Neutral Up Close &amp; Personal 59.46 % Malric Inferno Fire Up Close &amp; Personal 59.45 % Enchanted Pixie Neutral Back to Basics 59.35 % Lyanna Natura Earth Reverse Speed 59.28 % Xia Seachan Water Lost Legendaries 59.06 % Alric Stormbringer Water Back to Basics 58.89 % Spineback Turtle Water Back to Basics 58.82 % Haunted Spider Death Unprotected 58.42 % Divine Sorceress Life Aim True 58.41 % Clay Golem Life Aim True 58.33 % Kiara Lightbringer Life Silenced Summoners 58.26 % Pirate Captain Water Rise of the Commons 58.13 % Crustacean King Water Rise of the Commons 57.55 % Animated Corpse Death Up Close &amp; Personal 57.33 % Air Elemental Life Weak Magic 56.80 % Creeping Ooze Neutral Super Sneak 56.59 % Highland Archer Neutral Reverse Speed 56.22 % Pit Ogre Fire Up Close &amp; Personal 55.53 % Talia Firestorm Fire Unprotected 55.41 % Silvershield Knight Life Super Sneak 55.27 % Water Elemental Water Rise of the Commons 55.16 % Giant Roc Fire Up Close &amp; Personal 55.14 % Daria Dragonscale Dragon Up Close &amp; Personal 54.24 % Fire Beetle Fire Unprotected 52.95 % Feral Spirit Life Weak Magic 52.85 % Silvershield Paladin Life Weak Magic 52.55 % Lightning Dragon Dragon Target Practice 52.48 % Tyrus Paladium Life Weak Magic 52.03 % Divine Healer Life Weak Magic 51.86 % Peacebringer Life Taking Sides 51.76 % Hobgoblin Neutral Super Sneak 51.26 % Stonesplitter Orc Earth Super Sneak 50.73 % Elven Cutthroat Neutral Rise of the Commons 50.42 % Cocatrice Neutral Super Sneak 50.15 % Raging Impaler Neutral Back to Basics 50.00 % Grumpy Dwarf Neutral Super Sneak 48.29 % Minotaur Warrior Earth Super Sneak 47.69 % Chromatic Dragon Dragon Up Close &amp; Personal 47.29 % Rexxie Earth Super Sneak 45.63 % Centaur Neutral Rise of the Commons 45.04 % Rusty Android Neutral Melee Mayhem 40.00 % Cyclops Neutral Reverse Speed 34.35 % ConclusionCards with a winning ratio below 50% should be avoided for the specific ruleset. There are 9 cards that are always above 50%, as the Gold Dragon. These are good cards that fit on every rule set. On the other hand, there are 7 cards that lose always more matches no matter which ruleset. The Cyclops for example has a winning ratio between 11.7% - 34.35%. These cards should be avoided. The number indicate that the following reward cards are strong (winning ratio &gt; 60%): Flame Imp Sea Genie Mushroom Seer Wood Nymph Lord Arianthus Vampire There were to less battles for the following full leveled rewards cards: Naga Fire Wizard Pirate Archer Phantom SoldierI will include them in my next statistics post. This page is synchronized from the post: ‘Which steemmonsters cards have a high winning ratio for the different rule sets?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/which-steemmonsters-cards-have-a-high-winning-ratio-for-the-different-rule-sets/"},{"title":"update for beem - get_account_votes improved and signing speed improved","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 494 unit tests and a coverage of 70 %. The current version is 0.20.17.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by: 1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New FeaturesSigning can be speed up by installing secp256k1prpThe python package secp256k1prp is now supported to speed up signing all broadcasted transaction. Before, secp256k1 was supported which is not maintained and I’m not able to install it anymore. The following benchmark works only when secp256k1prp and cryptography is installed. The library which should be used for sign/verify can be specified with ecda.SECP256K1_MODULE.123456789101112131415from beemgraphenebase.account import PrivateKey, PublicKeyimport beemgraphenebase.ecdsasig as ecdafrom beemgraphenebase.py23 import py23_bytesimport timeecda.SECP256K1_MODULE = &quot;ecdsa&quot;wif = &quot;5J4KCbg1G3my9b9hCaQXnHSm6vrwW9xQTJS6ZciW2Kek7cCkCEk&quot;for lib in [&quot;cryptography&quot;, &quot;secp256k1&quot;, &quot;ecdsa&quot;]: ecda.SECP256K1_MODULE = lib start_time = time.time() for i in range(30): pub_key = py23_bytes(repr(PrivateKey(wif).pubkey), &quot;latin&quot;) signature = ecda.sign_message(&quot;Foobar&quot;, wif) pub_key_sig = ecda.verify_message(&quot;Foobar&quot;, signature) print(&quot;%s: sign and verify took %.2f seconds.&quot; % (lib, (time.time() - start_time)/30)) library duration [s] secp256k1prp 1.63 cryptography 1.80 ecsdsa 3.90 The benchmark shows that secp256k1prp is slightly faster than cryptography for sign/verify a transaction. Bug fixesget_account_votes works again with api.steemit.comget_account_votes stoped working for api.steemit.com (post). The get_account_votes uses now list_votes with &quot;order&quot;: &quot;by_voter_comment&quot; when get_account_votes returns a dict with a error field. 1234567from beem.account import Accountfrom beem import Steemstm = Steem(&quot;https://steemd.minnowsupportproject.org&quot;)account = Account(&quot;holger80&quot;, steem_instance=stm)votes = account.get_account_votes()print(len(votes))print(votes[-1]) returns127772{&apos;authorperm&apos;: &apos;steemcleaners/steemcleaners-report-for-december-29-2018&apos;, &apos;weight&apos;: 13434, &apos;rshares&apos;: &apos;56347337681&apos;, &apos;percent&apos;: 1000, &apos;time&apos;: &apos;2019-01-12T07:44:30&apos;} Due to the changes, the function works again for api.steemit.com:1234567from beem.account import Accountfrom beem import Steemstm = Steem(&quot;https://api.steemit.com&quot;)account = Account(&quot;holger80&quot;, steem_instance=stm)votes = account.get_account_votes()print(len(votes))print(votes[-1]) returns127772{&apos;id&apos;: 361753207, &apos;voter&apos;: &apos;holger80&apos;, &apos;author&apos;: &apos;steemcleaners&apos;, &apos;permlink&apos;: &apos;steemcleaners-report-for-december-29-2018&apos;, &apos;weight&apos;: 13434, &apos;rshares&apos;: &apos;56347337681&apos;, &apos;vote_percent&apos;: 1000, &apos;last_update&apos;: &apos;2019-01-12T07:44:30&apos;, &apos;num_changes&apos;: 0} The returned dict of a vote is slightly different. percent -&gt; vote_percent time -&gt; last_update Fix rounding error in transfer broadcastingThe Amount class in beembase is used to calculate the signature of a transfer transaction. Inside this function, a rounding error occured, which prevents sending of 1.013 STEEM.It was caused by:1(float(1.013) * 10 ** 3) which is11012.9999999999999 and was round with the int() function to11012 This had prevented broadcasting.A round function is now used:1round(float(1.013) * 10 ** 3) = 1013 which returns 1013.Function test: Unit tests fixedDue to the some changes and the not working testnet, some unit tests were broken. They are all fixed now. CommitsReplace secp256k1 by secp256k1prp which is better maintained and available on more platforms dc3812dGet_account_votes enhanced for api.steemit.com node commit d09aa4dFix unit tests commit 2969013Add coverage calculation and fix not working unit tests commit ecfd272Fix more unit tests commit db74680add sonar analysis commit c13d530Repair unit tests for beempy commit 590b5ab Fix wrong rounding of 1.013 STEEM to 1.012 STEEM which prevents transfer of certain STEEM amounts. commit e9f9687 Github accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - get_account_votes improved and signing speed improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-getaccountvotes-improved-and-signing-speed-improved/"},{"title":"Steemmonsters tournament listed automatically at beempy.com","text":"I scan every hour the links from https://challonge.com/games/steem-monsters/tournaments to obtain all steem monsters tournament identifiers. When the tournament is still pending, I add it to beemp.com/sm_tournaments. As mentioned, the site is updated every hour. In order to be listed, just use steem-monsters or steemmonsters as game type in the challonge tournament. The start time is in UTC and the time until the tournaments starts is shown in hours. I hope, that this will make it easier to find steemmonster tournaments. Just go to beemp.com/sm_tournaments and click on a link to check in. This page is synchronized from the post: ‘Steemmonsters tournament listed automatically at beempy.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-tournament-listed-automatically-at-beempy-com/"},{"title":"Steemmonsters tournament ranking is shown on beempy.com","text":"I added my ranking of all played challenge matches to my beempy site: https://beempy.com/static/sm_ranking.html. How does it work?I continuously storing all custom_json operation containing a sm_submit_team id in my database. Then, I checked the steemmonsters API: https://steemmonsters.com/battle/result?id=trx_id by entering the transaction id. When the match_type is equal to Challenge, I store the battle results. Declined matches are skipped. ELO rankingEvery hour, I will update the ranking on the beempy site. The player expected score depends on the rating difference between player A and B.R_A is the rating of player A and R_B is the rating of player B.When R_A is 200 and R_B is 0, the expected score for player A is11/(1+10**(-200/400)) = 0.7597 which means that player A has a probability of 76% to win and 24% to lose the match. When the match result is known, the ranking of both player can be updated by:where R_A is the old ranking, K is the predefined K-factor, E_A is the expected score of player A and S_A is the match result for player A (1 -&gt; A won, 0.5 -&gt; draw and 0 -&gt; A lost). The equation is similar for player B. The K-factor is 40 for players which have played less than 30 games. It is set to 20 for players with a rating below 2400 and is set to 10 for players with a rating above 2400. Some numbers10572 challenges were played from 737 different players.@toocurious is currently #1 with a ELO rating of 357.43 (141 wins and 202 played games). Congratulations, good work! This page is synchronized from the post: ‘Steemmonsters tournament ranking is shown on beempy.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-tournament-ranking-is-shown-on-beempy-com/"},{"title":"beempy.com shows curation performance as plot and works for paid out posts","text":"It is now much easier to view the estimated curation performance of a post with beempy.com. UsageJust replace steemit.com by beempy.com (works also by busy.org and others). Curation performance estimationThe estimated curation performance and the all votes are plotted for the first 30 minutes as this is the most important time period for curation: The curation performance is calculated by the beem function get_curation_rewards.A 100 % performance means that the equivalent in STU is received in Steem power as curation rewards. E.g. the median steem price is 0.5 $ and the vote was 1 STU. 100 % performance will be achieved when 2 SP will be received as curation rewards. 100% performance is equivalent to a selfvote casted to a post/comment after 15 min which is not voted by others (75% author reward + 25 % curation reward). Curation performance for paid out postsThe curation performance works now also for already paid out posts.The curation rewards for @steemchiller/steemworld-weekly-support-18 were paid out:and I received 0.133 SP. beempy estimates:0.134 SP, which is very close. beempy uses the estimated performance, the vote value and the current median steem price for it’s estimation. For paid out posts, I use the beem class ActiveVotes. This page is synchronized from the post: ‘beempy.com shows curation performance as plot and works for paid out posts’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/beempy-com-shows-curation-performance-as-plot-and-works-for-paid-out-posts/"},{"title":"I'm working on an automatic steem voter","text":"I think most steem user are using steemauto or steemvoter to automatically upvote new posts from their favorite authors. Due to the fact that high curation rewards can only be achieved within the first 15 minutes, I’m automatically upvoting posts within the optimal time frame using an auto voter. On steemauto.com, it is possible to set vote weight time delay in minutes daily limit for an author. This is too limited, I would like to set included and excluded tags. I also have the problem, that my voting power is sometimes at 100% over night. Work in progressI’m currently rewriting the python code for my @rewarding helper. I’m using now a database. I added the following option for a voting rule: include tags -&gt; list of tags that must be included for an automatic upvote (e.g. utopian-io, development) exclude tags -&gt; list of tags that will not be upvoted from the author set vote weight in SBD equivalent It is also possible to automatic upvote pending posts when my voting power is at 100% from specified authors.By doing this, my voting power is used. Simple Web interfaceI’m currently working on a simple web form application, that would allow others to use my auto voter. I will post new updates on the development. What do you think? Would you use such an automatic voter (It works similar to steemauto only when posting rights are granted to a specified account). Do you need more options beside include_tags and exclude_tags? Do you have also the problem, that the vote power is sometimes at 100%? This page is synchronized from the post: ‘I’’m working on an automatic steem voter’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/i-m-working-on-an-automatic-steem-voter/"},{"title":"Witness update: new project steemrewarding.com","text":"It’s time again for a witness update. My witness server is running strong (only 2 missing blocks for 7 months). steemrewarding - a new auto voter (not finished yet)I rented a new small server and registered https://steemrewarding.com for my newest project. I wrote about it in my last post. I’m developing an auto voter where it will be possible to set the following options: include tags exclude tags minimum word count include apps exclude apps exclude posts with declined payment limit votes for an author per day/week option to leave a comment after voting minimum vote power (vote is paused when below) vp based vote (defined author is voted when vote power is above a threshold) vote weight can be scaled by current vote power Stay tuned, this needs some time to develop. I created a new github repo for it: https://github.com/holgern/steemrewarding. beemI’m still working regulary on beem. The newest update can be found here: https://steemit.com/utopian-io/@holger80/update-for-beem-getaccountvotes-improved-and-signing-speed-improved steem basic incomeI developed the automation for the @steembasicincome project. The newest update about the developement can be found here: https://steemit.com/utopian-io/@holger80/update-for-steem-basic-income-automation-getblog-and-commenthistory-replaced-and-comment-upvoting-enabled steem monstersI added a tournament list which is automatically updated from all challonges.com users (If your tournament is missing, please let me now.) You can find the list here: https://beempy.com/sm_tournaments I added a ELO ranking of all tournament player here: https://beempy.com/static/sm_ranking.html beempy.comI added a visualization which shows curation performance and votes for the first 30 minutes. Enter a steem url in the form at https://beempy.com or replace steemit by beempy to view the curation of the post. steemhistoryI created a small tool for receiving account operation from a steem account. At the moment all written post can be extracted and stored as text file. I’m planing to enhance the tool by receiving also transfers, rewards and delegations, so that it will be useful for a tax declaration. The newest update can be found here:https://steemit.com/utopian-io/@holger80/steemhistory-a-command-line-tool-for-storing-all-posts-and-images-from-an-account Statement regarding #stopthepowerdownFinally, I want to write something about the newest events altough I’m not a consensus (top 20) witness. I will not run a hard fork on my witness server that removes funds from a steem account. Besides all the problems, Steemit Inc. had paid and pays for blockchain developers which continuously improving our chain. I prefer that Steemit Inc. keep their funds vested so that projects as utopian-io will further be supported by delegations. If you like what I’m doing, please consider @holger80 as one of your witnesses. You can use steemconnect.com for approving your vote or go to https://steemit.com/~witnesses and click on my name. This page is synchronized from the post: ‘Witness update: new project steemrewarding.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-update-new-project-steemrewarding-com/"},{"title":"steemrewarding.com - a new feature rich auto voter","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewardingsteemrewarding is a new feature rich auto voter for the steem blockchain. It can be found at: https://steemrewarding.com. The @rewarding account is used for voting. As soon as posting authority is given to @rewarding by steemconnect, vote rules can be created and posts or comments will be automatically upvoted when fitting. It is now possible to create two rules per author, one for posts and one for comments. Each rule has the fields: voter - account name of the voter, must has given posting authority to @rewarding. Cannot be set at the homepage, as only rules for accounts for which I have the keys can be added or edited. author - steem account for which the rule apply main_post - defines if the rule apply for posts or for comments vote_delay_min: - When vote_when_vp_reached is False, the post/comment is voted when the post is vote_delay_min minutes old and all other rule parameter are fitting. vote_weight: - 0% - 100% defines the vote weight. (Can be modified by setting vp_scaler) enabled: Rule is enabled, when this is set to True vote_sbd: Not active yet max_votes_per_day: limites the number of votes (votes are counted in a sliding window), only votes given by the auto voter are counted. max_votes_per_week: limites the number of votes (votes are counted in a sliding window), only votes given by the auto voter are counted. include_tags: Comma separated list of tags that must be included. E.g. python,c means the post/comment must either have a python tag or a c tag. Tags can be combinded with &amp;. E.g. python&amp;c,js. In this case, posts/comments are voted, when they have a js tag or a python and a c tag. exclude_tags: Same as include_tags, posts/comments with tags that were added here, will not be upvoted. The tags, must be comma separated and the &amp; sign can be used. E.g. python&amp;c, js. In this case, posts/comments that have a js or a python and c tag will not be upvoted. vote_when_vp_reached: When enabled, posts/comments will be upvoted when the min_vp is reached. min_vp: Minimum vote power applies for timed and vp based votes. When vote_when_vp_reached is False and vp is below min_vp, the comment/post will not be upvoted. vp_scaler: When higher than 0, the vote weight is reduced by this scaler depending on the votepower. E.g. vp_scaler is 0.5, then the vote weight is multiplied by 1 - ((100-vp) / 100 *vp_scaler). When vp is 100, the vote weight is not changed. When vp is 80, the new vote weight is multiplied by 0.9. leave_comment: not implemented yet minimum_word_count: When the post/comment word count is below, the post/comment is not upvoted. include_apps: comma-separated list of apps that will be upvoted, when set. exclude_apps: comma-separated list of apps that will not be upvoted, when set. exclude_declined_payout: When True, posts/comments with declined payout will not be upvoted. vp_reached_order: When vote_when_vp_reached is True, this defines which posts is upvoted first. The pending post with the lowest vp_reached_order is upvoted first. max_net_votes: When set, the post/comment is only upvted when the number of given votes is below. max_pending_payout: When set, the post/comment is only upvted when the pending payout is below. include_text: When set, the post/comment is only upvoted when its the given text is included. exclude_text: When set, the post/comment is not upvoted when its the given text is included. Database structurePosts/comments for which a rule exists, are stored in the posts database. New posts/comments are found by streaming all blocks. This is performed in the stream_blocks.py script. Then in the apply_vote_rules.py script, not processed posts/comments that were stored in the database are checked if one rule applies. When this is the case, teh authorperm with some addional information is stored in the pending votes database. Finally, the upvote_post_comments.py script checks of one of the pending votes can be upvoted. Sucessfully upvoted posts or comments will be added to the vote log database. HomepageEach steem user can add rules and use steemrewarding through the https://steemrewarding.com homepage.After logging in with steemconnect (I’m using the @beem.app steemconnect account for this)The homepage can be used:The steemconnect link is only be used to verify the steem account. Show rules: prints all stored rules. It is possible to edit and delete rules here. Add a new rule: Can be used to create a new voting rule. Show vote log: Shows sucessfully upvoted posts Show Pending votes: shows pending votes for the current logged in account. Logout can be used to remove the steemconnect token from the session. Technology StackThe postgres database is used to store rules, posts, pending votes, given votes and some more information. The scripts are programmed with python 3 using beem. Python3 + flask is used for the homepage. RoadmapThe not used rules: vote_sbd and leave_comment will be added next. When leave_comment is set, a comment from the voter with a defined text should be broadcasted. I plan also a user settings page, where global parameter can be set. Vote trails is also a missing feature which will be added. The @rewarding account was used before for upvoting posts, when a command was written in a comment. This functionality will be added to the github in the next update. It will then be possible to upvote a post/comment without having a rule for but, but writing a command in a comment below this post. How to contribute?The issue tracker at https://github.com/holgern/steemrewarding can be used for feature wishes, ideas, and bug reports. Pull request can also be created after forking the repository for improving the code or the homepage. I created also a new discord server for discussing everything about steemrewarding:https://discord.gg/qpsR8hf GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - a new feature rich auto voter’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-a-new-feature-rich-auto-voter/"},{"title":"steemrewarding.com - one time delayed vote and failed vote log added","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: https://discord.gg/qpsR8hf New featuresDelayed voting without creating a voting ruleThe steemrewarding.com site has a new tab https://steemrewarding.com/delayed_vote, in which a delayed vote can be triggered. This will not create a voting rule and will lead to a one-time vote at the given delay with the given vote weight. The authorperm can be copy and paste from the URL or, it is also possible to replace steemit by steemrewarding. By replacing steemit inwith steemrewarding the authorperm is filled correctly and the upvote can be triggered: A new entry in the pending vote database is now created and can be viewed at: https://steemrewarding.com/show_pending_votes. Failed votes are stored in a new databaseI created a new database failed_vote_log which is used to store failed votes.For example, when a post is older than 6.5 days and cannot be upvoted, a new entry with a error message is created. Failed votes can be viewed under https://steemrewarding.com/show_failed_vote_log. Database connection handling is improved in the flask siteThe database connection is now opened only once in the beginning and not before every database call:12345db = dataset.connect(databaseConnector)voteRulesTrx = VoteRulesTrx(db)voteLogTrx = VoteLogTrx(db)failedVoteLogTrx = FailedVoteLogTrx(db)pendingVotesTrx = PendingVotesTrx(db) On each database access, it is checked if the database connection still works by using a try/exception call:123456try: rules = voteRulesTrx.get_posts(name)except: db = dataset.connect(databaseConnector) voteRulesTrx = VoteRulesTrx(db) rules = voteRulesTrx.get_posts(name) In case of a timeout, the database connection is recreated. vote_sbd can be specifiedWhen vote_sbd is set and vote_weight is zero, the vote weight is calculated by: 1234if vote_weight &lt;= 0: vote_weight = voter_acc.get_vote_pct_for_SBD(pending_vote[&quot;vote_sbd&quot;]) / 100 if vote_weight &gt; 100: vote_weight = 100 Is is now possible to always vote with 0.05$ for example. The vote weight is adapted to the current steem price (Of course this works only of the vote at 100% is sufficient high). CommitsAdd steemrewarding icon to homepage commit 070663fimplement vote_sbd rule parameter, can be set to upvote in STU commit f577be3 fix js path improve database connection handling in flask homepage one time delayed vote and failed votel added commit a95683b failed vote log entries with specific error message added for each possible case in upvote_post_comments.py site for displaying failed votes added and menu entry added for it one time vote site added and menu entry edded for it vote_delay_min is applyed when vote_when_vp_reached is True GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - one time delayed vote and failed vote log added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-one-time-delayed-vote-and-failed-vote-log-added/"},{"title":"Steemmonsters tournament list at beempy.com is updated every 15 min now","text":"TournamentsI improved the steemmonsters tournaments list on beempy.com. Tournaments from fined challonge.com sites are scanned every 15 minutes now. The list can be found here: https://beempy.com/static/sm_tournaments.html The time when a tournament starts is now shown in minutes / hours /days. Tournaments with a pending or checkin_in state are shown. The tournaments are received by checking manual set challonge.com user sites. Let me know, If I forgot some challonge user. https://challonge.com is added before the following urls:123456789101112131415161718192021urls = [&quot;users/smspanish&quot;, &quot;games/steem-monsters/tournaments&quot;, &quot;users/bdcommunity&quot;, &quot;users/travelgirl_&quot;, &quot;users/carrieallen&quot;, &quot;users/imperfectone&quot;, &quot;users/jayplayco&quot;, &quot;users/clove71&quot;, &quot;users/theaustrianguy&quot;, &quot;users/crystalhuman&quot;, &quot;users/zaxan&quot;, &quot;users/toocurious&quot;, &quot;users/stealthtrader&quot;, &quot;users/clayboyn&quot;, &quot;users/khan_dayyanz&quot;, &quot;users/tendershepard&quot;, &quot;users/enginewitty&quot;, &quot;users/bashadow&quot;, &quot;games/steemmonsters/tournaments&quot;, &quot;https://buildteam.challonge.com/&quot;, ] When a listed tournament is finished, an automatic result is posted by the @smtournament account. ELO - RankingEvery 15 minutes, the challenge - ranking of all played challenge matches is recalculated. The ranking can be found here:https://beempy.com/static/sm_ranking.html Currently, 14969 challenges were played by 837 players. Challenge resultsAs often as possible, results from currently played challenges are shown at:https://beempy.com/static/sm_challenges.html This page is synchronized from the post: ‘Steemmonsters tournament list at beempy.com is updated every 15 min now’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonsters-tournament-list-at-beempy-com-is-updated-every-15-min-now/"},{"title":"steemrewarding.com - curation performance is shown and other improvements","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. New featuresCuration performance is shown for all recorded votes in the vote logThe curation performance is calculated by the beem function get_curation_rewards:12345678910c = Comment(authorperm, steem_instance=stm)curation_rewards_SBD = c.get_curation_rewards(pending_payout_SBD=True)performance = 0for vote in c[&quot;active_votes&quot;]: if vote[&quot;voter&quot;] != vote_log[&quot;voter&quot;]: continue vote_SBD = stm.rshares_to_sbd(int(vote[&quot;rshares&quot;])) curation_SBD = curation_rewards_SBD[&quot;active_votes&quot;][vote[&quot;voter&quot;]] if vote_SBD &gt; 0: performance = (float(curation_SBD) / vote_SBD * 100) In every round, 4 votes are analyzed. Thus, the performance calculation of all votes should be updated every few hours. A curation performance of 100% means that the upvote rshares will be returned as curation rewards. Leaving a comment for each voteWhen a upvote comment string is set in https://steemrewarding.com/settings and leave_comment is set to True in a vote rule, a comment is created below each voted post/comment. For example, I stored the following upvote comment at https://steemrewarding.com/settings:12Hi {{name}},{{voter}} was here. {{name}} is replaced by the author username with a trailing @. {{voter}} is replaced by the voter user name with a trailing @. Now the following comment will be created: This feature is intended for community bots. I hope it will be useful. Deleting of pending votes is possiblePending votes in https://steemrewarding.com/show_pending_votes can now be deleted. Be careful, there is no confirmation. Comment command parsingCommands in comments and posts similar as shown here (I cannot write the command here, otherwise this post will be upvoted):will be parsed and a pending vote will be created in the database. The syntax iskeyword upvote weight % vote delay minVote delay and upvote weight can also be switched. There are unit tests for the command parsing which tests the following cases: New iconI created a new icon for the project. I hope you like it: Commitsfix missing parameter in dict commit 2a09983 Account settings, delete of pending votes and vote comment added commit cb3c74d a new user settings page was added in which a upvote comment can be edited pending votes can be deleted vote comments with place holder for author and voter are workingNew icon layout commit f0aa756several improvements and bug fixes commit c95454a delete old vote log added fixed count of votes per day and weekadd command parsing commit 639e57f commands e.g. $rewarding 100% 15min, or now parsed and processed unit test for command parsing added add curation performance calculation to vote logs commit 8035d56 for each logged vote, the curation performance is shown and stored in the database in each round, the performance for one vote log entry is updated GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - curation performance is shown and other improvements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-curation-performance-is-shown-and-other-improvements/"},{"title":"update for beem - get_blog, get_followers and get_following works for api.steemit.com","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 495 unit tests and a coverage of 70 %. The current version is 0.20.18.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by: 1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New Featurespublic keys can be set in beempy newaccount for account creation1beempy newaccount --owner OWNER_PUB --active ACTIVE_PUB --memo MEMO_PUB --posting POSTING_PUB -a CREATOR_ACCOUNT NEW_ACCOUNT When the owner, active, memo and posting parameter are used and 4 public keys are set, a new account is created with these 4 keys. Public/private keys can be created by beempy keygen 123456789+-------------+-----------------------------------------------------------------------------------------------------------------+| Key | Value |+-------------+-----------------------------------------------------------------------------------------------------------------+| Brain Key | CENTO NOVENA CHIAUS ICEBERG DRAPE ORDERER YUSDRUM APHYLLY TORNUS YAWROOT OBEAH RIT CATELLA SILESIA HUBBA CULTCH || Private Key | 5JQZAHjvLf2Tncs6LU1P1nfwpvCaJWe8LKjbpworo5EUjdWL42G || Public Key | STM7Bq295nbY3sm3RWoSRmQv2pFJdiNcxZZiazKmJw2epY25946D1 |+-------------+-----------------------------------------------------------------------------------------------------------------+ When now STM7Bq295nbY3sm3RWoSRmQv2pFJdiNcxZZiazKmJw2epY25946D1 is set as one of the four public keys, the new account will have 5JQZAHjvLf2Tncs6LU1P1nfwpvCaJWe8LKjbpworo5EUjdWL42G as one of the four private keys. By this, it is possible to create 4 public/private keys and give only the public keys to someone else, who can then claim a new account using these 4 public keys. Nodelist - api.steemit.com is handled as limited nodeThe get_nodes function has now an exclude_limited parameter. When set to True, https://api.steemit.com is excluded. The reason for doing this, is that https://api.steemit.com is not a feature-complete full node anymore. Several API calls do not work anymore. 1234from beem.nodelist import NodeListnodelist = NodeList()nodelist.update_nodes()print(nodelist.get_nodes(exclude_limited=True)) returns nodes without api.steemit.com:1[&apos;https://steemd.minnowsupportproject.org&apos;, &apos;https://rpc.steemviz.com&apos;, &apos;https://anyx.io&apos;, &apos;https://rpc.usesteem.com&apos;, &apos;https://appbasetest.timcliff.com&apos;, &apos;https://steemd.privex.io&apos;, &apos;https://api.steem.house&apos;] The https://rpc.usesteem.com was added to the nodelist. Bug fixesIssue #146 was caused by moving several API calls to hivemind. By this, the return structure of some calls were changed. The issue wasfixed by improvingget_blog, get_followers and get_following so that they works with api.steemit.com.It was sufficient in this case to check of the returned object is a dict or a list. When the returned object is a dict, it is converted into a list by returning the content in the blog field:12if isinstance(ret, dict) and &quot;blog&quot; in ret: ret = ret[&quot;blog&quot;] After doing this, both lists are similar and can be processed and returned. Example call:123456from beem import Steemfrom beem.account import Accountstm = Steem(node=&quot;https://api.steemit.com&quot;)acc = Account(&quot;holger80&quot;, steem_instance=stm)print(&quot;%d followers, %d following&quot; % (len(acc.get_followers()), len(acc.get_following())))print(&quot;Last blog: %s&quot; % (acc.get_blog(limit=1)[0][&quot;title&quot;])) returns121269 followers, 342 followingLast blog: steemrewarding.com - curation performance is shown and other improvements Results for other nodes:123456from beem import Steemfrom beem.account import Accountstm = Steem(node=&quot;https://steemd.minnowsupportproject.org&quot;)acc = Account(&quot;holger80&quot;, steem_instance=stm)print(&quot;%d followers, %d following&quot; % (len(acc.get_followers()), len(acc.get_following())))print(&quot;Last blog: %s&quot; % (acc.get_blog(limit=1)[0][&quot;title&quot;])) returns121272 followers, 342 followingLast blog: steemrewarding.com - curation performance is shown and other improvements Unit tests are fixedIn all unit tests, the api.steemit.com node is excluded. This fixes all unit tests. Commitsbeempy newaccount - possible to provide owen, posting, active, and memo pub_key to create a new account commit 5029b08 Fix get_follower and get_following for api.steemit.com commit 0267cf1 Fix get_blog for api.steemit.com commit cf284bd remove wss://steemd-appbase.steemit.com Nodelist udpated commit a9972c4 normal and appbase option for Nodelist are deprecated. exclude_limited added for getting a nodelist without api.steemit.com. full node server added unit tests adapted Fix wrong full node api urls in unit tests commit 46f6a69 Fix unittests commit 500f9a8 Remove not working steemitdev testnet exclude api.steemit.com from some tests Github accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - get_blog, get_followers and get_following works for api.steemit.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-getblog-getfollowers-and-getfollowing-works-for-api-steemit-com/"},{"title":"Fixing the windows build of the scrypt library","text":"After seeing that scrypt no longer works for windows: I had to act, as I’m the maintainer of the scrypt package. The package can be found here https://bitbucket.org/mhallin/py-scrypt/. The original author gave me write access to the repository as he is no longer maintaining it. scrypt is an important package and is used in several python libraries as dependency (e.g. python-bitshares,, steem-python, beem ) The reason why it failed unter windows, is that a library in the OpenSSL package is renamed in the newest windows version of it. By fixing the names, I could compile it again. Compile scrypt in windowsA c compiler must be installed (e.g. Visual Studio 2017). Then,Win64 OpenSSL v1.1.1a from https://slproweb.com/products/Win32OpenSSL.html must be installed to c:\\\\OpenSSL-Win64A1python setup.py build should now work. Precompiled wheelsI uploaded also several pre-compiled wheels. A1pip install scrypt under windows should also work without having a compiler. AnacondaI pushed the changes to conda-forge and working packages are available for windows: This page is synchronized from the post: ‘Fixing the windows build of the scrypt library’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/fixing-the-windows-version-of-the-scrypt-library/"},{"title":"steemrewarding.com - trail voting added","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. Bug fixesThe following bugs were fixed: Checks and handling for the app field in post metadata improved bug with max_pending_payout fixed (integer instead of real in the database) max votes per week and day fixed (all votes were counted instead of the votes for the voter) New featuresTrail votes addedIt is now possible to follow other voters. A new trail vote rule can be created at https://steemrewarding.com/new_trail_rule: Stored trail vote rules are listed at: https://steemrewarding.com/show_trail_rules. A trail vote rule must contain a voter to follow. Only one rule can be stored per voter. Creating a new rule for a voter that already exists, will overwrite the old rule for this voter. Votes that fit to rule will be stored in the votes database (this is done in the stream_blocks.py script). Then, pending votes will be created based on stored trail rules, in the apply_trail_vote_rules.py. From here on, it is not distinguished between a normal pending vote or a trail pending vote. Both are stored in the pending vote database. The meaning of the parameter is the following: vote to follow - must not be empty and is the steem account name to follow enabled - when checked (True) the vote is active only_main_post - when checked (True), comments will be skipped vote_weight_treshold [%] - skips votes with lower weight (e.g. when set to 10%, a vote with a weight of 1% is skipped) vote_weight_scaler [%] - set the vote weight percentage in comparison to the vote to follow. when set to 100%, the casted vote will have the same vote weight. When set to 50%, the vote weigth is multiplied by 0.5. vote_weight_offset [%] - is added after applying vote_weight_scaler. When vote_weight_scaler is set to 0%, the vote_weight_offset can be used to set a constant vote weight. include_authors - when set, only the list of given authors will be voted. The authors must be separated by a comma or a space (e.g. a,b) exclude_authors - when set, these authors will be skipped. The authors must be separated by a comma or a space (e.g. a,b) include_tags - when set, only posts which have at least one tag from the list of given tags will be voted. The tags must be separated by a comma or a space (e.g. a,b) exclude_tags- when set, only posts which do not have at one tag from the list of given tags will be voted. The tags must be separated by a comma or a space (e.g. a,b) minimum_vote_delay_min [minutes] - vote is delayed when earlier maximum_vote_delay_min [minutes] - vote is skipped when older max_votes_per_day - limits the maximum number of votes given through steemrewarding max_votes_per_week - limits the maximum number of votes given through steemrewarding min_vp [%] - vote is skipped when vote power is below vp_scaler- When greater than 0, it can be used to adapt the vote weight to the vote power. When set to 1, the vote weight is equal to the vote power ( vote weight = 100 - ((100-vp) *vp_scaler)). exclude_declined_payout - When checked (True), a post/comment with declined payout is skipped max_net_votes - when greater than -1, a post/comment is skipped when more than max_net_votes voters already have voted. max_pending_payout - When greater than -1, a post/comment is skipped when the pending payout is greater than max_pending_payout RefactoringA login decorator function was added to the flask app:123456789101112131415161718192021222324def login(func): @wraps(func) def check_access_token(*args, **kwargs): access_token = request.args.get(&quot;access_token&quot;, None) if access_token is None and &apos;access_token&apos; not in session: login_url = steemconnect.get_login_url( &quot;https://steemrewarding.com/welcome&quot;, ) return render_template(&apos;please_login.html&apos;, login_url=login_url) elif access_token is None: access_token = session[&apos;access_token&apos;] else: session[&apos;access_token&apos;] = access_token try: steemconnect.set_access_token(access_token) name = steemconnect.me()[&quot;name&quot;] except: login_url = steemconnect.get_login_url( &quot;https://steemrewarding.com/welcome&quot;, ) return render_template(&apos;please_login.html&apos;, login_url=login_url) return func(*args, **kwargs) return check_access_token By adding this decorator, all functions could be reduced. @login decorater assure that a valid token is stored in the session variable.12345@app.route(&apos;/&apos;)@logindef main(): name = steemconnect.me()[&quot;name&quot;] return render_template(&apos;welcome.html&apos;, user=name, rewardingversion=rewardingversion) Commitsupload changed sql database commit 8d1db0erefacktor string splitting and show version on the websitecommit 1a6b5aeAdd decorator to flask app in order to reduce duplicated code lines commit 24c8a5bAdd trail vote interface to the website commit 6fd3d46trail voting handling added commit 3c3f624 new trail_vote_rules database added votes that belong to a trail vote rule are processed in apply_trail_vote_rules.pySeveral improvments commit 5d67397 New string_included and string_excluded utility function with unit tests for checking if apps or author are included or excluded maximum_vote_delay_min added to pending vote and rule try catch added to curation reward calculation Checks and handling for the app field in post metadata improved bug with max_pending_payout fixed (integer instead of real in the database) max votes per week and day fixed (all votes were counted instead of the votes for the voter) app field in comments changed to rewarding GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - trail voting added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-trail-voting-added/"},{"title":"Current state of steemrewarding.com","text":"steemrewarding.com is a open-source feature-rich automatic voting tool (github). It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. 24 user created 141 rules for upvoting posts and 25 rules for upvoting comments. Three rules for vote trails were created. The mean delay between the vote time and the specified vote time is 8.46 seconds for 1064 broadcasted votes within the last 7 days. One round consists of running 6 scripts and runs around 15 seconds: Use cases for steemrewardingSome possibilies for using steemrewarding: I want to upvote all actifit posts of author xyzJust create a new rule with xyz as author and add actifit to include_apps. I wan’t to upvote posts with utopian-io and development tag of author zCreate a new rule with z as author and add utopian-io&amp;development as include_tags I wan’t to upvote posts from author y when the pending payout is below 1 $Create a new rule with y as author and enter 1 into the max_pending_payout field. I wan’t to leave a comment for each vote on author xCheck the leave_comment box and enter a text in the settings page. I wan’t to limit the number of votes to 7 per weekEnter a number in the max_votes_per_week field. I do not care about the time delay, just upvote when my vote power is 100 %Check vote_when_vp_reached and enter 100 into min_vp. I wan’t to upvote author xy when he is mentioning meEnter your username into include_text I wan’t to follow all votes from xz on posts with actifit tagCreate a new trail vote rule and add actifit to include_tags. What nextBesides bug fixing and monitoring that everything runs smooth, I’m planing to add the following: Allow more than one rule for a Author (At the moment only one post and one comment rule is possible) Automatically create vote rules for delegators to rewarding (At the moment 300 SP are delegated to rewarding, mainly for RC) so that they are upvoted on a daily basis. Add command parsing for upvoting already paid out posts Any feedback on what is missing? This page is synchronized from the post: ‘Current state of steemrewarding.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/current-state-of-steemrewarding-com/"},{"title":"systemctl script froze - how to do to prevent this?","text":"My script to record all played steemmonster games from https://beempy.com froze: I restarted the script (I’m using systemctl for this) and it is now catching up. How to prevent a frozen scriptThere was no bug, it just froze. This happend already before and I will now try to fix this.I’m thinking of restarting the systemctl service every day. By this, a frozen script can only lead to a maximum stop of 24 hours. Possible ideas to implement this: cron job with a systemctl restart service_name systemctl timer with a systemctl restart service_name Using RuntimeMaxSec Cron jobA new rule can be entered by:1sudo crontab -e The new rule could look like:10 0 * * * /bin/systemctl restart yourService systemctl timerWe need two files, one restart_service.timer123456789[Unit]Description=Do something daily[Timer]OnCalendar=dailyPersistent=true[Install]WantedBy=timers.target and a restart_service.service:123456[Unit]Description=Restart service[Service]Type=oneshotExecStart=/usr/bin/systemctl try-restart my_program.service They have to be copied to /etc/systemd/system and can be started by:1systemctl enable --now restart_service.timer RuntimeMaxSecWhen systemctl is newer than version 229, this is a good solution. The version can be found out by:1systemctl --version The manual says about RuntimeMaxSec: Configures a maximum time for the service to run. If this is used and the service has been active for longer than the specified time it is terminated and put into a failure state. Note that this setting does not have any effect on Type=oneshot services, as they terminate immediately after activation completed. Pass “infinity” (the default) to configure no runtime limit. This seems to be exactly what I need. Restart and RuntimeMaxSec has to be added to the service file in the [Service] part:123[Service]Restart=alwaysRuntimeMaxSec=10800 This works for my scripts as they do not run forever. I’m using RestartSec to restart the script when it is finished. ConclusionRuntimeMaxSec seems to me a good measure to robustify systemctl scripts. I will try this on my systemctl services. This page is synchronized from the post: ‘systemctl script froze - how to do to prevent this?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/systemctl-script-froze-how-to-do-to-prevent-this/"},{"title":"Fixing scrypt for windows a second time - tester needed","text":"I tried to fix again the windows precompiled builds for windows for the scrypt library in version 0.8.9 (now 0.8.10).There were some problems with importing scrypt which results in an error:1The specified module could not be found This time, I check if the libeay32 or the libcrypto library is available in the openssl directory and adapt the library name. When libcrypto is there, I will use the static version of the library and link also user32 and gdi32. 12345678910111213141516171819202122elif sys.platform.startswith(&apos;win32&apos;): define_macros = [(&apos;inline&apos;, &apos;__inline&apos;)] extra_sources = [&apos;scrypt-windows-stubs/gettimeofday.c&apos;] if struct.calcsize(&apos;P&apos;) == 8: if os.path.isdir(&apos;c:\\OpenSSL-v111-Win64&apos;) and sys.version_info[0] &gt; 3 and sys.version_info[1] &gt; 4: openssl_dir = &apos;c:\\OpenSSL-v111-Win64&apos; else: openssl_dir = &apos;c:\\OpenSSL-Win64&apos; library_dirs = [openssl_dir + &apos;\\lib&apos;] includes = [openssl_dir + &apos;\\include&apos;, &apos;scrypt-windows-stubs/include&apos;] else: if os.path.isdir(&apos;c:\\OpenSSL-v111-Win32&apos;): openssl_dir = &apos;c:\\OpenSSL-v111-Win32&apos; else: openssl_dir = &apos;c:\\OpenSSL-Win32&apos; library_dirs = [openssl_dir + &apos;\\lib&apos;] includes = [openssl_dir + &apos;\\include&apos;, &apos;scrypt-windows-stubs/include&apos;] if os.path.isfile(library_dirs[0] + &apos;\\libcrypto.lib&apos;): libraries = [&apos;libcrypto_static&apos;, &apos;advapi32&apos;, &apos;user32&apos;, &apos;gdi32&apos;] else: libraries = [&apos;libeay32&apos;, &apos;advapi32&apos;] This allows it to compile scrypt with openssl 1.0.2 and 1.1.1. I created precomplied wheels for different python versions for 32 and 64 bit. For the 64bit version of python 2.7 and 3.4, I will use openssl 1.0.2 in the appveyer build server. I downloaded all wheels from the appveyer build server: and uploaded them to Pypi. I need now some help in testingI’m tested the python 3.7 build for 32 bit and 64 bit by: 1pip install scrypt -U It should say that 0.8.9 is installed: I check if itworks by importing scrypt:First I go into the python interpreter1python then I import scrypt1import scrypt It has worked, when there is no error message. When you are using windows, could you test if scrypt 0.8.9 is working for you? That would be great. EditI found a small typo, in order to correct it, I had to increase the version number to 0.8.10. This page is synchronized from the post: ‘Fixing scrypt for windows a second time - tester needed’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/fixing-scrypt-for-windows-a-second-time-tester-needed/"},{"title":"How to setup a minimal python for using beempy on windows","text":"I worked on the scrypt wheels for windows (post). Due to my work, it is now easily possible to use beempy on windows. The setup can also be used to start small python scripts. It will not mess up with windows, as no PATH is set. Everything can easily removed. Install python 3.7First we will download python from https://www.python.org/downloads/ Then we Customize the Installation: We only need pip: Then we change the path, to find the python.exe easier: Then we start the powershell and update pip and install virtualenv:12C:\\Python37-32\\python.exe -m pip install pip --upgradeC:\\Python37-32\\python.exe -m pip install virtualenv Creating a working environmentAt first we create a new directory in the explorer at c:\\beemWe will create a working environment:12cd beem C:\\Python37-32\\python.exe -m virtualenv env and activate it by1.\\env\\Scripts\\activate Install beemWe are now able to install beem:1pip install beem Additionally, we install cryptography to speed up signing:1pip install cryptography We are now able to use beempy: 1beempy --version Create a shortcutDo a rightclick on activate.ps1 in C:\\beem\\env\\Scripts and select Create shortcut.Rightclick on the shortcut and then click on properties. Change the target to:1C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoExit &quot;C:\\beem\\env\\Scripts\\activate.ps1&quot; You can now move it to your desktop and have a fast access to beempy. UninstallJust delete C:\\beem\\env. Python itself can be uninstalled and C:\\Python37-32 deleted. This should clean everything. Using the 64 bit version of pythonEverything is also working with the 64 bit version. Just replace C:\\Python37-32 with C:\\Python37. This page is synchronized from the post: ‘How to setup a minimal python for using beempy on windows’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-setup-a-minimal-python-for-using-beempy-on-windows/"},{"title":"How much did you spent/receive to/from drugwars/steemmonsters","text":"image source I wrote two small python scripts for finding out how much did I spent/receive on the drugwars and steemonsters game. Both scripts using account history and filter for all transfer transactions. For drugwars, I filter for transaction from/to “drugwars” and “drugwars-dealer”. For steemmonsters, I filter for memo text including sm_market_sale or sm_market_purchase. You can ask in the comments, when you want to know your balance without running the scripts. I will then posts the results. Drugwars123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountfrom beem.amount import Amountfrom beem.nodelist import NodeListimport sixif __name__ == &quot;__main__&quot;: nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) if six.PY2: account = raw_input(&quot;Account name:&quot;) else: account = input(&quot;Account name:&quot;) included_accounts = [&quot;drugwars&quot;, &quot;drugwars-dealer&quot;] steem_spent = 0 steem_received = 0 sbd_spent = 0 sbd_received = 0 account = Account(account, steem_instance=stm) for h in account.history_reverse(only_ops=[&quot;transfer&quot;]): if h[&quot;from&quot;] in included_accounts: amount = Amount(h[&quot;amount&quot;], steem_instance=stm) if amount.symbol == &quot;STEEM&quot;: steem_received += float(amount) elif amount.symbol == &quot;SBD&quot;: sbd_received += float(amount) elif h[&quot;to&quot;] in included_accounts: amount = Amount(h[&quot;amount&quot;], steem_instance=stm) if amount.symbol == &quot;STEEM&quot;: steem_spent += float(amount) elif amount.symbol == &quot;SBD&quot;: sbd_spent += float(amount) elif h[&quot;to&quot;] in included_accounts and h[&quot;from&quot;] == account[&quot;name&quot;] and h[&quot;memo&quot;][:2] == &quot;P-&quot;: amount = Amount(h[&quot;amount&quot;], steem_instance=stm) if amount.symbol == &quot;STEEM&quot;: steem_spent += float(amount) elif amount.symbol == &quot;SBD&quot;: sbd_spent += float(amount) print(&quot;STEEM/SBD sent/received from/to %s\\n&quot; % (&quot;, &quot;.join(included_accounts))) print(&quot;%.3f STEEM received - %.3f STEEM spent&quot; % (steem_received, steem_spent)) print(&quot;Sum: %.3f STEEM&quot; % (steem_received-steem_spent)) print(&quot;\\n&quot;) print(&quot;%.3f SBD received - %.3f SBD spent&quot; % (sbd_received, sbd_spent)) print(&quot;Sum: %.3f SBD&quot; % (sbd_received-sbd_spent)) Store this script as transfer_history_drugwars.py and run it:1python transfer_history_drugwars.py The script asks for your steem username. Steemmonsters12345678910111213141516171819202122232425262728293031323334353637383940414243#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountfrom beem.amount import Amountfrom beem.nodelist import NodeListimport sixif __name__ == &quot;__main__&quot;: nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) if six.PY2: account = raw_input(&quot;Account name:&quot;) else: account = input(&quot;Account name:&quot;) memo_text_received = &quot;sm_market_sale&quot; memo_text_spent = &quot;sm_market_purchase&quot; steem_spent = 0 steem_received = 0 sbd_spent = 0 sbd_received = 0 account = Account(account, steem_instance=stm) for h in account.history_reverse(only_ops=[&quot;transfer&quot;]): if memo_text_received in h[&quot;memo&quot;] and h[&quot;to&quot;] == account[&quot;name&quot;]: amount = Amount(h[&quot;amount&quot;], steem_instance=stm) if amount.symbol == &quot;STEEM&quot;: steem_received += float(amount) elif amount.symbol == &quot;SBD&quot;: sbd_received += float(amount) elif memo_text_spent in h[&quot;memo&quot;] and h[&quot;from&quot;] == account[&quot;name&quot;]: amount = Amount(h[&quot;amount&quot;], steem_instance=stm) if amount.symbol == &quot;STEEM&quot;: steem_spent += float(amount) elif amount.symbol == &quot;SBD&quot;: sbd_spent += float(amount) print(&quot;## Steemmonsters&quot;) print(&quot;%.3f STEEM received - %.3f STEEM spent&quot; % (steem_received, steem_spent)) print(&quot;Sum: %.3f STEEM&quot; % (steem_received-steem_spent)) print(&quot;\\n&quot;) print(&quot;%.3f SBD received - %.3f SBD spent&quot; % (sbd_received, sbd_spent)) print(&quot;Sum: %.3f SBD&quot; % (sbd_received-sbd_spent)) Store this script as transfer_history_steemmonsters.py and run it:1python transfer_history_steemmonsters.py The script asks for your steem username. This page is synchronized from the post: ‘How much did you spent/receive to/from drugwars/steemmonsters’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-much-did-you-spent-receive-to-from-drugwars-steemmonsters/"},{"title":"Generating a word cloud from all your written words","text":"A word cloud is a visual representation of text data in which the font size depends on the its frequency in the text sample. Wordcloud of an accountI’m using the python library word_cloud for generating a word cloud image from all posts and comments an account has written.Here is the result for my account: All links are removed from the included text. I use also the predefined stopword list to remove words like is, and and so on. In order to improve speed, only the first version of a post or comment is taken into account and all editing of posts/comments are skipped. 123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/pythonfrom beem import Steemfrom beem.account import Accountfrom beem.comment import Commentfrom beem.nodelist import NodeListimport siximport matplotlib.pyplot as pltfrom wordcloud import WordCloud, STOPWORDSimport reif __name__ == &quot;__main__&quot;: nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) if six.PY2: authorperm = raw_input(&quot;account / authorperm:&quot;) else: authorperm = input(&quot;account / authorperm:&quot;) text = &quot;&quot; try: comment = Comment(authorperm, steem_instance=stm) text = comment.body except: account = Account(authorperm, steem_instance=stm) permlink_list = [] for h in account.history(only_ops=[&quot;comment&quot;]): if h[&quot;permlink&quot;] in permlink_list: continue if h[&quot;author&quot;] != account[&quot;name&quot;]: continue permlink_list.append(h[&quot;permlink&quot;]) text += h[&quot;body&quot;] text = re.sub(r&apos;https?:\\/\\/.*[\\r\\n]*&apos;, &apos;&apos;, text.replace(&quot; &quot;, &quot;\\n&quot;), flags=re.MULTILINE).replace(&quot;\\n&quot;, &quot; &quot;) stopwords = set(STOPWORDS) wordcloud = WordCloud(max_font_size=120, width=1280, height=800, min_font_size=6, stopwords=stopwords).generate(text) plt.figure() plt.imshow(wordcloud, interpolation=&quot;bilinear&quot;) plt.axis(&quot;off&quot;) # plt.show() plt.savefig(&quot;wordcloud.png&quot;, dpi=300) Store the script as plot_wordcloud.py and run it by1python plot_wordcloud.py The script asks for the steem account name and stores the image wordcloud.png in the same directory as the python script.Word cloud needs to be installed:1pip install wordcloud The Wordcloud class has the following options:1class WordCloud(self, font_path=None, width=400, height=200, margin=2, ranks_only=None, prefer_horizontal=.9, mask=None, scale=1, color_func=None, max_words=200, min_font_size=4, stopwords=None, random_state=None, background_color=&apos;black&apos;, max_font_size=None, font_step=1, mode=&quot;RGB&quot;, relative_scaling=&apos;auto&apos;, regexp=None, collocations=True, colormap=None, normalize_plurals=True, contour_width=0, contour_color=&apos;black&apos;, repeat=False) which can be changed for modifying the wordcloud image.You can find more information in the API-reference: https://amueller.github.io/word_cloud/generated/wordcloud.WordCloud.html Wordcloud of a postThe script can also be used to create a wordcloud for a post. Here is the result for https://steemit.com/steem/@steemitblog/engineering-update-cost-reductions-rocksdb-mira-condenser-split: Version with image12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#!/usr/bin/pythonfrom beem import Steemfrom beem.comment import Commentfrom beem.account import Accountfrom beem.nodelist import NodeListimport numpy as npimport siximport matplotlib.pyplot as pltfrom wordcloud import WordCloud, STOPWORDS, ImageColorGeneratorfrom PIL import Imageimport osfrom os import pathimport reif __name__ == &quot;__main__&quot;: nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) if six.PY2: authorperm = raw_input(&quot;account / authorperm:&quot;) else: authorperm = input(&quot;account / authorperm:&quot;) text = &quot;&quot; try: comment = Comment(authorperm, steem_instance=stm) text = comment.body except: account = Account(authorperm, steem_instance=stm) permlink_list = [] for h in account.history(only_ops=[&quot;comment&quot;]): if h[&quot;permlink&quot;] in permlink_list: continue if h[&quot;author&quot;] != account[&quot;name&quot;]: continue permlink_list.append(h[&quot;permlink&quot;]) text += h[&quot;body&quot;] text = re.sub(r&apos;https?:\\/\\/.*[\\r\\n]*&apos;, &apos;&apos;, text.replace(&quot; &quot;, &quot;\\n&quot;), flags=re.MULTILINE).replace(&quot;\\n&quot;, &quot; &quot;) stopwords = set(STOPWORDS) d = path.dirname(__file__) if &quot;__file__&quot; in locals() else os.getcwd() coloring = np.array(Image.open(path.join(d, &quot;Steem_Symbol_Gradient.png&quot;))) wc = WordCloud(background_color=&quot;white&quot;, mask=coloring, max_font_size=80, max_words=1000, stopwords=stopwords, random_state=42) wc.generate(text) image_colors = ImageColorGenerator(coloring) plt.imshow(wc.recolor(color_func=image_colors), interpolation=&quot;bilinear&quot;) plt.axis(&quot;off&quot;) plt.savefig(&quot;wordcloud_steem.png&quot;, dpi=500) In order to run this script, Steem_Symbol_Gradient.png from Steem-Logos-and-Usage-Guide.zip needs to copy in the same directory. I will generate your personal wordcloud for your account or a post. Just asks for it in a comment and specify if you want the big steemit logo shaped version or the small version :). This page is synchronized from the post: ‘Generating a word cloud from all your written words’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/generating-a-word-cloud-from-all-your-written-words/"},{"title":"How to setup Visual Studio Code for debugging beem on windows?","text":"Installing Visual Studio CodeAt first we need to download Visual Studio Code Setup PythonPlease follow all steps from my last post:https://steemit.com/beempy/@holger80/how-to-setup-a-minimal-python-for-using-beempy-on-windows There is now a python environment in C:\\beem\\env or any other path (just replace this path by the correct one). The beem package is installed. Setup Visual Studio CodeWe need to install a extensions for using python:Open the extensions tab (or press Ctrl + Shift + X)Enter ms-python.python in the search field and install the python extension In the next step we setup our python interpreter.Open the settings tap (or press Strg+,) and enter pythonPath in the search field. Enter the pyth to the python.exe in the Python Path field. In my case, I installed an environment in C:\\beem\\env, so my path is C:\\beem\\env\\Scripts\\python.exe. Replace the path to the python.exe with the one on your PC. It is also possible to edit the settings.json (by pressing Edit in settings.json in the Settings tab:)1&quot;python.pythonPath&quot;: &quot;C:\\\\beem\\\\env\\\\Scripts\\\\python.exe&quot; Replace the path to the python.exe with the one on your PC. There may be a prompt, if we want to install the pylint package: In my case, installation failed with: and I installed it manually by opening the powershell and entering the following commands:123cd C:\\beem.\\env\\Scripts\\activatepip install pylint Debugging a beem python scriptCreate a new file (Ctrl+N) and copy the following into it:1234567from beem import Steemfrom beem.account import Accountif __name__ == &apos;__main__&apos;: stm = Steem() acc = Account(&quot;holger80&quot;, steem_instance=stm) print(&quot;My vote power: &quot; + acc.vp) Store the file as py_test.py. We will now run the script without debugger (Ctrl+F5 or using the menu: Debug/Start without Debugger). The script crashes with a error message:12 print(&quot;My vote power: &quot; + acc.vp)TypeError: can only concatenate str (not &quot;float&quot;) to str Now we will investigate. We enter a breakpoint at line 7 by pressing left to the line number. We start the script with Debugging (F5) and click on the DEBUG CONSOLE: Now we can investigate the error in the debug console: At first we check acc.vp by writing it into the terminal: So this works, now we enter the string inside the print command: 1&quot;My vote power: &quot; + acc.vp The problem is that the + does not work with a Float and a String. We try to fix it in the debug console by entering: 1&quot;My vote power: %.2f&quot; % acc.vp This works and we can fix the script. We replace the line with1print(&quot;My vote power: %.2f&quot; % acc.vp) save the script and press restart:It stops at the breakpoint and we can press F5 for continue.Now everything runs through! This page is synchronized from the post: ‘How to setup Visual Studio Code for debugging beem on windows?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-setup-visual-studio-code-for-debugging-beem-on-windows/"},{"title":"Jeff Bezos chooses medium for publishing blackmailing emails","text":"I found it very interesting that the richest man on earth, who owns a newspaper, has choosen medium for posting details an attampt to blackmail him with nude photos. You can found his post here:https://medium.com/@jeffreypbezos/no-thank-you-mr-pecker-146e3922310f medium.com is some kind of centralized and non blockchain version of steem in my eyes. The medium.com post itself has a no reach on google. When I search for the import key words: https://www.google.com/search?q=jeff+bezos+Pecker I find only news about this post but no direct link to the medium post on 16 pages of search results. This means he chooses medium.com as it has a suffient amount of readers that would discover his post fast enough and would pass the information in the post to the newspapers. This stats explains why he chose medium and not steem for example :) Could his post hit trending on steemit.com without paying for bidbots? Or would it be possible that nobody noticed it, as he is a new user without followers. What has to change that someone as Jeff Bezos could just write such an impactful post and it will hit trending? Would he found a fast way to register his username without searching and comparing all the different possiblities to create a new account? There is also the problem that it is not possible to show the profile username that can differ from the steem account name on the post. His medium user name is jeffreypbezos, but Jeff Bezos is shown on top of the post. This is maybe something that sould be implemented in steem as well. This page is synchronized from the post: ‘Jeff Bezos chooses medium for publishing blackmailing emails’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/jeff-bezos-chooses-medium-for-publishing-blackmailing-emails/"},{"title":"bookkeeping - a new service for keeping track with steem/sbd transfers for gaming","text":"image source I created a new service provided by @bookkeeping which returns the STEEM/SBD transfer balance for the following games: drugwars steemmonsters magicdice steemslotgames steembet How does it workJust write a comment with:1!bookkeeping list_of_games For example:1!bookkeeping drugwars or1!bookkeeping drugwars steemmonsters or1!bookkeeping magicdice drugwars The following keywords are allowed:1drugwars steemmonsters magicdice steemslotgames steembet The comment will be picked up, the transfer history will be fetched and all transfers to and from this account will be summed up. In the end, the balance is written into the answer to the comment. Please be patient, the reply comment needs some time (depending on the number of your account history). Daily reportI’m thinking about some daily report for user who opt in. What do you thing about this? If you would like to be included in a daily report, please write a comment with all the sites you want to be included. If there some accounts, that would like to have this, I will code a daily sent/receive summary. Please let me know, if I forget a game or a account that sends and receives transfer for which you want to keep track. This page is synchronized from the post: ‘bookkeeping - a new service for keeping track with steem/sbd transfers for gaming’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/bookkeeping-a-new-service-for-keeping-track-with-steem-sbd-transfers-for-gaming/"},{"title":"bookkeeping - improved  and more detailed reports","text":"image source Thanks for using my new service! Since launch, 161 reply comments were broadcasted and I had to increase my delegation to 300 SP: Improved layoutI improved the comment layout and seperated spent and received STEEM/SBD better: I did also add more categories for drugwars, magicdice and steemmonsters: drugwarsdaily, heist and referal are shown for received STEEM. As the transfer layout changed, there are also incoming transfers without category. magicdice Receiving transfers from referral, delegation and dividends are shown separately. Steemmonsters Vested Steem and Affiliate transfer are shown smartsteem and minnowbooster were addedI added two new commands. It is now possible to view the receiving and sent transfer from/to smartsteem and minnowbooster. The transfer memo are not categorized, only summed up. For smartsteem, all transfers from/to: smartsteem smartmarketare analyzed.Usage for smartmarket1!bookkeeping smartmarket For minnowbooster, only the transfer from/to minnowbooster are considered. Usage for minnowbooster1!bookkeeping minnowbooster What is missingPlease let me know, which services I should add next. Please let me also know, if I could improve some output. What nextI will try to add USD (paypal / creditcard) payments for steemmonsters. Keeping track of transfer from/to exchanges seems also a good idea to me. I think a daily report which shows the updated results is usefull and will help to reduce the high RC consumption of @bookkeeping. I will work on a automatic daily post, which shows stats from opt in user. Opting in and out will be done by a special comment cmmand. This page is synchronized from the post: ‘bookkeeping - improved and more detailed reports’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/bookkeeping-improved-and-more-detailed-reports/"},{"title":"bookkeeping - ROI for drugwars shown and transfer balance for any steem account possible","text":"image source Since launch, 874 comments were broadcasted and I had to increase my delegation to 1100 SP. ROI for drugwars is shown The first transfer to drugwars is used for calculating the time duration. The ROI is then calculated by dividing the received STEEM per day through the amount of spent STEEM. The mean received STEEM per day are also used to calculate when break even is reached (when total is still negative). The transfer balance of any steem account can be analyzedbookkeeping takes now every steem account for analyzing its transfers. A @ sign must be written before the steem account name.1!bookkeeping @steem-account Sent and received transfers are then summed up and will be shown. This page is synchronized from the post: ‘bookkeeping - ROI for drugwars shown and transfer balance for any steem account possible’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/bookkeeping-roi-for-drugwars-shown-and-transfer-balance-for-any-steem-account-possile/"},{"title":"Using steemrewarding.com for gaining back vote strength after delegaing to a project due to RC ","text":"steemrewarding.com is a open-source feature-rich automatic voting tool (github). It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. Current stats60 user created 393 rules for upvoting posts and 36 rules for upvoting comments. Ten rules for vote trails were created. The mean delay between the vote time and the specified vote time is 9.22 seconds for 2676 broadcasted votes within the last 7 days. 504 vp based votes were broadcasted within the last 7 days. Creating a vote trail for following your main accountI had to delegate 700 SP to my newest project @bookkeeping due to RC. Now, I’m using steemrewarding to get back my old vote strength. At first I have to login with @bookkeeping at steemwarding.com:and then give rewarding posting authority by clicking on the link: After logging in into steemconnect:I can create a new trailvote rule: I want that bookkeeping will follow my vote on main posts voted by me. Furthermore, I want that the vote weight is adapted so that the vote power of bookkeeping keeps around 95%. I will use vp_scaler and vote_weight_scaler in order to achieve this. As the initial vote power of bookkeeping and holger80 is not equal and bookeeping should not upvote comments, its vote power will be not optimal. By adapting the vote weight to its vote power, I will move the vote power of bookkeeping in a more optimal range. I selected 95% as this is the mean voting power of my main account. vp_scaler, vote_weight_scaler and vote_weight_offsetThe vote weight formula of these three parameters is:1vote_weight = (vote_weight_scaler / 100 * follow_vote_weight + vote_weight_offset / 100) * ( 100 - ((100-vp) *vp_scaler))) where follow_vote_weight is the vote weight selected by the followed voter and vp is the votepower of the account itself. vp_scaler scales the vote weight based on the vote power. When vote_weight_scaler = 100%, vote_weight_offset=0% and vp_scaler=0, the vote weight is matched. If I set vote_weight_scaler = 105.4%, vote_weight_offset=0% and vp_scaler=1 the following happens: bookkeeping VP holger80 vote weight resulting bookkeeping vote weight 95% 75% 1.054 * 0.75 * ( 100 - ((100-95) *1)) = 75.0 % 100% 75% 1.054 * 0.75 * ( 100 - ((100-100) *1)) = 79.0 % 90% 75% 1.054 * 0.75 * ( 100 - ((100-90) *1)) = 71.1 % The vote weight of bookkeeping is increased when its vote power is above 95% and reduced when it is below 95%. This should help keeping the votepower of bookkeeping around 95%. Setting the vote trail@bookkeeping should follow @holger80 and upvote only main posts. Sounds quite complicated, how to improve?After writing this small tutorial, I realize that steemrewarding is not really user friendly. Do you have any idea in how to make steemrewarding more user friendly? Or do you think that everything is fine? This page is synchronized from the post: ‘Using steemrewarding.com for gaining back vote strength after delegaing to a project due to RC ‘ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/using-steemrewarding-com-for-gaining-back-vote-strength-after-delegaing-to-a-project-due-to-rc/"},{"title":"Witness update: new server with 512 GB SSD and compile steem 0.20.9 unter ubuntu 18.04","text":"The disc space of my witness server is shrinking by 0.1 GB per day. Only 5.8 GB are left, which means that in two month I will run out of disc space. I decided to rent a new server with a bigger hard drive now. The new server has a 2 x 512 GB NVMe SSD which should be sufficient for a while. There is no installation image available for Ubuntu 16.04, so I have to go with 18.04 for my new server. I know that there is a good working docker image, but I like it to run steem with systemd. Installation of steem on Ubuntu 18.04I found the manual from @perduta: How to compile STEEM under Ubuntu 18.04 LTS, but It did not work for me. I found out that the github master is building unter 18.04. But I decided to try to compile the v0.20.9 version and not the master which is not official released. Installation of necessary packages123456789101112131415161718192021222324252627282930313233343536apt-get updateapt-get install -y \\ autoconf \\ automake \\ autotools-dev \\ bsdmainutils \\ build-essential \\ cmake \\ doxygen \\ gdb \\ git \\ libboost-all-dev \\ libyajl-dev \\ libreadline-dev \\ libssl-dev \\ libtool \\ liblz4-tool \\ ncurses-dev \\ pkg-config \\ python3 \\ python3-dev \\ python3-jinja2 \\ python3-pip \\ nginx \\ fcgiwrap \\ awscli \\ jq \\ wget \\ virtualenv \\ gdb \\ libgflags-dev \\ libsnappy-dev \\ zlib1g-dev \\ libbz2-dev \\ liblz4-dev \\ libzstd-dev Build and install openssl 1.0.2qsteem 0.20.9 does not compile with openssl 1.1.0, so I have to compile the newest 1.0.2.12345wget https://www.openssl.org/source/openssl-1.0.2q.tar.gztar -xzvf openssl-1.0.2q.tar.gzcd openssl-1.0.2qsudo ./configsudo make install Checkout steem1234567apt install gitcd ~/mkdir gitcd gitgit clone https://github.com/steemit/steemcd steemgit checkout v0.20.9 Patch steemThere are some patches necessary to be able to compile steem 0.20.9 unter Ubuntu 18.04.The following changes were made: Fix misleading-indentation build error Fix error: In the GNU C Library, “major” is defined Fix Can’t locate doxygen/perlmod/DoxyDocs.pm Fix throw will always call terminate123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122diff --git a/libraries/fc/src/compress/miniz.c b/libraries/fc/src/compress/miniz.cindex 7123d622..f911fc5b 100644--- a/libraries/fc/src/compress/miniz.c+++ b/libraries/fc/src/compress/miniz.c@@ -1497,7 +1497,10 @@ tinfl_status tinfl_decompress(tinfl_decompressor *r, const mz_uint8 *pIn_buf_nex { mz_uint8 *p = r-&gt;m_tables[0].m_code_size; mz_uint i; r-&gt;m_table_sizes[0] = 288; r-&gt;m_table_sizes[1] = 32; TINFL_MEMSET(r-&gt;m_tables[1].m_code_size, 5, 32);- for ( i = 0; i &lt;= 143; ++i) *p++ = 8; for ( ; i &lt;= 255; ++i) *p++ = 9; for ( ; i &lt;= 279; ++i) *p++ = 7; for ( ; i &lt;= 287; ++i) *p++ = 8;+ for ( i = 0; i &lt;= 143; ++i) *p++ = 8;^M+ for ( ; i &lt;= 255; ++i) *p++ = 9;^M+ for ( ; i &lt;= 279; ++i) *p++ = 7;^M+ for ( ; i &lt;= 287; ++i) *p++ = 8;^M } else {@@ -2281,7 +2284,10 @@ static MZ_FORCEINLINE void tdefl_find_match(tdefl_compressor *d, mz_uint lookahe if (TDEFL_READ_UNALIGNED_WORD(&amp;d-&gt;m_dict[probe_pos + match_len - 1]) == c01) break; TDEFL_PROBE; TDEFL_PROBE; TDEFL_PROBE; }- if (!dist) break; q = (const mz_uint16*)(d-&gt;m_dict + probe_pos); if (TDEFL_READ_UNALIGNED_WORD(q) != s01) continue; p = s; probe_len = 32;+ if (!dist) break;^M+ q = (const mz_uint16*)(d-&gt;m_dict + probe_pos);^M+ if (TDEFL_READ_UNALIGNED_WORD(q) != s01) continue;^M+ p = s; probe_len = 32;^M do { } while ( (TDEFL_READ_UNALIGNED_WORD(++p) == TDEFL_READ_UNALIGNED_WORD(++q)) &amp;&amp; (TDEFL_READ_UNALIGNED_WORD(++p) == TDEFL_READ_UNALIGNED_WORD(++q)) &amp;&amp; (TDEFL_READ_UNALIGNED_WORD(++p) == TDEFL_READ_UNALIGNED_WORD(++q)) &amp;&amp; (TDEFL_READ_UNALIGNED_WORD(++p) == TDEFL_READ_UNALIGNED_WORD(++q)) &amp;&amp; (--probe_len &gt; 0) ); if (!probe_len)@@ -2848,7 +2854,7 @@ void *tdefl_write_image_to_png_file_in_memory(const void *pImage, int w, int h, #include &lt;stdio.h&gt; #include &lt;sys/stat.h&gt; - #if defined(_MSC_VER)+ #if defined(_MSC_VER)^M static FILE *mz_fopen(const char *pFilename, const char *pMode) { FILE* pFile = NULL;diff --git a/libraries/protocol/include/steem/protocol/version.hpp b/libraries/protocol/include/steem/protocol/version.hppindex 98be2b6f..4eef2727 100644--- a/libraries/protocol/include/steem/protocol/version.hpp+++ b/libraries/protocol/include/steem/protocol/version.hpp@@ -1,5 +1,5 @@ #pragma once-+#include &lt;sys/sysmacros.h&gt; #include &lt;fc/string.hpp&gt; #include &lt;fc/time.hpp&gt; diff --git a/libraries/wallet/CMakeLists.txt b/libraries/wallet/CMakeLists.txtindex b669e3e0..9fcbb597 100644--- a/libraries/wallet/CMakeLists.txt+++ b/libraries/wallet/CMakeLists.txt@@ -11,7 +11,7 @@ if( PERL_FOUND AND DOXYGEN_FOUND AND NOT &quot;${CMAKE_GENERATOR}&quot; STREQUAL &quot;Ninja&quot; ) DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile ${CMAKE_CURRENT_SOURCE_DIR}/include/steem/wallet/wallet.hpp ) add_custom_command( OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp- COMMAND PERLLIB=${CMAKE_CURRENT_SOURCE_DIR} ${PERL_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate_api_documentation.pl ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.new+ COMMAND PERLLIB=${CMAKE_CURRENT_BINARY_DIR} ${PERL_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate_api_documentation.pl ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.new COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.new ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.newdiff --git a/tests/db_fixture/database_fixture.cpp b/tests/db_fixture/database_fixture.cppindex 6de3ff96..88b9119a 100644--- a/tests/db_fixture/database_fixture.cpp+++ b/tests/db_fixture/database_fixture.cpp@@ -916,7 +916,7 @@ json_rpc_database_fixture::json_rpc_database_fixture() return; } -json_rpc_database_fixture::~json_rpc_database_fixture()+json_rpc_database_fixture::~json_rpc_database_fixture() noexcept(false) { try { // If we&apos;re unwinding due to an exception, don&apos;t do any more checks. // This way, boost test&apos;s last checkpoint tells us approximately where the error was.diff --git a/tests/db_fixture/database_fixture.hpp b/tests/db_fixture/database_fixture.hppindex bcf5ac62..9b9a9b5e 100644--- a/tests/db_fixture/database_fixture.hpp+++ b/tests/db_fixture/database_fixture.hpp@@ -202,7 +202,7 @@ struct database_fixture { bool skip_key_index_test = false; database_fixture() {}- COMMAND PERLLIB=${CMAKE_CURRENT_SOURCE_DIR} ${PERL_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate_api_documentation.pl ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.new+ COMMAND PERLLIB=${CMAKE_CURRENT_BINARY_DIR} ${PERL_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate_api_documentation.pl ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.new COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.new ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_BINARY_DIR}/api_documentation.cpp.newdiff --git a/tests/db_fixture/database_fixture.cpp b/tests/db_fixture/database_fixture.cppindex 6de3ff96..88b9119a 100644--- a/tests/db_fixture/database_fixture.cpp+++ b/tests/db_fixture/database_fixture.cpp@@ -916,7 +916,7 @@ json_rpc_database_fixture::json_rpc_database_fixture() return; } -json_rpc_database_fixture::~json_rpc_database_fixture()+json_rpc_database_fixture::~json_rpc_database_fixture() noexcept(false) { try { // If we&apos;re unwinding due to an exception, don&apos;t do any more checks. // This way, boost test&apos;s last checkpoint tells us approximately where the error was.diff --git a/tests/db_fixture/database_fixture.hpp b/tests/db_fixture/database_fixture.hppindex bcf5ac62..9b9a9b5e 100644--- a/tests/db_fixture/database_fixture.hpp+++ b/tests/db_fixture/database_fixture.hpp@@ -202,7 +202,7 @@ struct database_fixture { bool skip_key_index_test = false; database_fixture() {}- virtual ~database_fixture() { appbase::reset(); }+ virtual ~database_fixture() noexcept(false) { appbase::reset(); } static fc::ecc::private_key generate_private_key( string seed = &quot;init_key&quot; ); #ifdef STEEM_ENABLE_SMT@@ -342,7 +342,7 @@ struct json_rpc_database_fixture : public database_fixture public: json_rpc_database_fixture();- virtual ~json_rpc_database_fixture();+ virtual ~json_rpc_database_fixture() noexcept(false); void make_array_request( std::string&amp; request, int64_t code = 0, bool is_warning = false, bool is_fail = true ); fc::variant make_request( std::string&amp; request, int64_t code = 0, bool is_warning = false, bool is_fail = true ); Store the changes to ubuntu1804.patch and apply the patch by12cd ~/git/steemgit apply ../../ubuntu1804.patch Build steem1234567cd ~/git/steemmkdir buildcd buildcmake -DLOW_MEMORY_NODE=ON -DCMAKE_BUILD_TYPE=Release -DSKIP_BY_TX_ID=ON -DCLEAR_VOTES=ON -DOPENSSL_ROOT_DIR=/usr/local/ssl ..make -j$(nproc) steemdmake -j$(nproc) cli_walletmake install Short testI will shortly test if the build steemd is executable:1steemd --version Next stepsI have compiled steem and will now proceed with the remaining steps. I will write a detailed step by step report and publish it in my next witness post. This page is synchronized from the post: ‘Witness update: new server with 512 GB SSD and compile steem 0.20.9 unter ubuntu 18.04’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-update-new-server-with-512-gb-ssd-and-compile-steem-0-20-9-unter-ubuntu-18-04/"},{"title":"steemengine - a python library for steem-engine.com","text":"Repositoryhttps://github.com/holgern/steemengine Steem EngineThe python library uses a rpc client to communicate with the steem-engine.com json RPC server. All descripted methods at https://github.com/harpagon210/steemsmartcontracts/wiki/JSON-RPC-server have been implemented. Furthermore a website api call for receiving account transfer history is supported. Technology StackThe library uses a rpc client based on the requests library for receiving data from the steem-engine.com JSON RPC server. Any function call from the RPC class is translated into a RPC JSON call12rpc.find({&quot;contract&quot;: contract_name, &quot;table&quot;: table_name, &quot;query&quot;: query, &quot;limit&quot;: limit, &quot;offset&quot;: offset, &quot;indexes&quot;: indexes}, endpoint=&quot;contracts&quot;) will be converted to:12345678910111213{ &quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;method&quot;: &quot;find&quot;, &quot;params&quot;: { &quot;contract&quot;: &quot;contract_name&quot;, &quot;table&quot;: &quot;table_name&quot;, &quot;query&quot;: query, &quot;limit&quot;: limit, &quot;offset&quot;: offset, &quot;indexes&quot;:indexes} }, &quot;id&quot;: 1} with the RPC JSON server url:https://api.steem-engine.com/rpc/contracts&quot; All possible calls have been collected in the Api class. InstallationThe python package can be installed by: pip install steemengine UsageGet the latest block of the sidechain123from steemengine.api import Apiapi = Api()print(api.getLatestBlockInfo()) Get the block with the specified block number of the sidechain123from steemengine.api import Apiapi = Api()print(api.getBlockInfo(1910)) Retrieve the specified transaction info of the sidechain123from steemengine.api import Apiapi = Api()print(api.getTransactionInfo(&quot;e6c7f351b3743d1ed3d66eb9c6f2c102020aaa5d&quot;)) Get the contract specified from the database123from steemengine.api import Apiapi = Api()print(api.getContract(&quot;tokens&quot;)) Get an array of objects that match the query from the table of the specified contract123from steemengine.api import Apiapi = Api()print(api.find(&quot;tokens&quot;, &quot;tokens&quot;)) Get the object that matches the query from the table of the specified contract123from steemengine.api import Apiapi = Api()print(api.findOne(&quot;tokens&quot;, &quot;tokens&quot;)) Get the transaction history for an account and a token123from steemengine.api import Apiapi = Api()print(api.get_history(&quot;holger80&quot;, &quot;NINJA&quot;)) RoadmapThe next step will be using the beem library for sending token.I’m planing also a command line tool for viewing token balances and sending token. How to contribute?Please use the issue tracker for bug reports and feature wishes. Pull requests are also welcome. GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemengine - a python library for steem-engine.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemengine-a-python-library-for-steem-engine-com/"},{"title":"How to build a steem-engine token upvote bot","text":"I wrote yesterday about my new steemengine python library, which can be use to receive token balances and transfer history about every steem-engine token. I’m now using this library to build a small upvote bot example. In my example, @beembot is the upvoting account. When DRAGON token have been send to it, the account will upvote. There is a whitelist, so only whitelisted accounts will be upvoted. 1 DRAGON is one 100% upvote. UsageFirst I sent 1 DRAGON from @holger80 to @beembot with the url as memo: The transfer succeeded: and my post was upvoted: How does it workI chose the get_history function for receiving the token transfer history. It would be also possible to use getBlockInfo and go through all blocks of the sidechain. get_history seems to me as a simpler solution, so I used that. get_history returns the last limit transfers. I implemented a check with last_steem_block to skip old blocks. It would be a good idea to store this value for the case that the script is stoped and started again. Setup12pip install beempip install steemengine and setup a beem wallet1beempy createwallet add the posting key of the upvote account in the prompt:1beempy addkey Script123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778# This Python file uses the following encoding: utf-8# (c) holger80from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionfrom __future__ import unicode_literalsfrom beem import Steemfrom beem.comment import Commentfrom beem.nodelist import NodeListfrom steemengine.api import Apiimport timeif __name__ == &quot;__main__&quot;: nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) api = Api() # edit here upvote_account = &quot;beembot&quot; upvote_token = &quot;DRAGON&quot; token_weight_factor = 100 # multiply token amount to get weight min_token_amount = 0.01 max_post_age_days = 3 whitelist = [&quot;holger80&quot;] blacklist_tags = [] only_main_posts = True stm.wallet.unlock(&quot;wallet-passwd&quot;) last_steem_block = 1950 # It is a good idea to store this block, otherwise all transfers will be checked again while True: history = api.get_history(upvote_account, upvote_token, limit=1000, offset=0, histtype=&apos;user&apos;) for h in history: if int(h[&quot;block&quot;]) &lt;= last_steem_block: continue if h[&quot;to&quot;] != upvote_account: continue last_steem_block = int(h[&quot;block&quot;]) if len(whitelist) &gt; 0 and h[&quot;from&quot;] not in whitelist: print(&quot;%s is not in the whitelist, skipping&quot; % h[&quot;from&quot;]) continue if float(h[&quot;quantity&quot;]) &lt; min_token_amount: print(&quot;Below min token amount skipping...&quot;) continue try: c = Comment(h[&quot;memo&quot;], steem_instance=stm) except: print(&quot;%s is not a valid url, skipping&quot; % h[&quot;memo&quot;]) continue if c.is_comment() and only_main_posts: print(&quot;%s from %s is a comment, skipping&quot; % (c[&quot;permlink&quot;], c[&quot;author&quot;])) continue if (c.time_elapsed().total_seconds() / 60 / 60 / 24) &gt; max_post_age_days: print(&quot;Post is to old, skipping&quot;) continue tags_ok = True if len(blacklist_tags) &gt; 0 and &quot;tags&quot; in c: for t in blacklist_tags: if t in c[&quot;tags&quot;]: tags_ok = False if not tags_ok: print(&quot;skipping, as one tag is blacklisted&quot;) continue already_voted = False for v in c[&quot;active_votes&quot;]: if v[&quot;voter&quot;] == upvote_account: already_voted = True if already_voted: print(&quot;skipping, as already upvoted&quot;) continue upvote_weight = float(h[&quot;quantity&quot;]) * token_weight_factor if upvote_weight &gt; 100: upvote_weight = 100 print(&quot;upvote %s from %s with %.2f %%&quot; % (c[&quot;permlink&quot;], c[&quot;author&quot;], upvote_weight)) c.upvote(weight=upvote_weight, voter=upvote_account) time.sleep(60) Store the script as token_upvote_bot.py and run it by1python token_upvote_bot.py SummaryThis script is only an example for a possible use case for my python library. What do you think? Do you have a idea for which I should create a script? Let me hear. This page is synchronized from the post: ‘How to build a steem-engine token upvote bot’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-build-a-steem-engine-token-upvote-bot/"},{"title":"update for beem - steem-engine token transfer possible and customjson added as beempy command","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 495 unit tests and a coverage of 70 %. The current version is 0.20.19.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New FeaturesImprove derive_permlink and allow replies of comments with permlink lenght &gt; 235It is now possible to reply to posts or comments which have a permlink longer than 235 characters.The reply permlink is built in the derive_permlink function. The parent_permlink is now limited to 235 chars and the reply permlink is build corrently:123permlink += &quot;re-&quot;permlink += parent_permlink[:(max_permlink_length - 20)]permlink += &quot;-&quot; + formatTime(timenow.time()) + &quot;z&quot; Before this changes, the reply function could not broadcast a reply when the permlink of the parent was longer than 235 chars. Allow broadcasting custom_json with active keysWhen the required_auths instead of the required_posting_auths field is set, the custom_json should be signed by the active key. This is now implemented:1234if len(required_auths) &gt; 0: return self.finalizeOp(op, account, &quot;active&quot;, **kwargs)else: return self.finalizeOp(op, account, &quot;posting&quot;, **kwargs) The json field of a custom_json op is now compressed (spaces are removed)All spaces in the json field of a custom_json op are now removed. This decrease the consumption of RC. And fix parsing errors for specific dapps (e.g. steem-token). Sending of steem-engine token is workingThe implementation of signing a custom_json with active key and broadcasting the json field compressed, allows it now to send a steem-engine token using beem:12345from beem import Steemstm = Steem(keys=[&quot;5xx&quot;])account = &quot;holger80&quot;data = {&quot;contractName&quot;: &quot;tokens&quot;, &quot;contractAction&quot;:&quot;transfer&quot;, &quot;contractPayload&quot;:{&quot;symbol&quot;:&quot;DRAGON&quot;, &quot;to&quot;:&quot;beembot&quot;, &quot;quantity&quot;:0.01, &quot;memo&quot;:&quot;Test&quot;}}stm.custom_json(&quot;ssc-mainnet1&quot;, data, required_auths=[account]) beempy customjsonA new command was added to beempy, which allows it to broadcast custom_json ops.1234567891011Usage: beempy customjson [OPTIONS] JSONID [JSON_DATA]... Broadcasts a custom json First parameter is the cusom json id, the second field is a json file or a json key value combination e.g. beempy customjson -a holger80 dw-heist username holger80 amount 100Options: -a, --account TEXT The account which broadcasts the custom_json -t, --active When set, the active key is used for broadcasting --help Show this message and exit. The customjson commands allows it to send easily all different kind of custom_jsons.The first parameter JSONID is the custom json id, for a follow, it is for example follow.The second parameter JSON_DATA can be either a json file or a combination of json key/value fields. For not so complicated json_data fields, the keys and values can be given as parameters:For example for a custom_json with an id = dw-heist and a simple json field = { &quot;username&quot;: &quot;holger80&quot;, &quot;amount&quot;: &quot;100&quot;}, it can directly entered by removing all {, }, ,, &quot;, and ::1beempy customjson -a holger80 dw-heist username holger80 amount 100 Giving the json field as key value sequence is only possible when all fields are strings.This command is equivalent to the following command which reads the json data from a file:1beempy customjson -a holger80 dw-heist dw_heist.json with dw_heist.json:1234{ &quot;username&quot;: &quot;holger80&quot;, &quot;amount&quot;: &quot;100&quot;} Results: Sending a steem-engine token:For more complicated cases, where the values inside the custom_json consisting of lists or dicts, it should given to the beempy command through a json file:1beempy customjson -a holger80 --active ssc-mainnet1 send_token.json with the json file: send_token.json:12345678910{ &quot;contractName&quot;: &quot;tokens&quot;, &quot;contractAction&quot;:&quot;transfer&quot;, &quot;contractPayload&quot;:{ &quot;symbol&quot;:&quot;DRAGON&quot;, &quot;to&quot;:&quot;beembot&quot;, &quot;quantity&quot;:0.01, &quot;memo&quot;:&quot;Test&quot; }} ResultsIt worked and the balance has changed: CommitsAdd new beempy command customjson commit ec75681 with beempy customjson sending of custom_json operation is easily possible Changelog adapted to 0.20.19Broadcast custom_json with active authority commit 360f3e7 custom_json with required_auths are now broadcasted with active key json field in custom_json is broadcasted compact (spaces are removed) Improve derive_permlink and allow replies of comments with permlink lenght &gt; 235 commit ba294ec derive_permlink was improved so that replys to posts/comments with a permlink length of more than 235 characters is possible unit tests added Github accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - steem-engine token transfer possible and customjson added as beempy command’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-steem-engine-token-transfer-possible-and-customjson-added-as-beempy-command/"},{"title":"Steemmonster tournament player ranking at beempy.com","text":"Tournament Elo ratingI disabled the Challenge ELO rating and replaced it with the tournament ELO rating.You can find it here: https://beempy.com/static/sm_ranking.html I update the ranking every 15 minutes, based on all played tournament games. You can find more information about the ELO score calculation here. Tournament game resultsI display the last tournament matches here:https://beempy.com/static/sm_tournament_matches.html Upcoming tournament listI replaced the upcoming challonge game list by the upcoming tournaments from steemmonsters.com:https://beempy.com/static/sm_tournaments.htmlI will add more useful information for each upcoming tournament soon (leaque and cards). @smtournament challonge helper disabledI disabled the @smtournament challonge helper, as the automated tournaments are working and nobody uses challonge anymore. Thanks for all the support. This page is synchronized from the post: ‘Steemmonster tournament player ranking at beempy.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemmonster-tournament-player-ranking-at-beempy-com/"},{"title":"Witness update: new server with ubuntu 18.04 is running steem 0.20.9","text":"I had to rent a new server with a bigger hard drive, as the free disc space is shrinking by 0.2G a day and I had only 4G left. Yesterday, I switched my witness key and the new server is running and signing blocks. My old server had a 256G ssd which would be full in around 20 days, so I advice all witnesses who have a server with a 256G drive to check for free space. There was no Ubuntu 16.04. available für the new server, so I had to patch the steem source code. You can find more information about it in this post. I created a gist for my patch: https://gist.github.com/holgern/e38881ef79ce93006cd5d763869afb29 Step by step introduction for setting up a witness server (Ubuntu 18.04)Install a firewall (ufw) and failtoban123apt-get updateapt-get install -y ufw apt-get install -y fail2ban Create a new user and disable login through rootI will use newuser as user name in the following. You can chose a different name and replace all newuser with your username.1adduser newuser Now we can edit the ssh config file and disable root login:1nano /etc/ssh/sshd_config by changing the following parameters:12Port 2020PermitRootLogin no I changed also the ssh port, so that a standard port scan does not work. Restart the ssh service:1systemctl restart sshd and create a filewall rule:12ufw allow 2020ufw enable Now, we need to add the user to the sudoers file:1nano /etc/sudoers by adding1newuser ALL=(ALL) ALL Relogin as newuserWe can now logout and login as new user.We need now sudo in front of each command. Install ntpWe need a accurate clock:1234sudo timedatectl set-ntp nosudo apt-get install ntpsudo ntpq -npsudo systemctl status ntp zramI’m using zram on my witness server, it worked well for me. 123sudo apt-get install -y zram-configsudo sed -i &apos;s|/ 2 /|/ 1 /|g&apos; /usr/bin/init-zram-swappingsudo systemctl restart zram-config swapI will also add a swap, so that the system has a fallback solution, when the RAM is not sufficient.123sudo dd if=/dev/zero of=/swapfile bs=1M count=4096mkswap /swapfileecho &quot;/swapfile swap swap defaults 0 0&quot; | sudo tee /etc/fstab Mount the ramdiskI set the ram disk to 2*64 G + 4 -1 = 131 GThe size for the fstab is then (131 + 0.5 ) * 1024 =134656 12sudo mount -o remount,size=134656 /dev/shmecho &quot;tmpfs /dev/shm tmpfs defaults,noexec,nosuid,size=134656 0 0&quot; | sudo tee /etc/fstab Download the blockchain1wget https://gtg.steem.house/get/blockchain/block_log Create a .steemd directory inside the newuser homeI created the .steemd by running steemd as root1steemd pressing strg+c and moving it to the new place:12sudo mv /root/.steemd /home/newuser/sudo chown -R newuser:newuser /home/newuser/.steemd Now we can move the blockchain file into it:1mv ~/block_log ~/.steemd/blockchain/ Changing the .config fileYou can find my config.ini here:https://gist.github.com/holgern/26cebeab2882d4546c5e0d7a58c90b40 witness and private-key must be edited:1nano .steemd/config.ini with12345# name of witness controlled by this node (e.g. initwitness )witness = &quot;holger80&quot;# WIF PRIVATE KEY to be used by one or more witnesses or minersprivate-key = 5xxxx Create a systemd serviceI’m using a systemctl service for running steemd:1sudo nano /etc/systemd/system/steemd.service with the following content:1234567891011[Unit]Description=steemd_serverAfter=network.target zram-config.service[Service]WorkingDirectory=/home/newuser/.steemdExecStart=/usr/bin/steemd --data-dir=/home/newuser/.steemdRestart=on-failure[Install]WantedBy=multi-user.target For the first run, a replay is necessary. Thus, I change the service file and replace:1ExecStart=/usr/bin/steemd --data-dir=/home/newuser/.steemd by1ExecStart=/usr/bin/steemd --data-dir=/home/newuser/.steemd --replay Starting the service and replaying123sudo systemctl daemon-reloadsudo systemctl enable steemd.servicesudo systemctl start steemd.service Checking the log1sudo journalctl -f -u steemd which will result in the following output when everything is running and the blockchain is replayed: PricefeedI do not want my active key stored on my server. Thus, most of the price feed toolboxes can not be used. I will use beempy pricefeed, which needs only the witness key, which is already stored in the config.ini file. At first, I create a new file ~/update_feed123#!/bin/bash/home/newuser/.local/bin/beempy updatenodes/home/newuser/.local/bin/beempy witnessfeed holger80 5xxx where 5xx is my witness wif.In order to be able to run this, I need beem to be installed:1sudo apt-get install python3-pip python3-dev build-essential libssl-dev Then I install beem locally:12pip3 install beempip3 install cryptography After logout and login again, `beempy should be available:1which beempy should result in1/home/newuser/.local/bin/beempy Creating a simple crontab job for running updating the feed every 6 hours1crontab -e and enter10 */6 * * * (sh /home/newuser/update_feed) &gt;&gt; /tmp/crontab.log 2&gt;&amp;1 price feed was sucessfully updated This page is synchronized from the post: ‘Witness update: new server with ubuntu 18.04 is running steem 0.20.9’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/witness-update-new-server-with-ubuntu-18-04-is-running-steem-0-20-9/"},{"title":"Update for steemengine - token transfer and market operation added","text":"Repositoryhttps://github.com/holgern/steemengine steemenginesteemengine is a python library for working with steem-engine.com tokens. I released version 0.2.0 which can be installed by1pip install steemengine New features It is now possible to view the wallet of a user and receive information about all registered token. Sending of token is possible and creating Buy/Sell order on the market can be done. It is also possible to deposit STEEM and withdraw STEEMP. As a token transfer is a custom_json operation, there is the possibility that broadcasting a transfer will not change the token amount. There are some rules in place that may prevent that a transfer run trough( e.g. quantity must be a string and not a float). I tried to prevent such cases by:1{&quot;symbol&quot;:symbol.upper(),&quot;to&quot;:to,&quot;quantity&quot;:str(amount),&quot;memo&quot;:memo} assuring that the symbol contains only upper chars and that the quantity is a string. I updated my beem library, in order to allow token transfer (spaces in the custom json field were removed and broadcasting a custom json with an active key is now possible). Thus, all described functions work only with a beem version &gt;=0.20.19. The beem version can be checked with1beempy --version Wallet passwordInstead of unlocking the wallet12stm = Steem()stm.unlock(&quot;wallet_pass&quot;) the active key can be set directly:1stm = Steem(keys=[&quot;5xx&quot;]) View Token balanceIt is possible to get the token balance for an account using the Wallet class.1234from steemengine.wallet import Walletwallet = Wallet(&quot;holger80&quot;)print(wallet)print(wallet.get_token(&quot;JAR&quot;)) Token transferToken transfer is possible using the new Wallet class. The account name and the token balance is checked before sending.The exception TokenNotInWallet is raised, when the token is available in the wallet. When the transfer amount is higher than the balance, a InsufficientTokenAmount exception is raised.123456from beem import Steemfrom steemengine.wallet import Walletstm = Steem()stm.unlock(&quot;wallet_pass&quot;)wallet = Wallet(&quot;holger80&quot;, steem_instance=stm)wallet.transfer(&quot;jarunik&quot;,1, &quot;JAR&quot;, memo=&quot;https://steemit.com/utopian-io/@holger80/update-for-steemengine-token-transfer-and-market-operation-added&quot;) Market depositThe STEEM balance is checked before sending the deposit. When not sufficient STEEM are in the account, a InsufficientTokenAmount is raised.123456from beem import Steemfrom steemengine.market import Marketstm = Steem()stm.unlock(&quot;wallet_pass&quot;)m=Market(steem_instance=stm)m.deposit(&quot;holger80&quot;, 0.01) Market withdrawThe STEEMP token balance is checked before. When the amount is not sufficient, a InsufficientTokenAmount is raised.123456from beem import Steemfrom steemengine.market import Marketstm = Steem()stm.unlock(&quot;wallet_pass&quot;)m=Market(steem_instance=stm)m.withdraw(&quot;holger80&quot;, 0.009) Buy orderThe STEEMP token balance is checked, when it is below amount_token_to_buy * price, a InsufficientTokenAmount is raised.123456from beem import Steemfrom steemengine.market import Marketstm = Steem()stm.unlock(&quot;wallet_pass&quot;)m=Market(steem_instance=stm)m.buy(&quot;holger80&quot;, 1, &quot;JAR&quot;, 0.09) Cancel a buy orderA buy order can be cancelled, when the buy order ID is known. It can be found out by using the get_buy_book function.1234567from beem import Steemfrom steemengine.market import Marketstm = Steem()stm.unlock(&quot;wallet_pass&quot;)m=Market(steem_instance=stm)open_buy_orders = m.get_buy_book(&quot;JAR&quot;, &quot;holger80&quot;)m.cancel(&quot;holger80&quot;, &quot;buy&quot;, open_buy_orders[0][&quot;$loki&quot;]) Sell orderThe token balance is checked, when it is to low, a InsufficientTokenAmount is raised.123456from beem import Steemfrom steemengine.market import Marketstm = Steem()stm.unlock(&quot;wallet_pass&quot;)m=Market(steem_instance=stm)m.sell(&quot;holger80&quot;, 1, &quot;JAR&quot;, 10) Cancel a sell orderA sell order can be cancelled, when the sell order ID is known. It can be found out by using the get_sell_book function.1234567from beem import Steemfrom steemengine.market import Marketstm = Steem()stm.unlock(&quot;wallet_pass&quot;)m=Market(steem_instance=stm)open_sell_orders = m.get_sell_book(&quot;JAR&quot;, &quot;holger80&quot;)m.cancel(&quot;holger80&quot;, &quot;sell&quot;, open_sell_orders [0][&quot;$loki&quot;]) View all tokens1234from steemengine.tokens import Tokenstokens = Tokens()print(&quot;%d token were registered&quot; % len(tokens))print(tokens.get_token(&quot;ENG&quot;)) CommitsChangelog and more examples added to readme commit 5e39644 Doku to some functions addedAdd Market, Tokens and Wallet classes commit dc38ce9 Market() can be used for deposit,withdrawel, buy and sell. Wallet() can be used for checking the wallet balance and sending tokens Tokens() can be used for checking all available tokensRename function names to meet PEP8 conventions commit 4c067b0 Add two exapmles (token sending and token upvote bot) Increase version number find returns an array find_one returns an object GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for steemengine - token transfer and market operation added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-steemengine-token-transfer-and-market-operation-added/"},{"title":"Which cards dominate the steemmonsters tournaments?","text":"Which cards are winning in the tournament?The following table shows how often the different cards have been used in battles across all leagues (n) and the overal winning ratio (win ratio) in percentage. Then, the winning ratio for the different leagues is shown. 7896 tournament battles were included, alpha_only and gold_only tournaments were skipped.The Diamont league has to few battles to be meaningful and are excluded. The cards are sorted by the overall winning ratio. name n win ratio [%] win ratio Novice [%] win ratio Bronze [%] win ratio Silver [%] win ratio Gold [%] Prince Rennyn 559 73.9 70.3 78.5 65.3 76.5 Plado Emberstorm 302 67.2 66.7 72.7 55.4 40.0 Dragon Whelp 6 66.7 80.0 0.0 0.0 0.0 Swamp Thing 1544 63.9 65.2 65.4 60.0 55.9 Xander Foxwood 198 63.1 62.7 67.1 57.1 57.1 Valnamor 122 63.1 70.7 59.6 43.8 0.0 Javelin Thrower 567 61.6 61.9 64.2 50.0 50.0 Peaceful Giant 426 60.8 55.4 63.4 64.8 53.6 Jarlax the Undead 81 60.5 67.4 55.6 45.5 0.0 Spirit of the Forest 448 60.0 66.3 56.9 63.2 51.5 Earth Elemental 2405 59.8 60.9 60.4 57.4 54.3 Magi of the Forest 728 59.3 63.8 59.3 52.6 60.0 Brownie 1446 59.0 61.0 58.9 54.2 62.1 Hobgoblin 189 58.2 64.3 61.4 34.4 75.0 Serpent of the Flame 356 57.9 57.0 63.5 48.7 45.5 Selenia Sky 1650 57.8 61.1 58.7 56.0 51.5 Exploding Dwarf 287 57.5 57.5 60.6 50.0 0.0 Manticore 824 57.2 66.6 46.0 48.3 37.5 Flesh Golem 3127 56.6 59.9 56.4 48.3 47.5 Elemental Phoenix 263 56.3 25.0 66.9 46.6 45.0 Air Elemental 602 55.8 55.7 58.7 47.6 40.0 Shin-Lo 90 55.6 73.9 37.0 57.7 57.1 Cerberus 996 55.0 55.0 57.7 48.6 36.8 Hydra 463 54.6 46.7 57.8 56.5 45.8 Imp Bowman 110 54.5 58.3 52.6 64.3 0.0 Goblin Shaman 599 54.4 52.8 57.2 49.5 45.0 Xia Seachan 208 54.3 52.5 45.3 63.0 52.2 Creeping Ooze 3854 54.2 55.4 55.1 49.9 52.5 Wood Nymph 2043 54.1 57.5 51.5 53.3 46.2 Centaur 914 54.0 53.1 51.9 57.3 61.4 Serpentine Soldier 499 53.9 56.2 58.1 45.0 42.3 The Peakrider 130 53.8 54.8 47.2 65.5 50.0 Frost Giant 337 53.4 64.8 47.4 51.1 11.1 Crypt Mancer 120 53.3 45.0 61.4 55.6 44.4 Highland Archer 581 53.0 49.6 53.0 57.5 50.0 Kobold Miner 1278 53.0 53.0 55.4 44.5 60.6 Defender of Truth 561 52.4 46.4 54.6 53.3 60.0 Angel of Light 146 52.1 25.0 43.8 60.3 57.1 Pirate Captain 924 51.7 53.5 45.5 57.7 57.6 Crystal Werewolf 190 51.6 44.1 55.4 54.7 75.0 Lord Arianthus 1140 51.5 42.4 51.5 55.7 50.0 Pirate Archer 1300 51.3 50.5 47.8 57.3 57.9 Magi Sphinx 657 51.3 55.6 50.8 35.9 46.7 Daria Dragonscale 1650 50.9 56.9 46.1 41.1 22.2 Undead Priest 718 50.6 43.7 56.2 46.1 45.5 Lord of Darkness 313 50.5 43.2 49.1 57.3 60.0 Elven Cutthroat 1906 50.5 48.4 49.6 53.9 56.5 Mushroom Seer 657 49.9 51.1 48.0 51.8 50.0 Screaming Banshee 245 49.8 42.7 55.7 51.9 0.0 Ruler of the Seas 1155 49.6 52.2 48.1 46.9 45.0 Crustacean King 2100 49.4 47.6 47.1 56.0 50.4 Cocatrice 1604 49.1 44.4 48.4 55.2 56.8 Malric Inferno 1293 48.6 44.7 52.2 46.4 44.7 Talia Firestorm 64 48.4 25.0 50.0 52.0 45.5 Divine Healer 1735 48.4 44.4 49.6 51.1 58.7 Stone Golem 269 48.3 45.3 47.1 54.7 44.4 Spineback Turtle 1509 48.2 50.1 45.8 49.4 56.4 Lightning Dragon 52 48.1 71.4 48.1 20.0 0.0 Peacebringer 1062 48.0 44.4 51.4 43.5 50.0 Silvershield Paladin 1464 48.0 43.5 49.2 50.2 55.0 Skeleton Assassin 796 47.9 43.6 50.6 48.4 38.9 Mischievous Mermaid 999 47.8 54.2 43.3 46.6 28.0 Raging Impaler 44 47.7 53.8 33.3 50.0 0.0 Lyanna Natura 1949 47.4 47.8 47.4 45.7 52.0 Fire Demon 339 47.2 38.4 53.8 45.7 35.7 Feral Spirit 1175 47.1 40.8 45.3 55.7 58.5 Divine Sorceress 264 47.0 37.3 52.0 47.1 33.3 Haunted Spirit 1463 46.8 43.2 50.0 44.6 42.9 Kiara Lightbringer 94 46.8 50.0 40.5 58.3 28.6 Twisted Jester 1020 46.7 45.0 49.9 38.8 57.1 Goblin Sorcerer 804 46.6 49.4 45.6 40.9 56.7 Spineback Wolf 293 46.4 29.2 53.2 44.9 50.0 Silvershield Knight 488 45.7 51.5 41.9 38.9 60.0 Clay Golem 352 45.2 46.9 46.3 33.3 66.7 Tyrus Paladium 1752 45.0 39.8 45.9 48.4 60.0 Zintar Mortalis 1235 45.0 35.1 49.9 46.7 61.1 Enchanted Pixie 582 45.0 45.6 42.2 47.9 54.5 Medusa 1007 45.0 46.5 41.8 52.2 36.4 Haunted Spider 812 45.0 37.5 50.0 41.5 55.6 Neb Seni 9 44.4 0.0 50.0 0.0 0.0 Gold Dragon 212 44.3 21.1 45.4 47.2 50.0 Frozen Soldier 327 44.0 47.4 39.9 47.8 47.1 Naga Warrior 234 43.2 37.5 37.2 53.2 46.7 Water Elemental 847 43.1 42.1 43.4 47.3 33.3 Fire Beetle 372 43.0 41.0 45.5 37.3 54.5 Alric Stormbringer 2438 42.8 47.1 39.2 44.8 25.6 Chromatic Dragon 93 41.9 33.3 50.0 39.1 25.0 Phantom Soldier 92 41.3 25.0 52.9 40.0 0.0 Sabre Shark 563 41.2 44.6 35.9 46.5 41.4 Giant Roc 356 40.7 32.2 46.1 42.1 25.0 Sacred Unicorn 276 40.6 44.8 36.1 40.0 66.7 Silvershield Archers 361 39.6 41.8 39.4 31.2 100.0 Sea Genie 465 39.4 40.6 34.3 49.4 16.7 Stonesplitter Orc 313 39.3 41.1 37.4 41.7 0.0 Sea Monster 743 38.8 46.2 29.9 22.9 0.0 Flame Imp 155 38.1 21.4 45.5 39.6 25.0 Dark Enchantress 116 37.9 34.0 44.2 27.3 0.0 Minotaur Warrior 234 37.6 28.6 42.2 39.4 33.3 Skeletal Warrior 131 37.4 34.0 44.8 26.3 0.0 Grumpy Dwarf 226 37.2 34.7 39.7 30.0 50.0 Rexxie 142 35.9 41.5 33.8 25.0 0.0 Cyclops 195 35.4 34.5 35.1 30.8 100.0 Silvershield Warrior 255 34.1 37.5 33.9 19.4 75.0 Prismatic Energy 150 34.0 35.6 32.4 33.3 0.0 Vampire 74 33.8 19.0 35.1 50.0 50.0 Naga Fire Wizard 55 30.9 37.5 30.4 12.5 0.0 Pit Ogre 233 30.0 26.7 31.9 37.5 0.0 Undead Minotaur 29 27.6 12.5 36.8 0.0 0.0 Royal Dragon Archer 15 26.7 75.0 0.0 20.0 0.0 Black Dragon 21 23.8 12.5 37.5 20.0 0.0 Goblin Mech 242 22.3 25.6 19.6 16.7 0.0 Animated Corpse 78 21.8 12.9 27.5 28.6 0.0 Rusty Android 69 18.8 23.5 17.2 0.0 0.0 Splinter splinter n win ratio Blue/Water 2768 44.6 Red/Fire 1659 52.0 Green/Earth 2706 54.0 White/Life 1976 45.7 Black/Death 1436 46.6 Gold/Dragon 3309 54.3 ConclusionThe new legendary summoners are really strong and show a good winning ratio. Prince Rennyn and Plado Emberstorm show the best winning ratio of all cards. The standard rare summoner show all an overall winning ratio of under 50%.In order to be able to win some tournaments, having some epic or legendary summoner is a must. Gold/Dragon, Green/Earth and Blue/Water are the most played splinters. Green/Earth and Gold/Dragon have the highest winning ratio. This page is synchronized from the post: ‘Which cards dominate the steemmonsters tournaments?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/which-cards-dominate-the-steemmonsters-tournaments/"},{"title":"steemrewarding.com - upvoting of paid-out posts possible and rules table improved","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. New featuresUpvoting already paid-out postsThe delayed vote tab can now also be used to upvote already paid-out posts. When a paid-out post is given, a comment is replied with 100% benficiaries set to the author and upvoted. There are three ways to do this: Go to https://steemrewarding.com/delayed_vote and enter the authorperm replace steemit by steemrewarding: e.g.: https://steemrewarding.com/steempeak/@steempeak/keychain-integration-now-live-on-steempeak-com Write a comment as: The created comment has 100% beneficiaries set to the author. In 7 days, the author of the already paid out post will receive the author rewards of the upvoted comment. Assuring that a command is only parsed once New checks have been added for assuring that each command is only parsed once. The timestamp of the last parsed commend last_command is stored in a json file at the end of the script. When the json file would be deleted, all rewarding commands would be parsed again. In order to prevent this, a command inside a comment must be not older than 3 hours: 123# Skip not processed commands that are older than 3 hoursif (datetime.utcnow() - command[&quot;created&quot;]).total_seconds() / 60 / 60 &gt; 3: continue A second check is implemented that checks of the comment that contains the comment was already upvoted by @rewarding:123456already_voted = Falsefor v in c_comment[&quot;active_votes&quot;]: if v[&quot;voter&quot;] == rewarding_account: already_voted = Trueif already_voted: continue As a comment containing a rewarding command is alsways upvoted, checking for upvotes from rewarding will also prevent that accidentially a command is parsed twice. Improved rules/trail rules table and copying of rules possibleIt is now possible to add the author and change if comments or posts ( main_post flag) should be upvoted. After pressing the button in the rule editing from:1234567rule_dict = rule_dict_from_form(name, form)if rule_dict[&quot;author&quot;] != author or rule_dict[&quot;main_post&quot;] != main_post: if copy_rule is None or not copy_rule: voteRulesTrx.delete(name, author, main_post) voteRulesTrx.add(rule_dict)else: voteRulesTrx.update(rule_dict) It is checked of the author and/or the main_post flag was changed. If this is the case, a new rule is created. When copy_rule is not set, the old rule is deleted. The vote rule table has been improved. Links for edit/copy/delete a rule are now on the left side:When I press the edit link:All changes at the author field will create a new rule and the old rule will be deleted. When I press the copy link:All changes at the author field will create a new rule with the same parameters. The old rule stays unchanged. Maximum vote delay parameter addedA new parameter was added for vote rules:It is now possible to limit the validity of a rule which is vote power based. A post/comment is then upvoted when min_vp is smaller than the vote power and when the delay is below of maximum_vote_delay_min. min_vp, vote_sbd and vote_when_vp_reached added to delayed voteIt is now possible to queue vote-power based votes. The following setting will queue a vote which is later upvted when a vote power of 90% is reached. CommitsAdd creating of of comments with beneficiaries to flask app commit 5cd3292fix permlink of comment for upvoting commit e8363fdCopy item added to vote rules and trail vote rules commit ead68fc table layout improved description added to edit and delete rule/trail rule copying a rule/trail rule is possible form field for deleting a rule / trail rule is shortedAdd more form fields for delayed vote and add max vote delay commit 047fb78 show account information at start page More form fields for delayed vote maximum vote delay added as form fieldAdd checks for command parsing that will prevent that a comment is parsed twice commit 6c0f481add rewarding of paid-out post (older than 7days post) commit fdc6921 when a already paid-out post should be upvoted, a commentwith beneficiaries is upvoted instead. add short notice to dalayed vote tabadd more help text to forms and improve scripts commit 8305093 prevent negative vote weight add pool_recycle to database connector add hours, minutes and days to command parsing sorting rules by author improve app check in post add unit tests for command parsing add try/except for loading post/comment from authorperm GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - upvoting of paid-out posts possible and rules table improved’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-upvoting-of-paid-out-posts-possible-and-rules-table-improved/"},{"title":"How to follow all steem-engine token movements","text":"The steem-engine token balance of an account can be influenced by the following actions: issue - can be performed by the token creator and increases the number of token transfer - a token is transfered between two accounts buy - when a buy order is fullfilled, the token is transfered into the account sell - when a sell order is fullfilled the token is permamently removed from the account All these operations are custom_json operation and they have to be accepted by the sidechain. Parsing only the custom_json is not sufficient for knowing who owns token. Market operationbuyA buy order allows an account to buy token from the market. The STEEMP that are needed in exchange for the tokens is locked into the market. sellA sell order allows an account to sell token to the market. The token that should be sold are locked into the market until the order is fullfiled or canceld. Fullfilling a buy orderWhen there is already a matching sell order on the market, three internal transfers are generated: STEEMP from the buyer is transfered to the market The tokens are transfered from the market to the buyer The STEEMP are transfered to the seller When there is no matching sell order, only one transfer is generated: STEEMP is transfered to the market In both cases, the same custom_json is broadcasted. It is only possible to know, how much token each account has, when it is known if there is a matching sell order or not. Fullfilling a sell orderWhen there is already a matching buy order on the market, three internal transfers are generated: STEEMP from the buyer is transfered to the market The tokens are transfered from the market to the buyer The STEEMP are transfered to the seller When there is no matching buy order, only one transfer is generated: tokens are transfered to the market In both cases, the same custom_json is broadcasted. It is only possible to know, how much token each account has, when it is known if there is a matching buy order or not. If a order is fullfilled or not can be found out by using get_transaction_info(trx_id) from the steemengine python library. The transaction_id of the broadcasted buy/sell custom_json is needed as function input. 12345trx_info = api.get_transaction_info(b[&quot;trx_id&quot;])payload =json.loads(trx_info[&quot;payload&quot;])logs = json.loads(trx_info[&quot;logs&quot;])if &quot;events&quot; in logs: print(logs[&quot;events&quot;]) This function returns a json with a logs field. When it has an events field, the order was sucessfully placed. When only one transfer is stored into logs[&quot;events&quot;], there was no matching buy/sell order.When there is more than 1 transfer, the buy/sell order was sucessfully. Token movement trackerThe following script prints token movements. When a buy or a sell operation at the market is sucessfully, it is shown and all transfers are shown.In the screen shot, bobby.madagascer bought 1 FREEX from dakeshi. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# This Python file uses the following encoding: utf-8# (c) holger80from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionfrom __future__ import unicode_literalsfrom beem import Steemfrom beem.comment import Commentfrom beem.nodelist import NodeListfrom beem.utils import formatTimeString, addTzInfofrom beem.blockchain import Blockchainfrom steemengine.api import Apiimport timeimport jsonif __name__ == &quot;__main__&quot;: nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) api = Api() blockchain = Blockchain(mode=&quot;head&quot;, steem_instance=stm) start_block = blockchain.get_current_block_num() for b in blockchain.stream(start=start_block, opNames=[&quot;custom_json&quot;, &quot;transfer&quot;]): if b[&quot;type&quot;] == &quot;custom_json&quot;: if b[&quot;id&quot;] != &quot;ssc-mainnet1&quot;: continue trx_info = api.get_transaction_info(b[&quot;trx_id&quot;]) if trx_info is None: continue payload =json.loads(trx_info[&quot;payload&quot;]) logs = json.loads(trx_info[&quot;logs&quot;]) if &quot;errors&quot; in logs: continue if trx_info[&quot;action&quot;] == &quot;issue&quot;: print(&quot;%s issued %s %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;])) elif trx_info[&quot;action&quot;] == &quot;transfer&quot;: print(&quot;%s transfered %s %s to %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;to&quot;])) elif trx_info[&quot;action&quot;] == &quot;sell&quot;: if len(logs[&quot;events&quot;]) == 1: print(&quot;%s put sell order %s %s for %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;price&quot;])) else: print(&quot;%s sold %s %s for %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;price&quot;])) for transfer in logs[&quot;events&quot;]: print(&quot; - %s transfers %s %s to %s&quot; % (transfer[&quot;data&quot;][&quot;from&quot;], transfer[&quot;data&quot;][&quot;quantity&quot;], transfer[&quot;data&quot;][&quot;symbol&quot;], transfer[&quot;data&quot;][&quot;to&quot;])) elif trx_info[&quot;action&quot;] == &quot;buy&quot;: if len(logs[&quot;events&quot;]) == 1: print(&quot;%s put buy order %s %s for %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;price&quot;])) else: print(&quot;%s bought %s %s for %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;price&quot;])) for transfer in logs[&quot;events&quot;]: print(&quot; - %s transfers %s %s to %s&quot; % (transfer[&quot;data&quot;][&quot;from&quot;], transfer[&quot;data&quot;][&quot;quantity&quot;], transfer[&quot;data&quot;][&quot;symbol&quot;], transfer[&quot;data&quot;][&quot;to&quot;])) elif trx_info[&quot;action&quot;] == &quot;cancel&quot;: print(&quot;%s cancel %s order with %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;type&quot;], payload[&quot;id&quot;])) elif trx_info[&quot;action&quot;] == &quot;withdraw&quot;: print(&quot;%s withdraw %s STEEMP&quot; % (trx_info[&quot;sender&quot;], payload[&quot;quantity&quot;])) elif trx_info[&quot;action&quot;] == &quot;updateMetadata&quot;: continue elif trx_info[&quot;action&quot;] == &quot;create&quot;: print(&quot;%s created the %s token&quot; % (trx_info[&quot;sender&quot;], payload[&quot;symbol&quot;])) else: print(trx_info) elif b[&quot;type&quot;] == &quot;transfer&quot;: if &quot;ssc-mainnet1&quot; not in b[&quot;memo&quot;]: continue trx_info = api.get_transaction_info(b[&quot;trx_id&quot;]) if trx_info is None: continue payload =json.loads(trx_info[&quot;payload&quot;]) if trx_info[&quot;action&quot;] == &quot;buy&quot;: print(&quot;%s bought STEEMP for %s&quot; % (trx_info[&quot;sender&quot;], payload[&quot;amountSTEEMSBD&quot;])) elif trx_info[&quot;action&quot;] == &quot;removeWithdrawal&quot;: print(&quot;%s withdraw STEEMP for %s&quot; % (payload[&quot;recipient&quot;], payload[&quot;amountSTEEMSBD&quot;])) else: print(trx_info) In order to run the script, steemengine must be install by1pip install steemengine It can than be run by storing the content into a py file and running the script by1python monitor_tokens.py This page is synchronized from the post: ‘How to follow all steem-engine token movements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-follow-all-steem-engine-token-movements/"},{"title":"Update for steemengine - token class and command line tool added","text":"Repositoryhttps://github.com/holgern/steemengine steemenginesteemengine is a python library for working with steem-engine.com tokens. I released version 0.3.0 which can be installed by1pip install steemengine New featuresNew Token classI added a token class, that can be used to receive information about a token. 1234567from steemengine.tokenobject import Tokeneng = Token(&quot;ENG&quot;)print(eng)print(eng.get_holder())print(eng.get_market_info())print(eng.get_buy_book())print(eng.get_sell_book()) get_holderAll accounts that currently are holding a token can be received by the get_holder() functionIt uses the find function from the api:1holder = self.api.find(&quot;tokens&quot;, &quot;balances&quot;, query={&quot;symbol&quot;: self.symbol}) It returns a list of dict-objects. Each dict object is of the following structure:1234{&apos;$loki&apos;: 2, &apos;account&apos;: &apos;steemsc&apos;, &apos;balance&apos;: &apos;1973148.55400000&apos;, &apos;symbol&apos;: &apos;ENG&apos;} get_market_info()This function uses:1metrics = self.api.find_one(&quot;market&quot;, &quot;metrics&quot;, query={&quot;symbol&quot;: self.symbol}) and returns the following structure:1234567891011{&apos;$loki&apos;: 1, &apos;highestBid&apos;: &apos;0.81000&apos;, &apos;lastDayPrice&apos;: &apos;0.949&apos;, &apos;lastDayPriceExpiration&apos;: 1552346331, &apos;lastPrice&apos;: &apos;0.949&apos;, &apos;lowestAsk&apos;: &apos;0.949&apos;, &apos;priceChangePercent&apos;: &apos;0.00%&apos;, &apos;priceChangeSteem&apos;: &apos;0.000&apos;, &apos;symbol&apos;: &apos;ENG&apos;, &apos;volume&apos;: 223.535, &apos;volumeExpiration&apos;: 1552346331} get_buy_book() and get_sell_book()These functions return the sell/buy book of all currently not fullfilled order at the market. Command line toolI added a command line tool to the python package. It has currently two commands.After installing the steemengine library, a steemengine command should be available in the terminal.1steemengine --version and1steemengine --help should be working. steemengine richlistThis command returns the top n token holder.For example the top 10 ENG token holder can be shown be the following command:1steemengine richlist -t 10 ENG The STEEM value of the token balance is obtained by multiplying the balance by the lastPrice field from get_market_info(). steemengine infoThis command can be used to receive information about latest block1steemengine info a sidechain block1steemengine info 16695 a token1steemengine info ENG an account1steemengine info holger80 a transaction id1steemengine info 12ed6e59179a8b5441809d60dc3025143f17ff9f PyInstallerI created two pyinstaller specs, which will create a one file standalone executable and a one-directory standalone excecutable. I setup appveyoer, in order to build a packed version for windows:https://ci.appveyor.com/project/holger80/steemengineI will put the newest Windows-Versions to the release page: https://github.com/holgern/steemengine/releases CommitsChangelog and pyinstaller build instruction added commit ff05b22Add command line tool for showing block, token and account info commit e8362861 Add CLI for showing information about blocks, transaction ids, token and accounts Unit tests for tokenobject and tokens added get_buy_book and get_sell_book for Wallet added Add Token class, remove unused imports and fix some variable names commit d34d5ee The new Token class returns, token holder, market information and token information some camelcase variable names fixed unused imports removed version increased to 0.3.0 GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for steemengine - token class and command line tool added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-steemengine-token-class-and-command-line-tool-added/"},{"title":"Bringing Steem to everipedia.org","text":"It seems that bringing information about Steem to wikipedia is not possible right now: https://en.wikipedia.org/w/index.php?title=Steem&amp;action=history. Thanks to @vikisecrets for trying. Updating the Steem article at everipediaI decided to update the Steem related articles at everypedia.org. After several iterations, I wrote a new Steem (blockchain) article. I adapted also the STEEM (cryptocurrency) article. How to use everipediaYou need a EOS account and IQ. The IQ must be staked to receive BRAIN. Each editing approach consumes 50 BRAIN. Each iteration is then open for 6 hours and other user can reject are accept changes: Until now my changes are accepted by the communityhttps://everipedia.org/vote/lang_en/steem/https://everipedia.org/vote/lang_en/steem-cryptocurrency/ Let’s see in 6 hours if all changes are going through :). This page is synchronized from the post: ‘Bringing Steem to everipedia.org’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/bringing-steem-to-everipedia-org/"},{"title":"Using everipedia.org - a review and strategy for maximizing rewards","text":"Yesterday, I used everipedia.org the first time. My user experience was quite mixed. Luckily, I had an airdrop of 2195 IQ which is currently around 13.7 STEEM, so I could try it for free. I downloaded Scatter for desktop (https://get-scatter.com/download), installed it and added my EOS key. The I visited https://everipedia.org/ and could stake my IQ to BRAIN. When I decide now, not to use everipedia, I can claim my IQ back in 21 days. I used my BRAIN to create and polish an article about Steem and STEEM. Each edit step costs 50 BRAIN (0.3 STEEM). The change is then open for 6 hours and other user with staked BRAIN can vote. (It is also possible to vote for your own changes). Posts that are currently open for review can be found under: https://everipedia.org/recent-activity/ RewardsThere are Editor and Curator rewards Editor and Curator rewards are minted separately every period (30 minutes). The formula above shows how the rewards are splitted when more than one editor or curator was active within a period of 30 minutes. The rewards are linear spitted depending on how much BRAIN was used for approval. When there were two editors active within 30 minutes the minted IQ is splitted between them. The editor with the higher approval receives linearly more. The same is done for the curators. In this case rewards are only send when a curator is on the marjority side(when he approves an article when the majority of curators has approved it). If I’m the only editor or curator within a period than I will receive the complete minted IQ of that period. Receiving IQ for editing and curatingIt is possible to vote more than once, the used BAIN is summed up. Self-voting is possible. Let’s take a look my first edit attempt on everipedia where I changes something at Wingware I made as my first attempt to use everipedia. I paid 50 BRAIN for editing and received In total 10631 BRAIN of approval which are around 63.8 STEEM. I received 346.544 IQ, which are 2 STEEM. The friendly whale innohyun1eos, who approved my article with 10000 BRAIN, received 57.267 IQ (0.34 STEEM). Summary for an editorAs a editor, I needed 50 IQ (0.3 STEEM) which are staked for 21 days and I received after 6 hours 346.544 IQ (2 STEEM). Which the rewards, I’m able to edit 6 other posts and hoping for another whale vote. Summary for a curatorThe friendly whale used 10000 BRAIN (60.4 STEEM) which are staked for 21 days to approve my article. After 6 hours, he received 57.267 IQ (0.34 STEEM). So for staking 60.4 STEEM for 21 days he receives 60.74 STEEM. Thats a gain of 0.563 % for 21 days or 5.67 (9.382 %) STEEM per year. Editor rewards without whale voteI added a product logo and edited the same article a second time. This time, I did not receive a whale approval and earned only 29.719 IQ (0.17 STEEM) Reviewing changes from others for earning curationIt is possible to see which articles are open for review and it is also not visible if only one character was changed or a complete new article was written. The diff viewer is also not good. I changed only the version number of the currently stable python versions in Python (programming language, but the diff viewer suggests that I changed the complete article: I think it is not possible to review the changes, as they are not shown properly. SummaryThe following seems to be the best for maximazing rewards: Be active only once in a period (30 minutes) as editor and as a curator If you are a curator, use more BRAIN than all other combined so that you receive most of the curation reward that is minted in that period Let’s check of the whale is following this strategy: Yes, he does, he curates every 30 minutes… (There is more than one transfer when more than one article was reviewed without a period, so we know that he is reviewing only one article every 30 minutes) Maybe a good strategy is also to publish a change 30 minutes after the whale curates last time… No I understand also, why I received less on my second editor attempt, I would received more when I had waited 30 minutes… It was interesting to explore the reward mechanism of everipedia, but I will keep my focus on the Steem blockchain :). This page is synchronized from the post: ‘Using everipedia.org - a review and strategy for maximizing rewards’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/using-everipedia-org-a-review-and-strategy-for-maximizing-rewards/"},{"title":"steem-scot - a distributor for Smart Contract Organizational Token","text":"Repositoryhttps://github.com/holgern/steem-scot steem-scotThe python scitp steem-scot is an implementation for distribute Smart Contract Organizational Token (SCOT).It is possible to define a yearly inflation of the SCOT token. Each day, one part of the SCOT token are transferred from the SCOT account to accounts that were upvoted by SCOT token holders.The amount of SCOT token that is sent, depends on the upvote weight, the amount of SCOT token the voter had and the inflation. It is possible to include only posts that are from a specific app, have the token symbol as tag or have the token symbol inside a new SETokensSupported field in the post json_metadata. This post is a contribution to the SCOT Dev contest. How does it workAt the beginning, I’m calculating the block number from yesterday (UTC) 0:00:00 and 23:59:59 by1234567b = Blockchain(steem_instance=self.stm)yesterday = date.today() - timedelta(days=1)yesterday_0_0_0 = datetime(yesterday.year, yesterday.month, yesterday.day)yesterday_23_59_59 = datetime(yesterday.year, yesterday.month, yesterday.day, 23,59, 59)start_block = b.get_estimated_block_num(addTzInfo(yesterday_0_0_0))stop_block = b.get_estimated_block_num(addTzInfo(yesterday_23_59_59)) Then I check if there is any token transfer of the SCOT token in this period:123456789token_sent_last_24_h = 0for hist in self.token_wallet.get_history(self.scot_token[&quot;symbol&quot;]): timestamp = datetime.strptime(hist[&quot;timestamp&quot;], timeFormatZ) if timestamp &lt;= yesterday_23_59_59: continue print(hist) if hist[&quot;from&quot;] != self.config[&quot;scot_account&quot;]: continue token_sent_last_24_h = float(hist[&quot;quantity&quot;]) When there was no token transfer, I proceed.I fetch all token holder:12345678offset = 0get_holder = self.scot_token.get_holder()offset += 1000new_holder = self.scot_token.get_holder(offset=offset)while len(new_holder) &gt; 0: get_holder.append(new_holder) offset += 1000 new_holder = self.scot_token.get_holder(offset=offset) calculate how many token are there:12345token_sum = 0for item in get_holder: if item[&quot;account&quot;] == self.config[&quot;scot_account&quot;]: continue token_sum += float(item[&quot;balance&quot;]) and calculate, based on the daily inflation how many token should be send for a 100% upvote:123456for item in get_holder: if item[&quot;account&quot;] == self.config[&quot;scot_account&quot;]: continue token_sum += float(item[&quot;balance&quot;]) if float(item[&quot;balance&quot;]) &gt; 0: token_per_100_vote[item[&quot;account&quot;]] = (float(item[&quot;balance&quot;]) / token_sum) * self.daily_inflation / 10 (float(item[&quot;balance&quot;]) / token_sum) is the part of the holder on all available tokens. (float(item[&quot;balance&quot;]) / token_sum) * self.daily_inflation is then the daily amount for the holder to distribute. As there are 10 upvotes a day, token_per_100_vote is the number divided by 10. In the next step, I stream all vote ops from the last day:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950token_to_authors = {}b = Blockchain(steem_instance=self.stm)for op in b.stream(start=start_block, stop=stop_block, opNames=[&quot;vote&quot;], max_batch_size=50): if op[&quot;voter&quot;] not in token_per_100_vote: continue if not self.config[&quot;downvotes&quot;] and op[&quot;weight&quot;] &lt; 0: continue if not self.config[&quot;upvotes&quot;] and op[&quot;weight&quot;] &gt; 0: continue comment = Comment(op, steem_instance=self.stm) try: comment.refresh() except: print(&quot;Could not fetch %s&quot; % comment[&quot;authorperm&quot;]) continue json_metadata = comment[&quot;json_metadata&quot;] app = None SETokensSupported = None if isinstance(json_metadata, str): json_metadata = json.loads(json_metadata) if &quot;app&quot; in json_metadata: app = json_metadata[&quot;app&quot;] if isinstance(app, dict) and &quot;name&quot; in app: app = app[&quot;name&quot;] elif isinstance(app, dict): app = &quot;&quot; if &quot;SETokensSupported&quot; in json_metadata: SETokensSupported = json_metadata[&quot;SETokensSupported&quot;] app_or_symbol = False if app is not None and len(self.config[&quot;included_apps&quot;]) &gt; 0 and app != &quot;&quot; and app in self.config[&quot;included_apps&quot;]: app_or_symbol = True elif self.config[&quot;include_token_as_tag&quot;] and self.scot_token[&quot;symbol&quot;] in comment[&quot;tags&quot;]: app_or_symbol = True elif SETokensSupported is not None and len(SETokensSupported) &gt; 0 and self.scot_token[&quot;symbol&quot;] in SETokensSupported: app_or_symbol = True if not app_or_symbol and not self.config[&quot;include_all_posts&quot;]: continue token_amount = abs(op[&quot;weight&quot;]) / 10000 * token_per_100_vote[op[&quot;voter&quot;]] if op[&quot;weight&quot;] &lt; 0: if op[&quot;voter&quot;] not in token_to_authors: token_to_authors[op[&quot;voter&quot;]] = token_amount else: token_to_authors[op[&quot;voter&quot;]] += token_amount else: if op[&quot;author&quot;] not in token_to_authors: token_to_authors[op[&quot;author&quot;]] = token_amount else: token_to_authors[op[&quot;author&quot;]] += token_amount and add the token to the token_to_authors dict. As now less then 10 votes could be done per holder, I correct the token to the maximum available token amount:1token_to_authors[author] = token_to_authors[author] * self.daily_inflation / token_amount_to_sent I take also the token precision into account and round the amount to sent:1token_to_authors[author] = math.floor(token_to_authors[author] * 10**self.scot_token[&quot;precision&quot;]) / 10**self.scot_token[&quot;precision&quot;] Finally, the token are transferred:12345678for author in token_to_authors: if token_to_authors[author] &lt; 10**(-self.scot_token[&quot;precision&quot;]): continue if self.config[&quot;no_broadcast&quot;]: logger.info(&quot;Sending %f %s to %s&quot; % (token_to_authors[author], self.scot_token[&quot;symbol&quot;], author)) else: self.token_wallet.transfer(author, token_to_authors[author], self.scot_token[&quot;symbol&quot;], memo=self.config[&quot;token_memo&quot;]) time.sleep(4) InstallationThe package can be installed by1pip install steem-scot UsageThen a config.json need to be created and the token can be distributed once a day (after UTC 0:0:0) by: 1scot config.json A beempy wallet must be created and the active key of the scot_account must be added before. The following fields must be included into the config.json: Option Value scot_account steem account name, which should distribute the token scot_token token symbol, which should be distributed token_memo memo which is attached to each token transfer yearly_inflation yearly_inflation / 365 is the amount which is distributed daily included_apps When set to [], it is skipped. Can include a list of apps which should be included into the distribution include_token_as_tag When true, posts which have the token as one tag, are included include_all_posts When false, a upvote of a post is only included when the app is added to included_apps, the symbol is added as tag or the symbol is added as SETokensSupported field in the post json_metadata downvotes When true, downvoter which downvoted included posts will receive token upvotes When true, post authors, which were upvoted by token holder will receive token wallet_password Contains the beempy wallet password no_broadcast When true, no transfer is made ExampleLet’s assume the DRAGON token are a SCOT. The config.json could then be: 12345678910111213{ &quot;scot_account&quot;: &quot;legendarydragons&quot;, &quot;scot_token&quot;: &quot;DRAGON&quot;, &quot;token_memo&quot;:&quot;Daily token share, please visit ... for more information.&quot;, &quot;yearly_inflation&quot;: 10000, &quot;included_apps&quot;: [], &quot;include_token_as_tag&quot;: true, &quot;include_all_posts&quot;:true, &quot;downvotes&quot;:false, &quot;upvotes&quot;:true, &quot;wallet_password&quot;: &quot;wallet_pass&quot;, &quot;no_broadcast&quot;: true} The output of scot config.json is then:12345678INFO:scot.scot:Check token transfer from legendarydragons...INFO:scot.scot:No token transfer were found, continue...INFO:scot.scot:58 token holder were found.INFO:scot.scot:Start to send 27.397232 token to 556 accountsINFO:scot.scot:Sending 0.154256 DRAGON to steemsportsINFO:scot.scot:Sending 0.030952 DRAGON to linnyplantINFO:scot.scot:Sending 1.238393 DRAGON to intrepidphotos..... Technology Stacksteem-scot uses beem and the steemengine library. RoadmapI’m planing to add more configuration methods. At the moment two restriction are in place:transfers can only be made once a day after 0:0:0 UTC. Maybe, adding a timezone and allow distribution of token more than once are good ideas. How to contributeBugs and ideas can be added as issue to github: https://github.com/holgern/steem-scotPull requests are welcome. GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steem-scot - a distributor for Smart Contract Organizational Token’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-scot-a-distributor-for-smart-contract-organizational-token/"},{"title":"Update for Steem Basic Income Automation - Blacklist database, automatic enrollment transfers and improve status reply","text":"Repositoryhttps://github.com/holgern/steembasicincome Blacklist database addedA new blacklist database with a tags, apps and body field was added.The blacklisted tags,apps and keywords can be changed anytime directly in the database. The fields are read out in sbi_stream_post_comment.py and three lists were build:12345678910111213blacklist = blacklistStorage.get()blacklist_tags = []for t in blacklist[&quot;tags&quot;].split(&quot;,&quot;): blacklist_tags.append(t.strip())blacklist_apps = []for t in blacklist[&quot;apps&quot;].split(&quot;,&quot;): blacklist_apps.append(t.strip())blacklist_body = []for t in blacklist[&quot;body&quot;].split(&quot;,&quot;): blacklist_body.append(t.strip()) The tags from the posts are then checked of one is stored in blacklist_tags.If a blacklisted tag was found, the post will be skipped.123for tag in c[&quot;tags&quot;]: if tag is not None and tag.lower() in blacklist_tags: skip = True In the next step the app, which was used to create the post, is extracted. As there are some different ways to store the app, the script is doing some checks first: 1234567891011121314json_metadata = c.json_metadataif isinstance(json_metadata, str): try: json_metadata = json.loads(json_metadata) except: json_metadata = {}if &quot;app&quot; in json_metadata: app = json_metadata[&quot;app&quot;] if isinstance(app, dict) and &quot;name&quot; in app: app = app[&quot;name&quot;] if app is not None and isinstance(app, str) and app.find(&quot;/&quot;) &gt; -1: app = app.split(&quot;/&quot;)[0] if app is not None and isinstance(app, str) and app.lower() in blacklist_apps: skip = True Finally, the body is scanned for blacklisted words. This is useful for letting a member disabling upvotes for a specific comment, as it is not easily possible to attach tags to a comment (which could be used for disabling upvotes on the comment instead).123for s in blacklist_body: if c.body.find(s) &gt; -1: skip = True Sending automatic enrollment transfer memos to new membersEnrollment to new member is now done automatically. A new database transfer_memos has been added, in which the memo text for the diffect memo transfer types welcome (is sent to new members), sponsoring (is sent to new sponsored members), sp_delegation (can be sent when a member is delegating SP), update_rshares (can be sent when a member increases their shares), sponsoring_update_rshares (can be sent when a member is sponsored and receive more shares). For each type a new function was created:123456789101112131415def memo_sponsoring(transferMemos, memo_transfer_acc, s, sponsor): if &quot;sponsoring&quot; not in transferMemos: return if transferMemos[&quot;sponsoring&quot;][&quot;enabled&quot;] == 0: return if memo_transfer_acc is None: return try: if &quot;%s&quot; in transferMemos[&quot;sponsoring&quot;][&quot;memo&quot;]: memo_text = transferMemos[&quot;sponsoring&quot;][&quot;memo&quot;] % sponsor else: memo_text = transferMemos[&quot;sponsoring&quot;][&quot;memo&quot;] memo_transfer_acc.transfer(s, 0.001, &quot;STEEM&quot;, memo=memo_text) except: print(&quot;Could not sent 0.001 STEEM to %s&quot; % s) The try/except check prevents the script from crashing when for example the active key is wrong, not sufficient STEEM are left on the account or the RC is to low. It is checked every 144 minutes in sbi_update_member_db.py if new members should be enrolled or if existing member are increasing their sbi units. It is now possible to send everytime a 0.001 STEEM memo with a configurable memo text (the sponsoring account name and the sbi units are added and a %s / %d placeholder is used. A memo is only sent when it is enabled by setting enabled to 1 in the database. Improved sbi status replies.The reply of the !sbi status command has been enhanced. The percentage of subscribed_rshares, delegation_rshares, curation_rshares and other_rshares which build the total SBI upvote value is now shown in the reply to a comment containing !sbi status. Commitsnew sql table structure commit b17de96Improve reply layout commit f7b771eAdd transfer memo database and sending transfers to new members commit 2b7bbcb Add flag for transfer memo account Implement transfer memo functions for the different memo types (welcome, sponsoring, update_shares and sponsoring_update_shares)Add blacklist database commit 2cedbb2 votes on posts with a blacklisted content word, a blacklisted tag or app are skipped sbi status reply improved, it is now shown from where the sbi upvote value is build GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for Steem Basic Income Automation - Blacklist database, automatic enrollment transfers and improve status reply’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-steem-basic-income-automation-blacklist-database-automatic-enrollment-transfers-and-improve-status-reply/"},{"title":"Using beem to interact with the HF20 testnet","text":"beem is ready to be used with the new HF 20 testnet which was announced here. We will use the new possibility to enter a custom_chain: 1234567891011121314if __name__ == &quot;__main__&quot;: stm = Steem(node=[&quot;https://testnet.steemitdev.com&quot;], custom_chains={&quot;TESTNETHF20&quot;: {&apos;chain_assets&apos;: [ {&quot;asset&quot;: &quot;@@000000013&quot;, &quot;symbol&quot;: &quot;SBD&quot;, &quot;precision&quot;: 3, &quot;id&quot;: 0}, {&quot;asset&quot;: &quot;@@000000021&quot;, &quot;symbol&quot;: &quot;STEEM&quot;, &quot;precision&quot;: 3, &quot;id&quot;: 1}, {&quot;asset&quot;: &quot;@@000000037&quot;, &quot;symbol&quot;: &quot;VESTS&quot;, &quot;precision&quot;: 6, &quot;id&quot;: 2} ], &apos;chain_id&apos;: &apos;46d82ab7d8db682eb1959aed0ada039a6d49afa1602491f93dde9cac3e8e6c32&apos;, &apos;min_version&apos;: &apos;0.20.0&apos;, &apos;prefix&apos;: &apos;TST&apos;} }) print(stm.get_blockchain_version()) print(stm.get_config()[&quot;STEEM_CHAIN_ID&quot;]) with the current output: 120.21.0&apos;18dcf0a285365fc58b71f18b3d3fec954aa0c141c44e4e5cb4cf777b9eab274e&apos; The testnet has at the moment a different chain id as written in the steemitdev post. It seems that at the moment the switch-over from HF19 to HF20 is simulated. As the chain-id of the HF19 testnet is stored into beem, beem switches over to this one. In order to get the current chain id, a direct RPC-call is possible:123from beemapi.graphenerpc import GrapheneRPCrpc = GrapheneRPC([&quot;https://testnet.steemitdev.com&quot;], disable_chain_detection=True)print(rpc.get_config()[&quot;STEEM_CHAIN_ID&quot;]) The parameter disable_chain_detection disables the internal chain detection, which could lead to problems when connecting to a network with a unknown chain id (not stored in beem or given by custom_chains). This page is synchronized from the post: ‘Using beem to interact with the HF20 testnet’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/using-beem-to-interact-with-the-hf20-testnet/"},{"title":"How many different signer broadcasted the votes on my last post?","text":"After reading the last analysis post from @crokkon, I wanted to know how many different signer broadcasted the votes for my last post. The provided script checks the signature of all broadcasted votes. This is done by the following steps: extracting the vote timestamp finding the blocknumber with get_estimated_block_num extracting the signature of the vote operation that belongs to the vote extract the public key from the signature by Signed_Transaction using verify using a steem rpc-call to get the account name compare the signer account name with the voter account name 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091from beem.wallet import Walletfrom beem.block import Blockfrom beem.blockchain import Blockchainfrom beem.comment import Commentfrom beem import Steemfrom beemgraphenebase.base58 import Base58from beembase.signedtransactions import Signed_Transactionif __name__ == &quot;__main__&quot;: stm = Steem() wallet = Wallet(steem_instance=stm) b = Blockchain(steem_instance=stm) authorperm = &quot;@holger80/holger80-s-curation-league-week-7&quot; c = Comment(authorperm) new_votes = [] voter = {} signer = {} cnt = 0 current_block_num = b.get_current_block_num() for v in c[&quot;active_votes&quot;]: cnt += 1 print(&quot;%d / %d&quot; % (cnt, len(c[&quot;active_votes&quot;]))) block_num = b.get_estimated_block_num(v[&quot;time&quot;]) transaction = None block_search_list = [0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5] block_cnt = 0 while transaction is None and block_cnt &lt; len(block_search_list): if block_num + block_search_list[block_cnt] &gt; current_block_num: block_cnt += 1 continue block = Block(block_num + block_search_list[block_cnt], steem_instance=stm) for tt in block.transactions: for op in tt[&quot;operations&quot;]: if isinstance(op, dict) and op[&quot;type&quot;][:4] == &quot;vote&quot;: if op[&quot;value&quot;][&quot;voter&quot;] == v[&quot;voter&quot;]: transaction = tt elif isinstance(op, list) and len(op) &gt; 1 and op[0][:4] == &quot;vote&quot;: if op[1][&quot;voter&quot;] == v[&quot;voter&quot;]: transaction = tt block_cnt += 1 key_accounts = [] if transaction is not None: signed_tx = Signed_Transaction(transaction) public_keys = [] for key in signed_tx.verify(chain=stm.chain_params, recover_parameter=True): public_keys.append(format(Base58(key, prefix=stm.prefix), stm.prefix)) for key in public_keys: pubkey_account = wallet.getAccountFromPublicKey(key) if pubkey_account is not None: key_accounts.append(pubkey_account) if len(key_accounts) &gt; 0: if key_accounts[0] in signer: signer[key_accounts[0]].append(v) else: signer[key_accounts[0]] = [v] signer_list = [] signer_is_voter = 0 signers_not_voters = [] for s in signer: rshares = 0 for v in signer[s]: rshares += v[&quot;rshares&quot;] signer_list.append({&quot;signer&quot;: s, &quot;votes&quot;: len(signer[s]), &quot;rshares&quot;: rshares}) if len(signer[s]) == 1 and s == signer[s][0][&quot;voter&quot;]: signer_is_voter += 1 elif len(signer[s]) == 1: signers_not_voters.append({&quot;signer&quot;: s, &quot;voter&quot;: signer[s][0][&quot;voter&quot;]}) sorted_signer_list = sorted(signer_list, key=lambda x: x[&quot;votes&quot;], reverse=True) print(&quot;%d signer broadcasted votes for %d accounts&quot; % (len(signer), len(c[&quot;active_votes&quot;]))) print(&quot;| # | signer | votes | SBD | votes / n_all_votes&quot;) print(&quot;| --- | --- | --- | --- | --- |&quot;) rank = 0 for s in sorted_signer_list[:10]: rank += 1 if s[&quot;votes&quot;] &gt; 1: print(&quot;| %d | %s | %d | %.2f | %.2f %% |&quot; % (rank, s[&quot;signer&quot;], s[&quot;votes&quot;], stm.rshares_to_sbd(s[&quot;rshares&quot;]), 100 * s[&quot;votes&quot;] / len(c[&quot;active_votes&quot;]))) print(&quot;| signer | voter |&quot;) print(&quot;| --- | --- |&quot;) for s in signers_not_voters: print(&quot;| %s | %s |&quot; % (s[&quot;signer&quot;], s[&quot;voter&quot;])) Results42 signer broadcasted votes of 60 different accounts # signer votes SBD 1 steemauto 11 0.05 2 buildteam 5 0.01 3 steemconnect 4 0.01 4 steemdunk 2 0.15 Additionally to the listed votes above, one account did sign the vote of a different account: signer voter remindme.bot isnochys ConclusionAround 20% of the votes are broadcasted from auto voting services as steemauto and steemdunk. 9 of the 60 voters did use a different dApp / interface to vote. One vote was signed by another account. By analysing the signatures of the broadcasted votes, the number of automatically casted votes can be estimated. If you want to try out the script, you have to do the following steps: install beem save the provided script in a file run it with python filename.py inside the python terminal This page is synchronized from the post: ‘How many different signer broadcasted the votes on my last post?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-many-different-signer-broadcasted-the-votes-on-my-last-post/"},{"title":"Update for steemengine - token precision taken into account and several new CLI commands added","text":"Repositoryhttps://github.com/holgern/steemengine steemenginesteemengine is a python library for working with steem-engine.com tokens. I released version 0.4.1 which can be installed by1pip install steemengine New featuresThe token precision is taken into account for transfer, issue, buy, sell, withdraw and depositI added a new quantize function to the Token class.12345def quantize(self, amount): &quot;&quot;&quot;Round down a amount using the token precision and returns a Decimal object&quot;&quot;&quot; amount = decimal.Decimal(amount) places = decimal.Decimal(10) ** (-self[&quot;precision&quot;]) return amount.quantize(places, rounding=decimal.ROUND_DOWN) This function returns a rounded Decimal object, which takes the token precision into account. The amount is rounded down to a valid amount.12345678from steemengine.tokenobject import Tokensteemp = Token(&quot;STEEMP&quot;)steemp.quantize(1.0001)Decimal(&apos;1.000&apos;)steemp.quantize(0.999999)Decimal(&apos;0.999&apos;)steemp.quantize(0.0001)Decimal(&apos;0.000&apos;) This function is then used in transfer, issue, buy, sell, withdraw and deposit:1234token = Token(symbol)quant_amount = token.quantize(amount)if quant_amount &lt;= decimal.Decimal(&quot;0&quot;): raise InvalidTokenAmount(&quot;Amount to transfer is below token precision of %d&quot; % token[&quot;precision&quot;]) If the quantized amount is zero, an InvalidTokenAmount exception is raised. New commands for the CLIThe acting account, which needs an active key stored in the beem wallet, is either the default beempy account or set by -a, e.g. steemengine transfer -a holger80 beembot 0.001 DRAGON test.The default account can be set by beempy set default_account holger80 and checked by beempy config. steemengine transferThis command can be used to sent token to other steem accounts.12345678910111213141516171819202122232425steemengine transfer -a holger80 beembot 0.001 DRAGON testPassword to unlock wallet:Wallet Unlocked!{ &quot;expiration&quot;: &quot;2019-03-20T10:12:49&quot;, &quot;ref_block_num&quot;: 55237, &quot;ref_block_prefix&quot;: 1423306811, &quot;operations&quot;: [ [ &quot;custom_json&quot;, { &quot;required_auths&quot;: [ &quot;holger80&quot; ], &quot;required_posting_auths&quot;: [], &quot;id&quot;: &quot;ssc-mainnet1&quot;, &quot;json&quot;: &quot;{\\&quot;contractName\\&quot;:\\&quot;tokens\\&quot;,\\&quot;contractAction\\&quot;:\\&quot;transfer\\&quot;,\\&quot;contractPayload\\&quot;:{\\&quot;symbol\\&quot;:\\&quot;DRAGON\\&quot;,\\&quot;to\\&quot;:\\&quot;beembot\\&quot;,\\&quot;quantity\\&quot;:\\&quot;0.0010000\\&quot;,\\&quot;memo\\&quot;:\\&quot;test\\&quot;}}&quot; } ] ], &quot;extensions&quot;: [], &quot;signatures&quot;: [ &quot;206b0d9b6d0939108c2156cefbafa99bccb5bb206c2ca129ebb2cf336112abbaab0ff1151917bec552357d400b6d72b98425f2052735c723522a9537589046b1e7&quot; ]} steemengine issueIssues new token, only possible when the active account is also the issuer of the token. steemengine depositThis command can be used to deposit STEEM and receive STEEMP for buying token.The following command transfers 0.1 STEEM to steem-peg and 0.1 STEEMP are transferred to the account in return.1steemengine deposit -a holger80 0.1 steemengine withdrawThis command can be used to withdraw STEEMP and receive STEEM.1steemengine withdraw -a holger80 0.1 steemengine buyThis command can be used to place buy orders.1steemengine buy -a holger80 1 JAR 0.9 This places a buy order, for buying 1 JAR for 0.9 STEEMP. The accounts must have 0.9 STEEMP, otherwise a InsufficientTokenAmount exception will be raised. The 0.9 STEEMP are locked until the order is fullfilled or canceled. steemengine sellThis command can be used to place a sell order.1steemengine sell -a holger80 1 JAR 3 In this examle, holger80 creates a sell order for selling 1 JAR for 3 STEEMP. The accounts needs 1 JAR to broadcast this, otherwise a InsufficientTokenAmount exception is raised. The 1 JAR is locked until the order is fullfilled or canceled. steemengine cancelIn order to cancel, the order id must be know. It can be checked with the buybook command.1steemengine buybook -a holger80 JAR The buy order can then be canceled by:1steemengine cancel -a holger80 buy 1824 A sell order is canceled by1steemengine cancel -a holger80 sell 923 steemengine buybook1steemengine buybook -a holger80 JAR returns the buybook for account holger80 and token JAR.1steemengine buybook JAR returns the complete buy book. steemengine sellbook1steemengine sellbook -a holger80 JAR returns the sellbook for account holger80 and token JAR.1steemengine sellbook JAR returns the complete sell book. CommitsFix cancel order id (cast to int) commit f63babaAdd changelog commit 14164d1Add transfer, issue, withdraw, deposit, buy, sell, cancel, buybook, sellbook to CLI commit 31f2e76Add amount quantization to deposit, withdraw, buy and sell commit 63ee650 Add token amount quantize and add issue to wallet commit c0b7e8d quantize added to Token class TokenDoesNotExists is raised in the Token class when token does not exists Exception InvalidTokenAmount is raised when amount to transfer or to issue is below precision new issue function added to wallet token precision is taken into account for transfer and issue TokenIssueNotPermitted is raised when an account which is not the token issuer tries to issue GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for steemengine - token precision taken into account and several new CLI commands added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-steemengine-token-precision-taken-into-account-and-several-new-cli-commands-added/"},{"title":"steemdesktop - a new pyQt5 desktop app for steem","text":"Repositoryhttps://github.com/holgern/steemdesktop steemdesktopsteemdesktop is a new QT5 python app that allows it to check the current state of an steem account. This release is a first step in which I’m learning how to use pyQt5. I will add more useful features. At the moment only an installer for windows is available download link.I will setup a CI and build installer also for OSX and linux for the next relase. Installing steemdesktop Running steemdesktopAfter starting steemdesktop, a steem user name can be set: When auto refresh is enabled, the account information are updated every 5 seconds.The steem name and the auto refresh box is stored and load on start. It is also possible to view account information about drugwars:Just press the Show drugwars stats button and wait. During waiting a notification is shown: Technology Stacksteemdesktop uses pyQt5 and the great fman build system which allows it to build Python GUIs for linux / macos / windows with pyQt5. RoadmapAt the moment the desktop app is on a very basic level. I’m planing to add step by step new features.I will explore how to create installer for linux / macos / windows using CI. Possible new features: store account history in a file for faster acccess show information about a steem post (votes and curation) stream the blockchain and notify on account related events Add more bookkeeping stats Improve the layout show steem-engine token Add a wallet Unlock the internally used beem wallet and allow to send token/steem How to contributeBugs and ideas can be added as issue to github: https://github.com/holgern/steemdesktopPull requests are welcome. GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemdesktop - a new pyQt5 desktop app for steem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemdesktop-a-new-pyqt5-desktop-app-for-steem/"},{"title":"steemdesktop - new layout and account history of the last 24h is shown","text":"Repositoryhttps://github.com/holgern/steemdesktop steemdesktopsteemdesktop is a new Qt5 python app that allows it to check the current state of an steem account. New featuresQt designer is used to layout the application I’m using now Qt designer to layout all the widget for Mainwindow.The ui file can then be converted into a py file by:12pyuic5 ui/mainwindow.ui -o src/main/python/ui_mainwindow.py This py file is then included and added to the main window by:1from ui_mainwindow import Ui_MainWindow and12345class MainWindow(QMainWindow, Ui_MainWindow): def __init__(self): super(QMainWindow, self).__init__() # Set up the user interface from Designer. self.setupUi(self) I added two progressbars for showing the vote power and the available RC. The SP/SBD/STEEM balance is shown using three QLabels. The upvote of the last 24 hours are shown in a QListWidget. Curation rewards and author rewards are shown below. Using a QRunnable to prevent GUI blockingI’m using the following class to automatically let a function run in a thread, in order to prevent gui blocking.123456789101112131415161718192021222324252627class Worker(QRunnable): &apos;&apos;&apos; Worker thread Inherits from QRunnable to handler worker thread setup, signals and wrap-up. :param callback: The function callback to run on this worker thread. Supplied args and kwargs will be passed through to the runner. :type callback: function :param args: Arguments to pass to the callback function :param kwargs: Keywords to pass to the callback function &apos;&apos;&apos; def __init__(self, fn, *args, **kwargs): super(Worker, self).__init__() # Store constructor arguments (re-used for processing) self.fn = fn self.args = args self.kwargs = kwargs @pyqtSlot() def run(self): &apos;&apos;&apos; Initialise the runner function with passed args, kwargs. &apos;&apos;&apos; self.fn(*self.args, **self.kwargs) The usage is then:123self.threadpool = QThreadPool()worker = Worker(self.refresh_account)self.threadpool.start(worker) In this case, the refresh_account function is started in a new thread. Parse and show account history of the last 24 hoursI’m continuously parse the account history every 15 s of the last 24 hours. Only new ops are stored and displayed. The block number, trx index, op index and the virtual op index is stored in self.append_hist_infoand used to skip older operations when starting from start_block - 3. This allows it reduce the number of api calls by preventing to reload the account history every time. The account history index itself is not reliable.123456789101112131415161718def append_account_hist(self): start_block = self.append_hist_info[&quot;start_block&quot;] trx_ids = self.append_hist_info[&quot;trx_ids&quot;] for op in self.hist_account.history(start=start_block - 3, use_block_num=True): if op[&quot;block&quot;] &lt; start_block: continue elif op[&quot;block&quot;] == start_block: if op[&quot;trx_id&quot;] in trx_ids: continue else: trx_ids.append(op[&quot;trx_id&quot;]) else: trx_ids = [op[&quot;trx_id&quot;]] start_block = op[&quot;block&quot;] self.account_history.append(op) self.append_hist_info[&quot;start_block&quot;] = start_block self.append_hist_info[&quot;trx_ids&quot;] = trx_ids Printing a notification on every new account history operationWhen the check box is set, a notification is send on every new account history op. Deploy binaries for linux and osx Finally, I managed it to automatically upload binaries for osx and linux. They can be downloaded from https://github.com/holgern/steemdesktop/releases RoadmapI’m planing store the complete account history in a file and use the account history for some calculations: curation rewards reputation over time SP over timeI’m also planing to enhance the notification system and to parse all steem blocks. This allow it to show mentions and other thinks. CommitsSimplify and improve all account history functions commit 4d0fa7b Move account refresh and update account hist to threads commit e7b210a New Worker class for running function in a thread timer call now the thread function, which prevent gui freezing The account history of the last 24 h is now loaded not at once, only new ops are loadedDisplay account history of the last 24 hours commit 5761814 Use qtdesigner to generate layout commit c04a832 show vote power, RC and balances latest upvotes, curation and author rewards layout is generated from ui file GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemdesktop - new layout and account history of the last 24h is shown’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemdesktop-new-layout-and-account-history-of-the-last-24h-is-shown/"},{"title":"Current state of steemrewarding.com","text":"steemrewarding.com is a open-source feature-rich automatic voting tool (github). It can be used to: follow other voters (trail voting) and upvote shortly after they vote upvote posts/comments based on rules cast delayed upvotes on posts/comments without rule (by post a command or by using the steemrewarding.com interface) upvote already paid out posts (by post a command or by using the steemrewarding.com interface) In order to use steemrewarding.com, posting authority has to be given to the @rewarding by https://app.steemconnect.com/authorize/@rewarding . I created a discord server for all topics regarding steemrewarding.com: discord invitation. Stats93 user created 739 rules for upvoting posts, 69 rules for upvoting comments and 16 trail vote rules. 8 user did only use the delayed upvote or upvote paid out posts feature. So in total, steemrewarding.com has 101 active users. In the last 7 days, 3532 time based votes and 928 votepower based votes were broadcasted.3008 different authors were upvoted through steemrewarding.The mean delay between the vote time and the specified vote time is 12.4 seconds. One round lasts around 15 seconds, so there is sufficient space for more users :). How to use steemrewarding to upvote authors when the vote power is full and idleIt is possible to created vote power based voting rules, which mean that the specified author upvoted when the vote power is above min_vp. It is possible to include or exclude specific tags and apps. For each author, one rule for posts and one rule for comments can be created. I’m a member of steembasicincome and upvoting their posts increases my rshares balance. So I created some vp based rules to upvote sbi (sbi2 - sbi10) posts when my VP is full and idle:It is possible to create a rule and copy it to other accounts by pressing the Copy link. So I started with a rule for sbi2: I set the maximum upvote delay to four days (5760 min.) and allow only posts upvotes. The upvote should only be triggered (I enabled enabled vote_when_vp_reached to achieve this) when my voting power is equal or abovemin_vp = 100%. I set vp_reached_order to 3. By this my other VP based rules with lower vp_reached_order are used with prioritoy. These rules for sbi2 to sbi10 are a good fall back, when I were not able to curate posts and my vote power reaches 100%. This page is synchronized from the post: ‘Current state of steemrewarding.com’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/6whidb-current-state-of-steemrewarding-com/"},{"title":"steem-scot - distributing token by comment command","text":"Repositoryhttps://github.com/holgern/steem-scot The python package steem-scot is an implementation for distribute Smart Contract Organizational Token (SCOT). It can be installed by 1$ (sudo) pip install steem-scot and depends on beem and steemengine. Distribute token by specific comment commandsI added a second way for distributing token. Every steem account which has sufficient Token, is allowed to issue token to other by writing a command into a reply. In this case, the scot-account was beembot and the scot-token is DRAGON. As I have more than 10 DRAGON, I’m allowed to write the !DRAGON command as reply. Whenever I’m doing this, the scot-account will issue a certain amount of the token to the parent author of my comment. An example is the DRAMA token, which works in this way. So everyone can have their own DRAMA by using the steem-scot package. UsageThe script should be running all day, so that new comments can be parsed and comments with the specified command can be found. 1$ scot_by_comment /path/to/config.json config.jsonIn order to be using the script, a config.json must be created. All fields must be included. Option Value scot_account steem account name, which should distribute the token scot_token token symbol, which should be distributed token_memo memo which is attached to each token transfer wallet_password Contains the beempy wallet password no_broadcast When true, no transfer is made min_staked_token Minimum amount of token a comment writer must have send_token_amount Amount of token that will be send sucess_reply_body Reply body, when token are send fail_reply_body Reply body, when no token are sent (not min_staked_token available) comment_command Command which must be included in a comment, to activate the bot The sucess_reply_body can have a placeholder %s, which will be filled with the comment parent author. token_memo can also have a placeholder %s, which is replaced by the command issuer. How does the script workThe posting and active key of the scot account, which will sent the token and reply to the comment with the command, needs to be stored in the beem wallet. The script parses all comment ops by:123for op in self.blockchain.stream(start=start_block, stop=stop_block, opNames=[&quot;comment&quot;], max_batch_size=50): cnt += 1 last_block_num = op[&quot;block_num&quot;] last_block_num is stored in a shelve:123data_db = shelve.open(&apos;data.db&apos;)data_db[&quot;last_block_num&quot;] = last_block_numdata_db.close() This allows it to start exactly there where the script was stopped. When a comment with a command was found (all comments which do not include the command string will be skipped):123456789101112131415161718192021if op[&quot;body&quot;].find(self.config[&quot;comment_command&quot;]) &lt; 0: continueif op[&quot;author&quot;] == self.config[&quot;scot_account&quot;]: continuetry: c_comment = Comment(op, steem_instance=self.stm) c_comment.refresh()except: logger.warn(&quot;Could not read %s/%s&quot; % (op[&quot;author&quot;], op[&quot;permlink&quot;])) continueif c_comment.is_main_post(): continueif abs((c_comment[&quot;created&quot;] - op[&apos;timestamp&apos;]).total_seconds()) &gt; 9.0: logger.warn(&quot;Skip %s, as edited&quot; % c_comment[&quot;authorperm&quot;]) continuealready_replied = Falsefor r in c_comment.get_all_replies(): if r[&quot;author&quot;] == self.config[&quot;scot_account&quot;]: already_replied = Trueif already_replied: continue It is then checked if the comment writer has sufficient token. If this is the case, a comment is replied with the stored sucess_reply_body from the config file and send_token_amount token are sent to the parent author. 1234567891011121314151617181920212223wallet = Wallet(c_comment[&quot;author&quot;], steem_instance=self.stm)token = wallet.get_token(self.config[&quot;scot_token&quot;])if token is None or float(token[&quot;balance&quot;]) &lt; self.config[&quot;min_staked_token&quot;]: reply_body = self.config[&quot;fail_reply_body&quot;]elif c_comment[&quot;parent_author&quot;] == c_comment[&quot;author&quot;]: reply_body = &quot;You cannot sent token to yourself.&quot;else: if &quot;%s&quot; in self.config[&quot;sucess_reply_body&quot;]: reply_body = self.config[&quot;sucess_reply_body&quot;] % c_comment[&quot;parent_author&quot;] else: reply_body = self.config[&quot;sucess_reply_body&quot;] if &quot;%s&quot; in self.config[&quot;token_memo&quot;]: token_memo = self.config[&quot;token_memo&quot;] % c_comment[&quot;author&quot;] else: token_memo = self.config[&quot;token_memo&quot;] sendwallet = Wallet(self.config[&quot;scot_account&quot;], steem_instance=self.stm) sendwallet.transfer(c_comment[&quot;parent_author&quot;], self.config[&quot;send_token_amount&quot;], self.config[&quot;scot_token&quot;], token_memo)reply_identifier = c_comment[&quot;authorperm&quot;]if self.config[&quot;no_broadcast&quot;]: logger.info(&quot;%s&quot; % reply_body)else: self.stm.post(&quot;&quot;, reply_body, author=self.config[&quot;scot_account&quot;], reply_identifier=reply_identifier)time.sleep(4) CommitsVersion 0.2.0, added a way to distribution token by comment commands commit b38664b GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steem-scot - distributing token by comment command’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-scot-distributing-token-by-comment-command/"},{"title":"steemrewarding.com - tables improved (links and sortable) and more options for trail vote rules","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. steemrewarding is currently used by 109 users which created 945 rules for posts, 70 rules for comments and 19 trail vote rules. In the last 7 days were 4381 time based votes and 865 vp based votes broadcasted through steemrewarding. Improved table layout which is now partly sortableThe header are now links when the column is sortable. When clicking on it, it calls the same site with a sort and a directionparameter:1https://steemrewarding.com/show_vote_log?sort=author&amp;direction=asc These parameter are parsed:12sort = request.args.get(&apos;sort&apos;, &apos;timestamp&apos;)reverse = (request.args.get(&apos;direction&apos;, &apos;desc&apos;) == &apos;desc&apos;) and the array is sorted:1234try: sorted_log = sorted(logs, key=lambda x: x[sort] or 0, reverse=reverse)except: sorted_log = logs The try/except prevent a crash when a wrong sort parameter was given. The header links are created by implementing a sort_url function in the Table class:12345678910class VotesLog(Table):...... allow_sort = True def sort_url(self, col_key, reverse=False): if col_key in [&quot;authorperm&quot;, &quot;author&quot;, &quot;vote_weight&quot;, &quot;vote_delay_min&quot;, &quot;voted_after_min&quot;]: direction = &apos;asc&apos; else: direction = &apos;desc&apos; return url_for(&apos;show_vote_log&apos;, sort=col_key, direction=direction) Authorperm and authors are now linksA new class was defined:12345678910111213141516171819class ExternalURLCol(Col): def __init__(self, name, url_attr, **kwargs): self.url_attr = url_attr super(ExternalURLCol, self).__init__(name, **kwargs) def td_contents(self, item, attr_list): text = self.from_attr_list(item, attr_list) url = self.from_attr_list(item, [self.url_attr]) return element(&apos;a&apos;, {&apos;href&apos;: &apos;https://steemit.com/&apos; + url, &apos;target&apos;: &quot;_blank&quot;, &apos;class&apos;: &apos;table&apos;}, content=text)class ExternalAuthorURLCol(Col): def __init__(self, name, url_attr, **kwargs): self.url_attr = url_attr super(ExternalAuthorURLCol, self).__init__(name, **kwargs) def td_contents(self, item, attr_list): text = self.from_attr_list(item, attr_list) url = self.from_attr_list(item, [self.url_attr]) return element(&apos;a&apos;, {&apos;href&apos;: &apos;https://steemit.com/@&apos; + url, &apos;target&apos;: &quot;_blank&quot;, &apos;class&apos;: &apos;table&apos;}, content=text) That can be used to create a field in the table by: 1author = ExternalAuthorURLCol(&apos;author&apos;, url_attr=&apos;author&apos;, attr=&apos;author&apos;, allow_sort = True) vote_when_vp_reached added to trail vote rulesIt is now possible to vote posts that were upvoted by a certain voter, when the vote power reaches a defined percentage. A trail vote rule with enabled vote_when_vp_reached will create a pending vote, when the voter to follow upvotes something. This new created pending vote has a min_vp and an enabled vote_when_vp_reached, which will keep the vote in a pending state until the vote power is suffient high or maximum_vote_delay_min is reached. exclude all authors that have an enabled vote ruleIt is possible to exclude all authors that have an enabled vote rule when following a vote trail.When the followed voter upvotes a main post, it is checked if a vote rule for a main post from the author exists. When the followed voter upvotes a comment, it is checked if a vote rule for a comment from the author exists. When a rule exists, the post/comment is skipped. maximum_vote_delay_min was added as parameter for a vote ruleIt is possible to define the maximum post/comment age. When defined, posts/comments are only upvoted when their age is younger than the defined one. The value is the maximum age in minutes. Commitsadd option exclude_authors_with_vote_rule that exclude authors that have an enabled rule for trail votes commit 5352b0esql database improved, vote_sbd fixed and new parameter added commit ba4b6a0Use BoolCol for boolean and add sortable tables to vote rules and trail vote rules commit c660046add sortable tables and add hyperlinks to authorperm and author commit 69d74d0add vote_when_vp_reached and vp_reached_order to trail vote rules commit 55c833badd maximum_vote_delay_min and add some more checks commit d7201f1 max_votes_per_day and max_votes_per_week is fixed get_account added in trail_vote_rule_storage.py get_voter added in vote_rule_storage.py GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - tables improved (links and sortable) and more options for trail vote rules’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-tables-improved-links-and-sortable-and-more-options-for-trail-vote-rules/"},{"title":"steem-scot - improved token distribution by comment commands","text":"Repositoryhttps://github.com/holgern/steem-scot New featuresMore than one scot account/token can specified and more options are availableThe config for scot_by_comment has now the following structure:123456789101112131415161718192021222324252627282930313233{ &quot;config&quot;: [{ &quot;scot_account&quot;: &quot;scotaccount&quot;, &quot;scot_token&quot;: &quot;SCOT&quot;, &quot;token_memo&quot;:&quot;Here is your token thanks to %s&quot;, &quot;reply&quot;: true, &quot;sucess_reply_body&quot;: &quot;Dear %s, The token are on its way!&quot;, &quot;fail_reply_body&quot;: &quot;You need to stake 10 token, in order to use this service.&quot;, &quot;no_token_left_body&quot;: &quot;Please retry later...&quot;, &quot;comment_command&quot;: &quot;!SCOT&quot;, &quot;user_can_specify_amount&quot;: true, &quot;maximum_amount&quot;: 10, &quot;min_staked_token&quot;: 50, &quot;usage_upvote_percentage&quot;: 0 }, { &quot;scot_account&quot;: &quot;token_issuer&quot;, &quot;scot_token&quot;: &quot;TOKEN&quot;, &quot;token_memo&quot;:&quot;You got a token&quot;, &quot;reply&quot;: true, &quot;sucess_reply_body&quot;: &quot;Here is your token&quot;, &quot;fail_reply_body&quot;: &quot;Sorry, you need more token in order to use this service.&quot;, &quot;no_token_left_body&quot;: &quot;Sorry, out of token, please retry later...&quot;, &quot;comment_command&quot;: &quot;!TOKEN&quot;, &quot;user_can_specify_amount&quot;: false, &quot;maximum_amount&quot;: 1, &quot;min_staked_token&quot;: 10, &quot;usage_upvote_percentage&quot;: 0 }], &quot;no_broadcast&quot;: false, &quot;print_log_at_block&quot;: 300, &quot;wallet_password&quot;: &quot;walletpass&quot;} Each comment is parsed and all specified commands are checked in a fore loop:123456token = Nonefor key in self.token_config: if op[&quot;body&quot;].find(self.token_config[key][&quot;comment_command&quot;]) &gt;= 0: token = keyif token is None: continue When a fitting config was found, a reply comment is broadcasted and the token are sent, when the user has sufficient (min_staked_token) tokens. There are more options available that can modify the behavior of the bot. Option Value scot_account steem account name, which should distribute the token scot_token token symbol, which should be distributed token_memo memo which is attached to each token transfer reply when true, a reply comment is broadcasted wallet_password Contains the beempy wallet password no_broadcast When true, no transfer is made min_staked_token Minimum amount of token a comment writer must have maximum_amount Maximum Amount of token that will be send user_can_specify_amount When true, the user can specify the amount to send up to maximum_amount, when false maximum_amount is always sent sucess_reply_body Reply body, when token are send fail_reply_body Reply body, when no token are sent (not min_staked_token available) no_token_left_body Reply body, when no token are left to send comment_command Command which must be included in a comment, to activate the bot usage_upvote_percentage When set to a percentage higher than 0, the comment with the command will be upvoted by the scot_account maximum_amount and user_can_specify_amountIt is now possible to allow user who staked sufficient tokens specify the amount of token the parent author should receive. Here, maximum_amount is set to 100 and user_can_specify_amount was set to true. The amount is parsed be the following code:123456789101112131415# parse amount when user_can_specify_amount is trueamount = self.token_config[token][&quot;maximum_amount&quot;]if self.token_config[token][&quot;user_can_specify_amount&quot;]: start_index = c_comment[&quot;body&quot;].find(self.token_config[token][&quot;comment_command&quot;]) stop_index = c_comment[&quot;body&quot;][start_index:].find(&quot;\\n&quot;) if stop_index &gt;= 0: command = c_comment[&quot;body&quot;][start_index + 1:start_index + stop_index] else: command = c_comment[&quot;body&quot;][start_index + 1:] command_args = command.replace(&apos; &apos;, &apos; &apos;).split(&quot; &quot;)[1:] if len(command_args) &gt; 0: try: amount = float(command_args[0]) except: logger.info(&quot;Could not parse amount&quot;) There is a new message when the token supply from the token sending account is empty123456# Load scot token balancescot_wallet = Wallet(self.token_config[token][&quot;scot_account&quot;], steem_instance=self.stm)scot_token = scot_wallet.get_token(self.token_config[token][&quot;scot_token&quot;]).....elif float(scot_token[&quot;balance&quot;]) &lt; amount: reply_body = self.token_config[token][&quot;no_token_left_body&quot;] When not sufficient tokens are left, a reply with no_token_left_body is broadcasted. The config file, the scot_account and the scot_token is checkedThe config file is now checked for missing parameters. It is also checked if the scot_account exists and if the token is valid:123456789101112131415161718192021config_cnt = 0necessary_fields = [&quot;scot_account&quot;, &quot;scot_token&quot;, &quot;min_staked_token&quot;, &quot;comment_command&quot;, &quot;token_memo&quot;, &quot;reply&quot;, &quot;sucess_reply_body&quot;, &quot;fail_reply_body&quot;, &quot;no_token_left_body&quot;, &quot;user_can_specify_amount&quot;, &quot;maximum_amount&quot;, &quot;usage_upvote_percentage&quot;]for conf in self.config[&quot;config&quot;]: config_cnt += 1 # check if all fields are set all_fields_ok = True for field in necessary_fields: if field not in conf: logger.warn(&quot;Error in %d. config: %s missing&quot; % (config_cnt, field)) all_fields_ok = False if not all_fields_ok: continue # Check if scot_account exists (exception will be raised when not) Account(conf[&quot;scot_account&quot;]) # Check if scot_token exists if token_list.get_token(conf[&quot;scot_token&quot;]) is None: logger.warn(&quot;Token %s does not exists&quot; % conf[&quot;scot_token&quot;]) continue self.token_config[conf[&quot;scot_token&quot;]] = conf Improved loggingIt can now be specified how often a logging message is printed by the print_log_at_block parameter. Every print_log_at_block block the following message will now be printed: The block number of the last log message is stored in a dict:12self.log_data = {&quot;start_time&quot;: 0, &quot;last_block_num&quot;: None, &quot;new_commands&quot;: 0, &quot;stop_block_num&quot;: 0, &quot;stop_block_num&quot;: 0, &quot;time_for_blocks&quot;: 0} This allows it to print exactly after the same amount of blocks a new log message. Commitsadapt readme to chagnes commit 83c4a40add better logging, it is possible to define the block diff at which a new logging messaage should be send commit 95fd97check configs and check if token and token_sender account exists commit 8b9d07c add option to upvote token command userIt is possible to user more than one account and more than one token in scot_by_comment commit e65564b datadir can be specified token amount to sent can be specified new message when no token are left GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steem-scot - improved token distribution by comment commands’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steem-scot-improved-token-distribution-by-comment-commands/"},{"title":"I'm rewriting  the amount class in beem for using fixed-point arithmetic","text":"I’m currently rewriting the Amount class of beem, my python library for steem. The amount class represents STEEM, SBD and VESTS amounts:1234567from beem.amount import Amounta = Amount(6.104, &quot;STEEM&quot;)print(a)print(float(a))print(a.amount)print(a.symbol)print(int(a)) will results in123456.104 STEEM6.1046.104STEEM6104 Currently, a float number is internally used torepresent STEEM and SBD amounts. I’m trying to improve this by using the decimal class. This changes may lead to different results in your code. What will changeSTEEM and SBD are fix point numbers, which means that they are basically integers. 6.104 STEEM can be represent as 6104. When I now divide or multiply, I could round the amount to an integer. When I now divide the amount by 6, and multiply it again by 6, I will have the following operations:1int(int(6104 / 6) * 6) which will be1int(1017 * 6) = 6102 Which has the meaning, we have 6.104 STEEM and want it divide by 6, so that 6 accounts can receive the same amount. As this is not possible, we need to send 0.002 STEEM first to @null and then it can be done. In the same way, when I try to add 0.0001 to 6.104 STEEM, the amount will not change, no matter who often I add 0.0001 to 6.104 STEEM. As 0.0001 STEEM are not valid, it means basically that I try to add 0 STEEM to 6.104 STEEM. Thus, the amount will not change, no matter how often I try to add 0.0001.1int(6104 + 0.1) = 6104 What will changeThe results of multiplication and addition may be different.1(6.104 STEEM + 0.0009) + 0.0009) = 6.104 STEEM Before, the output of this equation was 6.105 STEEM 1(6.104 STEEM / 6) * 6 = 6.102 STEEM Before, the output was 6.104 STEEM What do you think?Are my planed changes to the Amount class usefull? As the amount is a fixed point number, fixed point arithmetic should be applied, or? This page is synchronized from the post: ‘I’’m rewriting the amount class in beem for using fixed-point arithmetic’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/i-m-rewriting-the-amount-class-in-beem-for-using-fixed-point-arithmetic/"},{"title":"update for beem - amount in the Amount class is a Decimal instead of a float and bug-fix for account.get_balance()","text":"Repositoryhttps://github.com/holgern/beembeem is a python library for steem. beem has now 495 unit tests and a coverage of 70 %. The current version is 0.20.20.I created a discord channel for answering a question or discussing beem: https://discord.gg/4HM592VThe newest beem version can be installed by:1pip install -U beem or when using conda:1conda install beem beem can be updated by:1conda update beem New FeaturesThe amount in the Amount class is stored as Decimal and not as float anymoreThe amount in the Amount class is now stored as Decimal object:123456from beem.amount import Amounta = Amount(&quot;6.104 STEEM&quot;)a6.104 STEEMa.amountDecimal(&apos;6.104&apos;) For compatibility reasons, I have decided to keep the floating point arithmetic. For example, when I have 6.104 and I want to sent 1/6 out to the six different people, I should have a reminder of 0.002 in my wallet, as 6.102 is nearest number which is dividable through 6 without reminder.123456a = Amount(&quot;6.104 STEEM&quot;)send_amount = a / 6print(send_amount)for i in range(6): a -= send_amountprint(a) results in121.017 STEEM0.000 STEEM Seems that we have lost 0.002 STEEM. The reason is that the send_amount has a higher precision that the allowed one.12send_amount.amountDecimal(&apos;1.017333333333333333333333333&apos;) Fixed-point arithmeticIn order to fix this, I added a new option fixed_point_arithmetic, when set to True, the amount is rounded down after each operation to the allowed precision. 123456a = Amount(&quot;6.104 STEEM&quot;, fixed_point_arithmetic = True)send_amount = a / 6print(send_amount)for i in range(6): a -= send_amountprint(a) results in121.017 STEEM0.002 STEEM This time, we do not lost the 0.002 STEEM, as the amount in send_amount is rounded: 12send_amount.amountDecimal(&apos;1.017&apos;) But the following calculation may not lead to the expected results:1234a0.002 STEEM(a / 1000) * 10000.000 STEEM Fixed-point arithmetic combined with Floating-point arithmeticIt is also possible to combine both. In the following example, an object keeps its unlimited precision and works with floating-point arithmetic. The send_amount object is rounded down to the precision of 3. 123456a = Amount(&quot;6.104 STEEM&quot;)send_amount = Amount(a / 6, fixed_point_arithmetic=True)print(send_amount)for i in range(6): a -= send_amountprint(a) results in121.017 STEEM0.002 STEEM We were able to achieve the wanted results. In the same time, calculation as the following are still possible:12(a / 1000) * 10000.002 STEEM Casting to float, str and integerIt is possible to cast a Amount object to a float, in this case the amount is not rounded down: 12float(Amount(&quot;1.999 STEEM&quot;) / 2)0.9995 During casting the object to an integer, it is rounded down to the defined precision:12int(Amount(&quot;1.999 STEEM&quot;) / 2)999 The integer is used, when casting the amount object to a dict, which can be used for broadcasting using the appbase format:12(Amount(&quot;1.999 STEEM&quot;) / 2).json(){&apos;amount&apos;: &apos;999&apos;, &apos;nai&apos;: &apos;@@000000021&apos;, &apos;precision&apos;: 3} It is also possible to cast the amount object to a string:12str(Amount(&quot;1.999 STEEM&quot;) / 2)&apos;0.999 STEEM&apos; In both casting functions, the new quantize function is used:12345def quantize(amount, precision): # make sure amount is decimal and has the asset precision amount = Decimal(amount) places = Decimal(10) ** (-precision) return amount.quantize(places, rounding=ROUND_DOWN) The quantize grantees that casting an amount to a string and to an integer returns the same results. Bug fixesone-time private key on beempyI implemented the first part of the suggestion from @blockchainstudio (post where he suggested that a key should be entered when it is not stored in the wallet. I modified the unlock_wallet function and changed the wallet password promt as follow:12345678910password = click.prompt(&quot;Password to unlock wallet or posting/active wif&quot;, confirmation_prompt=False, hide_input=True)try: stm.wallet.unlock(password)except: try: stm.wallet.setKeys([password]) print(&quot;Wif accepted!&quot;) return True except: raise exceptions.WrongMasterPasswordException(&quot;entered password is not a valid password/wif&quot;) These changes allow it now to broadcast a operation as a transfer from an account by entering not the wallet key but the active key. This active key is temporary stored in RAM and deleted afterwards. Fix issue #171 - Account.get_balance function shows summed value of liquid balance and unclaimed rewardThe bug described here has been fixed. Calling the total_balances property had modified also the balances in the account object when either saving balance or reward balance was not empty. The reason was the usage of +=which had modify the object itself. By replacing the used += by a = which can be seen here: and by using a copy of the balance objects, this bug could be fixed:1234567891011@propertydef available_balances(self): &quot;&quot;&quot; List balances of an account. This call returns instances of :class:`beem.amount.Amount`. &quot;&quot;&quot; amount_list = [&quot;balance&quot;, &quot;sbd_balance&quot;, &quot;vesting_shares&quot;] available_amount = [] for amount in amount_list: if amount in self: available_amount.append(self[amount].copy()) return available_amount CommitsMake a copy of balance objects commit f0eaffe Adapt version number in docMake return argument in generator function compatible to python 2.7 commit 905201aFix cli unit test commit 921db97Convert Decimal to float in pricehistory commit 09d6bb7Fix unit test for the amount class commit 0a6f5afFix issue #171 - Account.get_balance function shows summed value of liquid balance and unclaimed reward commit ae53db5Add option to use fixed-point arithmetic on the Amount class commit 15aff5f When fixed_point_arithmetic is set to True, is the amount parameter always be rounded down to the asset precision Add Handling of multiplying with a Price object Both parameter are rounded down to the precision in all comparison operation as ==, Cast amount to float for calculations commit 1364f73Use decimal for amount in the Amount class commit bde5380 change the internal representation of amount from float to Decimal Round amount down to precision Adapt amount test to Decimal Round down all other number in all operatioImprove all generator functions in account commit 13424bd set num_retries to a default of 100, in order to prevent crashing when a wrong node is set Fix issue #162 - one-time use private key can be entered instead of unlocking the wallet commit 4a85f37 prepare next beem release and increase version number switch default chain to STEEMAPPBASE Github accounthttps://github.com/holgern This page is synchronized from the post: ‘update for beem - amount in the Amount class is a Decimal instead of a float and bug-fix for account.get_balance()’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-beem-amount-in-the-amount-class-is-a-decimal-instead-of-a-float-and-bug-fix-for-account-getbalance/"},{"title":"Scan all steem-engine blocks for specific data","text":"After reading the request of @rolandp (post), I found that a small python script, which is able to scan all blocks from the steem-engine sidechain would be very helpfull. I’m using my steemengine toolbox and will go through all blocks. I will check all market contracts with buy and sell action of the BTC token. I’m only interessted in sold token and not in action in which a order is put on the market. When the order was sucessfully, there are more than one entry in the attached logs. For a successful buy, there are: STEEMP transfer to the market token transfer from the market to the buyer STEEMP trasnfer to the seller For a successful sell, there are at least: token transfer to the market STEEMP transfer to the seller token transfer to the buyer For a placed order, there can only be either a successful buy or sell happen. The last placed order determine the type. In my script, I’m only parsing buy/sell actions that have at least 3 BTC/STEEMP movements. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768import timeimport loggingimport jsonfrom steemengine.api import Apifrom beem.block import Blocklog = logging.getLogger(__name__)logging.basicConfig(level=logging.INFO)if __name__ == &quot;__main__&quot;: api = Api() latest_block = api.get_latest_block_info() scan_token = [&apos;BTC&apos;] print(&quot;Scanning all blocks from 0 to %d...&quot; % latest_block[&apos;blockNumber&apos;]) steemp_payments = [] for block_num in range(latest_block[&apos;blockNumber&apos;]): block = api.get_block_info(block_num) if block_num % 1000 == 0: print(&quot;%.2f %%&quot; % (block[&quot;blockNumber&quot;]/latest_block[&apos;blockNumber&apos;] * 100)) for trx in block[&quot;transactions&quot;]: if trx[&quot;contract&quot;] not in [&apos;market&apos;]: continue if trx[&quot;action&quot;] not in [&apos;buy&apos;, &apos;sell&apos;]: continue logs = json.loads(trx[&quot;logs&quot;]) sender = trx[&quot;sender&quot;] payload = json.loads(trx[&quot;payload&quot;]) contract = trx[&quot;contract&quot;] action = trx[&quot;action&quot;] if action == &quot;sell&quot;: if &quot;events&quot; not in logs: continue elif len(logs[&quot;events&quot;]) == 1: continue else: token_found = False for transfer in logs[&quot;events&quot;]: if transfer[&quot;data&quot;][&quot;symbol&quot;] in scan_token: token_found = True if token_found: steem_block = Block(block[&quot;refSteemBlockNumber&quot;]) print(&quot;%d (%s) - %s:&quot; % (block[&quot;blockNumber&quot;], steem_block.json()[&quot;timestamp&quot;], trx[&apos;transactionId&apos;])) print(&quot;%s sold %s %s for %s&quot; % (trx[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;price&quot;])) for transfer in logs[&quot;events&quot;]: print(&quot; - %s transfers %s %s to %s&quot; % (transfer[&quot;data&quot;][&quot;from&quot;], transfer[&quot;data&quot;][&quot;quantity&quot;], transfer[&quot;data&quot;][&quot;symbol&quot;], transfer[&quot;data&quot;][&quot;to&quot;])) elif action == &quot;buy&quot;: if &quot;events&quot; not in logs: continue elif len(logs[&quot;events&quot;]) == 1: continue else: token_found = False for transfer in logs[&quot;events&quot;]: if transfer[&quot;data&quot;][&quot;symbol&quot;] in scan_token: token_found = True if token_found: steem_block = Block(block[&quot;refSteemBlockNumber&quot;]) print(&quot;%d (%s) - %s&quot; % (block[&quot;blockNumber&quot;], steem_block.json()[&quot;timestamp&quot;], trx[&apos;transactionId&apos;])) print(&quot;%s bought %s %s for %s&quot; % (trx[&quot;sender&quot;], payload[&quot;quantity&quot;], payload[&quot;symbol&quot;], payload[&quot;price&quot;])) for transfer in logs[&quot;events&quot;]: print(&quot; - %s transfers %s %s to %s&quot; % (transfer[&quot;data&quot;][&quot;from&quot;], transfer[&quot;data&quot;][&quot;quantity&quot;], transfer[&quot;data&quot;][&quot;symbol&quot;], transfer[&quot;data&quot;][&quot;to&quot;])) In order to run the script, steemengine must be install by1pip install steemengine The script can than be stored as parse_steemengine_blocks.py and run by:1python parse_steemengine_blocks.py The tokens for which the buys and sells should be printed, can be specified in this list:1scan_token = [&apos;BTC&apos;] for example1scan_token = [&apos;BTCP&apos;, &apos;LTCP&apos;, &apos;DOGEP&apos;, &apos;BCHP&apos;] Here are the results für the delisted BTC token:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666714875 (2019-03-09T06:30:39) - 86c034f0f5e40fdc66f6bfdf6809b57a75a5429astealthtrader bought 0.0001125 BTC for 8888.88800 - stealthtrader transfers 1.000 STEEMP to market - market transfers 0.0001125 BTC to stealthtrader - market transfers 1.000 STEEMP to fake.toshi15719 (2019-03-09T19:49:27) - d76a62b335f23285d1c25dff9d787cf26e366600stealthtrader bought 0.001125 BTC for 8888.88800 - stealthtrader transfers 10.000 STEEMP to market - market transfers 0.001125 BTC to stealthtrader - market transfers 10.000 STEEMP to fake.toshi16485 (2019-03-11T06:00:33) - eff811cfac89920df2d9905cd1244f47a80964a2stealthtrader bought 0.00043 BTC for 8888.88800 - stealthtrader transfers 3.822 STEEMP to market - market transfers 0.00043 BTC to stealthtrader - market transfers 3.822 STEEMP to fake.toshi21673 (2019-03-20T05:14:39) - 8b7933590d035ad3a120db618f24c8e49b238440stealthtrader bought 0.0001126 BTC for 8888.88800 - stealthtrader transfers 1.001 STEEMP to market - market transfers 0.0001126 BTC to stealthtrader - market transfers 1.001 STEEMP to fake.toshi21954 (2019-03-20T15:06:24) - acddca352289141bf2298fa5b5f1e376326eaf87y-o-u-t-h-m-e bought 0.0000001 BTC for 8888.88800 - y-o-u-t-h-m-e transfers 0.001 STEEMP to market - market transfers 0.0000001 BTC to y-o-u-t-h-m-e - market transfers 0.001 STEEMP to fake.toshi32085 (2019-03-23T23:45:24) - c5fb770d009445ae40b39e91af35fb91bd4f425eprofquax bought 0.000445 BTC for 8888.88800 - profquax transfers 3.956 STEEMP to market - market transfers 0.000445 BTC to profquax - market transfers 3.956 STEEMP to fake.toshi42019 (2019-04-03T00:02:36) - 6c83d6365ef021687b9c4fbca6dead5d1d311224stealthtrader bought 0.00107 BTC for 8888.88800 - stealthtrader transfers 9.511 STEEMP to market - market transfers 0.000445 BTC to stealthtrader - market transfers 3.954 STEEMP to profquax - market transfers 0.00062500 BTC to stealthtrader - market transfers 5.556 STEEMP to fake.toshi - market transfers 0.001 STEEMP to stealthtrader42256 (2019-04-03T07:06:03) - 58999a6f09f91b353f1acf2a499a4dda05241709monsterbuster bought 0.0009 BTC for 8888.88800 - monsterbuster transfers 8.000 STEEMP to market - market transfers 0.0009 BTC to monsterbuster - market transfers 8.000 STEEMP to fake.toshi42771 (2019-04-03T22:27:54) - ab3fd0a09a0cad9de376665b1079cda3014c4378followbtcnews bought .005 BTC for 8888.88800 - followbtcnews transfers 44.444 STEEMP to market - market transfers .005 BTC to followbtcnews - market transfers 44.444 STEEMP to fake.toshi43207 (2019-04-04T08:35:27) - 944e3a5605d580bf0fe5723d7f497d855afbddf5monsterbuster bought 0.0005 BTC for 8888.88800 - monsterbuster transfers 4.444 STEEMP to market - market transfers 0.0005 BTC to monsterbuster - market transfers 4.444 STEEMP to fake.toshi44068 (2019-04-05T09:28:06) - 0e465651c89d58ad813f631f9003f01021c8db77elamental bought 0.01102 BTC for 8888.88800 - elamental transfers 97.956 STEEMP to market - market transfers 0.01102 BTC to elamental - market transfers 97.956 STEEMP to fake.toshi This page is synchronized from the post: ‘Scan all steem-engine blocks for specific data’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/scan-all-steem-engine-blocks-for-specific-data/"},{"title":"NextColony - about the unique id generation and RNG","text":"As you may know, I’m part of the team working on NextColony, a true blockchain game on steem. A true blockchain game means for us, that our internal database can be deleted and we will be able to reconstruct the exact same game state as before by replaying all broadcasted custom_json and transfer operations. This does also mean that every broadcasted custom_json will be excepted, as long as it is valid (correct syntax, sufficient resources, dependencies were met,…). In order to allow replay and to have random events, the steem blocks itself will be used to generate a seed for the random generator. Every uid for planets, items, ships and missions will be generated from random numbers that have been seeded by the transaction id of the broadcasted transfer/custom_json. Thus, in a replay, the same random numbers will be generated and as the trx-id and other block ids are not predictable, random events and generated uids are not predictable. 123456789101112131415161718192021import randomimport base36import mathimport hashlibdef gererateSeed(block_trx, block_id, previous_id): seed = hashlib.md5((trx_id + block_id + previous_id).encode()).hexdigest() return seeddef generateUid(length): number = round((pow(36, length + 1) - random.random() * pow(36, length))) return base36.dumps(number).upper()def set_seed(seed): random.seed(a=seed, version=2)def get_random_range(start, end): return math.floor((random.random() * (end-start + 1)) + start)def uid_from_seed(prefix): return prefix+generateUid(10) Let’s check if this worksCurrently, we are doing some last tests before the official launch. The buy-able items are much cheaper in this test phase. So I’m buying a chest and will gift it. As each item has a uid, I will use the broadcasted transfer in order to predict the uid of the chest. The trx-id for the purchase is e8d4bf45ba82b16c75fb777d90f2520089bfa5aa and the block-number is 32060228. We will use this information to predict the uid of the item:The prefix of the Huge Chest is C212345678from beem.block import Blockblock = Block(32060228)trx_id = &quot;e8d4bf45ba82b16c75fb777d90f2520089bfa5aa&quot;prefix = &quot;C2-&quot;seed = gererateSeed(trx_id, block[&quot;block_id&quot;], block[&quot;previous&quot;])set_seed(seed)uid_item = uid_from_seed(prefix)print(uid_item) The result is:1C2-ZDDAKHIXGYO The predicted uid is correct and equal to the uid the backend of nextcolony had calculated. All used random events in NextColony are based on these functions. VOPSWhen unexplored space is explored during a mission, a new planet can be found. As the explorer has first to flight to the destination, which takes some time, the random numbers will be generated when the explorer will arrive. In nextcolony, we are doing this by using virtual operations. When the explorer is send, a VOPS is written to the database with a block timestamp. The VOPS is then triggered by the first block which has a timestamp which is higher then the stored one. The block_id and the previous ids are then taken from the block which is triggered by the VOPS. Auction is still running and game will start soonCurrently, it is possible to buy one of the last three legendary planets at our auction. When the auction is finished, the game will start at April 21, 2019 20:00:00 UTC See you in the game :) This page is synchronized from the post: ‘NextColony - about the unique id generation and RNG’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/nextcolony-about-the-unique-id-generation-and-rng/"},{"title":"How to use the logger class to filter out unwanted messages from beem","text":"When you run a python script which uses beem, you might have seen a lot of Retry RPC Call on node: https://steemd.minnowsupportproject.org (1/5)messages:` These messages indicate that the node was currently not available and the same node is retried again. Normally, it works then. The messages are only a problem when a lot of api calls are broadcasted, e.g.g when reading the complete account history of steembasicincome. You can use the logger class to get rid of these messages by increasing the logger level just for the beemapi.node module. Let’s start with a simply script that uses the logger class but without any configuration: 1234567891011121314151617#!/usr/bin/pythonfrom beem.account import Accountimport logginglogger = logging.getLogger(__name__)logger.setLevel(logging.INFO)logging.basicConfig()if __name__ == &apos;__main__&apos;: account = Account(&quot;steembasicincome&quot;) n = 0 logger.info(&quot;starting....&quot;) for op in account.history(): n += 1 logger.info(&quot;%s has %d history operations&quot; % (account[&quot;name&quot;], n)) After storing the script as use_logger1.py and running it by:1python use_logger1.py I’m getting really a lot of useless logging messages: Exclude logging messages from beemapi.nodeIt is possible to configure the logging class and increase the level of the beemapi.node module to the ERROR level:12345678910111213141516171819202122232425262728293031323334353637383940414243444546#!/usr/bin/pythonfrom beem.account import Accountimport loggingimport logging.configlogger = logging.getLogger(__name__)logging.basicConfig(level=logging.INFO)logging.config.dictConfig({ &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, # this fixes the problem &apos;formatters&apos;: { &apos;standard&apos;: { &quot;format&quot;: &quot;%(asctime)s [%(levelname)s] %(name)s: %(message)s&quot;, &quot;datefmt&quot;: &quot;%Y-%m-%d %H:%M&quot; }, }, &apos;handlers&apos;: { &apos;default&apos;: { &apos;level&apos;:&apos;INFO&apos;, &quot;formatter&quot;: &quot;standard&quot;, &apos;class&apos;:&apos;logging.StreamHandler&apos;, }, }, &apos;loggers&apos;: { &apos;beemapi.node&apos;: { &quot;level&quot;: &quot;ERROR&quot;, &quot;handlers&quot;: [&quot;default&quot;], &quot;propagate&quot;: False }, &apos;&apos;: { &apos;handlers&apos;: [&apos;default&apos;], &apos;level&apos;: &apos;INFO&apos;, &apos;propagate&apos;: True } }})if __name__ == &apos;__main__&apos;: account = Account(&quot;steembasicincome&quot;) n = 0 logger.info(&quot;starting....&quot;) for op in account.history(): n += 1 logger.info(&quot;%s has %d history operations&quot; % (account[&quot;name&quot;], n)) After storing it as use_logger2.py and running it, the logging output contains only information that are useful: Configuring the logging class in an external fileIt is also possible to store the configuration in an external logging.json file:1234567891011121314151617181920212223242526272829{ &quot;version&quot;: 1, &quot;disable_existing_loggers&quot;: false, &quot;formatters&quot;: { &quot;simple&quot;: { &quot;format&quot;: &quot;%(asctime)s [%(levelname)s] %(name)s: %(message)s&quot;, &quot;datefmt&quot;: &quot;%Y-%m-%d %H:%M&quot; } }, &quot;handlers&quot;: { &quot;default&quot;: { &quot;level&quot;:&quot;INFO&quot;, &quot;formatter&quot;: &quot;simple&quot;, &quot;class&quot;:&quot;logging.StreamHandler&quot; } }, &quot;loggers&quot;: { &quot;beemapi.node&quot;: { &quot;level&quot;: &quot;ERROR&quot;, &quot;handlers&quot;: [&quot;default&quot;], &quot;propagate&quot;: false }, &quot;&quot;: { &quot;handlers&quot;: [&quot;default&quot;], &quot;level&quot;: &quot;INFO&quot; } }} and reading it in the python script:1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/pythonfrom beem.account import Accountimport loggingimport logging.configimport osimport jsonlogger = logging.getLogger(__name__)logging.basicConfig(level=logging.INFO)def setup_logging( default_path=&apos;logging.json&apos;, default_level=logging.INFO): &quot;&quot;&quot;Setup logging configuration &quot;&quot;&quot; path = default_path if os.path.exists(path): with open(path, &apos;rt&apos;) as f: config = json.load(f) logging.config.dictConfig(config) else: logging.basicConfig(level=default_level)if __name__ == &apos;__main__&apos;: setup_logging(&quot;./logging.json&quot;) account = Account(&quot;steembasicincome&quot;) n = 0 logger.info(&quot;starting....&quot;) for op in account.history(): n += 1 logger.info(&quot;%s has %d history operations&quot; % (account[&quot;name&quot;], n)) This allows it to use the same configuration in multiple projects. After storing it under use_logging3.py in the same directory as the logging.json file, it can be started by python use_logging3.py and produces the following output: Formation of the logging outputThe logging output format was set by12&quot;format&quot;: &quot;%(asctime)s [%(levelname)s] %(name)s: %(message)s&quot;,&quot;datefmt&quot;: &quot;%Y-%m-%d %H:%M&quot; More variables can be found in the logger documentation. The different options for datefmt can be found here. This page is synchronized from the post: ‘How to use the logger class to filter out unwanted messages from beem’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-use-the-logger-class-to-filter-out-unwanted-messages-from-beem/"},{"title":"NextColony -  list of custom_json commands","text":"NextColony is a true blockchain game on steem, thus almost all actions are triggered by custom_json operations (buying an item is initiated by a transfer). In the following you will find a list of commands that will be supported at launch. More commands will follow afterwards. Structure of a custom_json operationA custom_json command consists of an id and a json field. All commands in nextcolony have the same id:1nextcolony and the json field has the following structure:1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;newuser&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;holger80&quot;}} where username is the username (currently not used and can be skipped).type defines the command type and command consists of a dict with the keys tr_var1 to tr_var8.The command is applied to the user defined in the required_posting_auths field. newuser1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;newuser&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;holger80&quot;}} Creates a new game account with the steem account name.The command uses one field: tr_var1: steem username enhance1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;enhance&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;holger80&quot;,&quot;tr_var2&quot;:&quot;P-ZN2FTQ9F3W0&quot;,&quot;tr_var3&quot;:&quot;coalmine&quot;}} Starts learning of a skill which is necessary for building a higher level or being able to build ships. tr_var1: username, who will learn the skill tr_var2: planet uid from which the resources are taken tr_var3: skill name Skill names are: depots and mines12coalmine, oremine, coppermine, uraniummine,coaldepot, oredepot, copperdepot, uraniumdepot special buildings1base, researchcenter, shipyard booster1coalbooster, orebooster, copperbooster, uraniumbooster ships1Explorer, Transporter, Corvette, Frigate, Destroyer, Cruiser, Battlecruiser, Carrier, Dreadnought upgrade1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;upgrade&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;P-ZN2FTQ9F3W0&quot;,&quot;tr_var2&quot;:&quot;researchcenter&quot;}} Starts the upgrade of a building. Conditions (sufficient resources and sufficient skill level) must be met. tr_var1: planet uid from which the resources are taken and on which the building is upgraded tr_var2: building name Building names are: depots and mines12oredepot, copperdepot, coaldepot, uraniumdepot, oremine, coppermine, coalmine, uraniummine special buildings1shipyard, base, researchcenter buildship1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;buildship&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;P-ZN2FTQ9F3W0&quot;,&quot;tr_var2&quot;:&quot;explorership&quot;}} Builds one ship when the conditions (resources, no other ship is build, shipyard level and ship skill level) are met. tr_var1: planet uid from which the resources are taken and on which the ship is build tr_var2: ship name Possible ship names are:12explorership, transportship, corvette, frigate, destroyer,cruiser, battlecruiser, carrier, dreadnought explorespace1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;explorespace&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;P-ZN2FTQ9F3W0&quot;,&quot;tr_var2&quot;:53,&quot;tr_var3&quot;:-317}} Starts a exploration mission, a explorer must be available and ready on the planet. tr_var1: planet uid from which the explorership starts and the uranium is taken for providing fuel for the flight tr_var2: horizontal space coordinate tr_var3: vertical space coordinate transport1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;transport&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:2,&quot;tr_var2&quot;:&quot;P-ZN2FTQ9F3W0&quot;,&quot;tr_var3&quot;:&quot;52&quot;,&quot;tr_var4&quot;:&quot;-321&quot;,&quot;tr_var5&quot;:15,&quot;tr_var6&quot;:15,&quot;tr_var7&quot;:15,&quot;tr_var8&quot;:15}} Transports resources to a location and returns to the start position afterwards. tr_var1: number of transporter which should be used, must be available and ready on the planet tr_var2: planet uid from which the transportship starts and the resources are taken tr_var3: horizontal space coordinate of a planet tr_var4: vertical space coordinate of a planet tr_var5: amount of coal (can be a positive float or 0) tr_var6: amount of ore (can be a positive float or 0) tr_var7: amount of copper (can be a positive float or 0) tr_var8: amount of uranium (can be a positive float or 0) activate1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;activate&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;C3-ZSQFKQ5LW9S&quot;,&quot;tr_var2&quot;:&quot;P-ZN2FTQ9F3W0&quot;}} Activates an item, the effect depends on the item. tr_var1: item uid, must be owned by the user tr_var2: planet uid on which the item is activated giftitem1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;giftitem&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;C3-ZUA1B4B7UPS&quot;,&quot;tr_var2&quot;:&quot;holger.random&quot;}} Gifts an item to another player. tr_var1: item uid, must be owned by the user tr_var2: username to which the item is gifted NextColony will start on April 21, 2019 20:00:00 UTC See you in the game :) This page is synchronized from the post: ‘NextColony - list of custom_json commands’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/nextcolony-list-of-customjson-commands/"},{"title":"steemrewarding.com - vote delay optimization added","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, when posting authority was given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. steemrewarding is currently used by 126 users which created 1193 rules for posts, 85 rules for comments and 24 trail vote rules. In the last 7 days were 4244 time based votes and 1986 vp based votes broadcasted through steemrewarding. New FeaturesNew rules can be directly created by entering steemrewarding.com/@author in the browserWhen entering a steem account name after stemrewarding.com, a new rule can be directly be created. For example, https://steemrewarding.com/@utopian-iowill open the new rule editor: Vote delay optimizationA user of steemrewarding.com can now optimize the vote delay time for all time based vote rules automatically. The optimization must be enabled in https://steemrewarding.com/settings: When enabled, each vote_log is analyed in the calc_curation_performance.py script.12345678910best_performance = 0best_vote_delay_min = 0for v in c[&quot;active_votes&quot;]: v_SBD = stm.rshares_to_sbd(int(v[&quot;rshares&quot;])) if v_SBD &gt; 0 and int(v[&quot;rshares&quot;]) &gt; rshares * 0.5: p = float(curation_rewards_SBD[&quot;active_votes&quot;][v[&quot;voter&quot;]]) / v_SBD * 100 if p &gt; best_performance: best_performance = p best_vote_delay_min = ((v[&quot;time&quot;]) - c[&quot;created&quot;]).total_seconds() / 60 All given votes to the upvoted post/comment that have at least half the rshares of the rule creator are analyed. When there is a single vote that have a better performance, its vote delay time and its performance is stored. The values are shown in the vote log https://steemrewarding.com/show_vote_log: A vote delay time is optimized when the actual vote delay is near the set vote delay (time difference below 1 minute) optimize_vote_delay is enabled unter settings disable_optimization is not enabled for the rule the initial vote delay is between minimum_vote_delay and maximum_vote_delay minimum_vote_delay and maximum_vote_delay can be set at steemrewarding.com/settings When a best_performance and best_vote_delay_min was found for a vote rule log entry, the vote delay is optimized by:123456789101112131415161718192021minimum_vote_delay = acc_data[&quot;minimum_vote_delay&quot;]maximum_vote_delay = acc_data[&quot;maximum_vote_delay&quot;]optimize_threshold = 1 + (acc_data[&quot;optimize_threshold&quot;] / 100)optimize_ma_length = acc_data[&quot;optimize_ma_length&quot;] vote_rule = voteRulesTrx.get(vote_log[&quot;voter&quot;], c[&quot;author&quot;], c.is_main_post())if vote_rule is not None and not vote_rule[&quot;disable_optimization&quot;]: vote_delay_min = vote_rule[&quot;vote_delay_min&quot;] if best_performance &gt; performance * optimize_threshold and vote_delay_min &lt;= maximum_vote_delay and vote_delay_min &gt;= minimum_vote_delay: if optimize_ma_length &gt; 1: vote_delay_min = (vote_delay_min * (optimize_ma_length - 1) + best_vote_delay_min) / optimize_ma_length else: vote_delay_min = best_vote_delay_min if vote_delay_min &gt; maximum_vote_delay: vote_delay_min = maximum_vote_delay elif vote_delay_min &lt; minimum_vote_delay: vote_delay_min = minimum_vote_delay voteRulesTrx.update({&quot;voter&quot;: vote_log[&quot;voter&quot;], &quot;author&quot;: c[&quot;author&quot;], &quot;main_post&quot;: c.is_main_post(), &quot;vote_delay_min&quot;: vote_delay_min}) vote_log[&quot;optimized_vote_delay_min&quot;] = vote_delay_min When the optimal vote delay differs less than optimize_threshold percentage from the old one, the vote delay is not changed. This prevents that the vote delay time from jittering. A simplified moving average calculation is then used to update the vote delay time. The influence of the optimal voting time is set by optimize_ma_length. When it is set to 20, it will take 20 steps approach a new optimum. He is an example, that show how it works:I set the vote delay to 13 minutes, the best vote delay is at 8.2 minutes. The new vote delay is then:(( optimize_ma_length - 1) * 13 min + 8.2 min) / optimize_ma_lengthwhich is for optimize_ma_length=20 12.76 minutes. This means that the vote delay for my rule is reduced in order to approach the optimal vote time. The parameter optimize_ma_length and optimize_threshold can be set in steemrewarding.com/settings CommitsAdd vote optimization for all time based votes commit 4bc0826Add option to add a rule by adding an account to steemrewarding.com (e.g. https://steemrewarding.com/@holger80) commit 1585cf1GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - vote delay optimization added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-vote-delay-optimization-added/"},{"title":"NextColony - first update has arrived","text":"After working hard on the backend, a new update of the backend was rolled out today. A complete replay with an empty Database was performed from the genesis block 32247771. This assures that the update do not break something. Minor fixes and changes The explorer lost rate was set to 5%. This means that in 5 % of all explore space missions, the explorer will be lost and will not return. usernames will be checked when gifting items The log output was reduced Mission controlThere is a new skill, which limits the number of ongoing missions. A mission can be transporting of resources, exploring space or deploying ships. Each level of missioncontrol allows one more parallel mission. It is not yet visible on the frontend, but it can be already enhanced with the enhance custom_json command. New giftplanet custom_jsonIt is now possible to gift planets to other users. Only explored planets can be gifted. The planet itself will not move and all buildings and its resources will remain unchanged. We made an exception for legendary planet buyers, they are allowed to gift their legendary start planet. As a player must have a start planet, they will then receive a new start planet at a new location. Today, urachem used this feature and gifted his legendary planet to dachcolony. The command is:1{&quot;username&quot;: &quot;urachem&quot;, &quot;type&quot;: &quot;giftplanet&quot;, &quot;command&quot;: {&quot;tr_var1&quot;: &quot;1003&quot;, &quot;tr_var2&quot;: &quot;dachcolony&quot;}} tr_var1: planet id of the planet that should be gifted tr_var2: username will receive the planet and will be the new owner We are considering enforcing required_auths for the custom_json, in order to increase security. It is possible to broadcast the cusotm_json with steemconnect:https://app.steemconnect.com/signby entering:The custom_json is not yet supported by the frontend. Deploy ships to other planetsThis new custom_json will move a fleet of up to 25 ships to a new planet and changes the ownership of the ships to the owner of the planet on which the ships have arrived. It is possible to transport resources to the coordinates. 1{&quot;username&quot;:&quot;holger80&quot;,&quot;type&quot;:&quot;deploy&quot;,&quot;command&quot;:{&quot;tr_var1&quot;:&quot;S-ZKZHNR9O31C;S-ZRUVBR6EXGW&quot;,&quot;tr_var2&quot;:&quot;-265&quot;,&quot;tr_var3&quot;:&quot;-38&quot;,&quot;tr_var4&quot;:&quot;0&quot;,&quot;tr_var5&quot;:&quot;0&quot;,&quot;tr_var6&quot;:&quot;0&quot;,&quot;tr_var7&quot;:&quot;100&quot;}} tr_var1: List of ship id, seperated by ; tr_var2: horizontal space coordinate of a planet tr_var3: vertical space coordinate of a planet tr_var4: amount of coal (can be a positive float or 0) tr_var5: amount of ore (can be a positive float or 0) tr_var6: amount of copper (can be a positive float or 0) tr_var7: amount of uranium (can be a positive float or 0) The arrival time is determined by the slowest ship. The ownership is changed when the ships have arrived on the destination. This page is synchronized from the post: ‘NextColony - first update has arrived’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/nextcolony-first-update-has-arrived/"},{"title":"steemrewarding.com - several improvements","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, using several parameters. It is possible to automatically optimize vote delay times in order to increase curation rewards. Posting authority needs to be given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. steemrewarding is currently used by 131 users which created 2200 rules for posts, 88 rules for comments and 27 trail vote rules. In the last 7 days, 8477 time based votes and 1904 vp based votes were broadcasted through steemrewarding. New FeaturesVotes are optimized withing minimum_vote_delay and maximum_vote_delayVotes are only optimized within both parameter, which can be set in the settings page. This prevents that vote which are placed outside the 15 minute are optimized.123456789if best_performance &gt; performance * optimize_threshold and vote_delay_min &lt;= maximum_vote_delay + 0.1 and vote_delay_min &gt;= minimum_vote_delay -0.1: if optimize_ma_length &gt; 1: vote_delay_min = (vote_delay_min * (optimize_ma_length - 1) + best_vote_delay_min) / optimize_ma_length else: vote_delay_min = best_vote_delay_min if vote_delay_min &gt; maximum_vote_delay: vote_delay_min = maximum_vote_delay elif vote_delay_min &lt; minimum_vote_delay: vote_delay_min = minimum_vote_delay optimization calculation performance improvedThe optimization performance was improved by excluding votes from vote trails and by adding a new field vote_delay_optimized to the vote_log table. Votes that were not yet optimized have vote_delay_optimized set to True. In each voting round, 4 votes with this flag are optimized when the vote delay is greater than 15 minutes. As each vote is only optimized once, this speed up the process. The frontend for opening permlinks and authors urls is changeableTwo new Col classes were constructed from a Col class, in which the frondend can be be given as parameter. The frontend parameter can be changed in https://steemrewarding.com/settings 123456789101112131415161718192021class ExternalURLCol(Col): def __init__(self, name, url_attr, frontend, **kwargs): self.url_attr = url_attr self.frontend = frontend super(ExternalURLCol, self).__init__(name, **kwargs) def td_contents(self, item, attr_list): text = self.from_attr_list(item, attr_list) url = self.from_attr_list(item, [self.url_attr]) return element(&apos;a&apos;, {&apos;href&apos;: self.frontend + url, &apos;target&apos;: &quot;_blank&quot;, &apos;class&apos;: &apos;table&apos;}, content=text)class ExternalAuthorURLCol(Col): def __init__(self, name, url_attr, frontend, **kwargs): self.url_attr = url_attr self.frontend = frontend super(ExternalAuthorURLCol, self).__init__(name, **kwargs) def td_contents(self, item, attr_list): text = self.from_attr_list(item, attr_list) url = self.from_attr_list(item, [self.url_attr]) return element(&apos;a&apos;, {&apos;href&apos;: self.frontend + &apos;@&apos; + url, &apos;target&apos;: &quot;_blank&quot;, &apos;class&apos;: &apos;table&apos;}, content=text) note field addedA new field was added to the vote rule table, which can be used to store notes and information about a rule. votes per day parameter is switchable between sliding and once a day The maximum allowed vote rules per day are now switchable between a sliding 24h window and once a day (0:0:0 UTC).1234if sliding_window: date_24h_before = datetime.utcnow() - timedelta(hours=24)else: date_24h_before = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0) New optimize_vote_delay_slope parameterA new parameter was added, which can be set in the settings page. When this parameter is greater than 0, it changes the vote weight during vote delay optimization. 1vote_weight = vote_weight + (vote_delay_min - old_vote_delay_min) * acc_data[&quot;optimize_vote_delay_slope&quot;] This parameter can be used to adapt the vote weight for the case that the vote delay optimum is far way from 15 minutes.Let’s make an example: optimize_vote_delay_slope is set to 3%/min, vote delay is 15 min and vote weight is 50%. When the optimum is at 1 minute, the vote weight is changed to150% + (1 - 15) * 3 % = 8 % This prevents that votes with high weight are broadcast within the first minutes that have a high vote penalty and that reduce the curation rewards for all other voters. The parameter can be used to reduce the vote weight when the vote delay optimization shifts the vote to the front. vote round delay time included into vote delayA new parameter voting_round_sec was added to the config file, which is the time of a vote round in seconds. The half vote round is then subtracted from the vote_delay_min parameter of a vote, so that the vote is broadcasted voting_round_sec / 2.0 / 60 minutes earlier. By this, the mean vote delay could be reduced to 1.17 seconds. 12if age_min &lt; pending_vote[&quot;vote_delay_min&quot;] - voting_round_sec / 2.0 / 60: continue Rules are editable from the vote logIt is possible to directly edit a rule from the vote log page. Commitsadd voting_round_sec buffer to maximum_vote_delay_min commit 1ff8331Add new optimize_vote_delay_slope parameter for adapting the vote weight commit 939e0f3 Add Edit link to vote log, necessary perameter (author, main_post and voter_to_follow) are added to the databasesAdd note and add setting for switching votes_per_day to once a day/once every 24h commit de35c93The frontend for opening permlinks and authors urls is changeable now commit 9e7c797 the rshares_divider can be set in settingsOptimize Vote time by considering vote round duration commit 647b02eh Improve curaton reward calculation Add trail_vote info to pending_votes and vote_log GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - several improvements’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com/"},{"title":"SPUD - powering up with beempy","text":"Today is SPUD (Steem Power Up Day) on steem and I decided to be part on it. Of course I will use beempy to powering up. 1beempy powerup -a holger80 500 This will power up 500 STEEM. Let’s see if this will work :): Everything worked, it is really easy to power up using beempy. This page is synchronized from the post: ‘SPUD - powering up with beempy’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/spud-powering-up-with-beempy/"},{"title":"nextcolony - mission control skill has been slightly modified","text":"As you might know, the mission control skill in NextColony limits the number of ongoing missions. An update was released today, which modifies the behavior of the mission control skill in NextColony. Before the update, it was implemented that the number of missions that could be active is mission control level * 2, and when the skill level was zero, one mission could still be running. As this could be exploited by gifting planets to alt-accounts (when each alt-account, who has build or received an explorer on this planet, started an explore mission and gifted the planet to the next alt-account, the number of parallel running explore mission is equal the number of alt-accounts. The mission control skill can be 0 for all alt-accounts), we decided to modify the skill. The number of active missions depends now on the start planet. The start planet is the planet which is shown when logging in. Only one planet can have this attribute and normally the first received planet is the start planet. mission control skill level * 2 + 1 mission can be active when starting them from the start planet. Otherwise mission control skill level * 2 missions can be active. Thus, when gifting a planet to another account that has mission control level 0, it is not possible anymore for the account to start a mission from the gifted planet. Only when the account has learned mission control level 1, a mission can be started from the gifted planet. This page is synchronized from the post: ‘nextcolony - mission control skill has been slightly modified’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/nextcolony-mission-control-skill-has-been-slightly-modified/"},{"title":"NextColony - checking if the 8 explored planets are valid","text":"Some users have been wondering why 6 of 8 explored planets are near another planet: The chance to find a new planet is 1%. At the moment 930 space coordinates have been explored and 8 planets were found. The current rate is 0.86 %, which is slightly below 1%. The chance of finding only empty space around the start planet is199/100 * 99/100 * 99/100 * 99/100 * 99/100 * 99/100 * 99/100 * 99/100 = 0.9227 Thus the chance of finding a planet near the start planet is 0.0774, or 1 of 12.9 found planets should be near the start planet. At the moment 6 of 8 are near the start planet. This can be explained by the law of large numbers. The law says that the sample average converges to the expected value for Infinitive trials. So when more and more planets have been found, we should converge to a rate of 1 to 12.9 explored planets that have been explored near the start planet. Checking all found planetsWith the following python script, it is possible to validate the 8 found planets. In order to check if a planet is valid, the transaction id of the explorespace custom_json and the block_num of the virtual explore operation is needed. When the explorespace mission is started, the distance to the goal is calculated and the arrival time is determined. This arrival time defines then the block number of the virtual explore operation. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192from beem.block import Blockimport hashlibimport datetimeimport randomfrom collections import OrderedDictdef set_seed(seed): random.seed(a=seed, version=2)def get_is_empty_space(): return random.random() &gt;= 0.01def get_was_planet_found(block_num, trx_id): block = Block(block_num) seed = hashlib.md5((trx_id + block[&quot;block_id&quot;] + block[&quot;previous&quot;]).encode()).hexdigest() set_seed(seed) found = not get_is_empty_space() return foundif __name__ == &apos;__main__&apos;: planet_found_list = [OrderedDict([(&apos;id&apos;, 35), (&apos;user&apos;, &apos;reggaemuffin&apos;), (&apos;date&apos;, datetime.datetime(2019, 4, 30, 13, 56, 33)), (&apos;c_hor&apos;, 183), (&apos;c_ver&apos;, -175), (&apos;trx_id&apos;, &apos;ca7093442b53ea5186b4ebecb56570e27e68ed58&apos;), (&apos;block_num&apos;, 32498931), (&apos;planet_id&apos;, &apos;P-ZT52Y2YAEOW&apos;)]), OrderedDict([(&apos;id&apos;, 81), (&apos;user&apos;, &apos;mancer-sm-alt&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 1, 6, 50, 45)), (&apos;c_hor&apos;, 91), (&apos;c_ver&apos;, 267), (&apos;trx_id&apos;, &apos;dcd914ae73de12a876b9c9688ae54d7574fc79fa&apos;), (&apos;block_num&apos;, 32519195), (&apos;planet_id&apos;, &apos;P-ZIY07VLIZXC&apos;)]), OrderedDict([(&apos;id&apos;, 273), (&apos;user&apos;, &apos;flauwy&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 2, 23, 6, 18)), (&apos;c_hor&apos;, -227), (&apos;c_ver&apos;, 209), (&apos;trx_id&apos;, &apos;29dcd2d88eba9aaa2f413e3a36fac83a69e72a33&apos;), (&apos;block_num&apos;, 32567483), (&apos;planet_id&apos;, &apos;P-ZU1JXAEU4KW&apos;)]), OrderedDict([(&apos;id&apos;, 283), (&apos;user&apos;, &apos;hanzappedfirst&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 3, 0, 56, 48)), (&apos;c_hor&apos;, 78), (&apos;c_ver&apos;, -198), (&apos;trx_id&apos;, &apos;3fddd68f03eedae6dd93970c9d15cc5ff6f0db01&apos;), (&apos;block_num&apos;, 32569691), (&apos;planet_id&apos;, &apos;P-ZBPUNEE2NMO&apos;)]), OrderedDict([(&apos;id&apos;, 438), (&apos;user&apos;, &apos;kissi&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 4, 5, 40, 51)), (&apos;c_hor&apos;, -221), (&apos;c_ver&apos;, 175), (&apos;trx_id&apos;, &apos;c1f4e868160ca9160f28d426c2738429a8d7ee0e&apos;), (&apos;block_num&apos;, 32604121), (&apos;planet_id&apos;, &apos;P-Z8LN8NEOGE8&apos;)]), OrderedDict([(&apos;id&apos;, 737), (&apos;user&apos;, &apos;uraniumfuture&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 5, 18, 51, 15)), (&apos;c_hor&apos;, -35), (&apos;c_ver&apos;, -217), (&apos;trx_id&apos;, &apos;b808dafaa97bf34f17fe7a71c20ed6ebb767d103&apos;), (&apos;block_num&apos;, 32648704), (&apos;planet_id&apos;, &apos;P-ZCQ6XF6HTSW&apos;)]), OrderedDict([(&apos;id&apos;, 797), (&apos;user&apos;, &apos;fantasycrypto&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 6, 0, 39, 13)), (&apos;c_hor&apos;, -290), (&apos;c_ver&apos;, -42), (&apos;trx_id&apos;, &apos;646c4548d666293e547d4ab0f19f5a1e38930c3a&apos;), (&apos;block_num&apos;, 32655660), (&apos;planet_id&apos;, &apos;P-Z1L0K1F5PPS&apos;)]), OrderedDict([(&apos;id&apos;, 866), (&apos;user&apos;, &apos;lordvader&apos;), (&apos;date&apos;, datetime.datetime(2019, 5, 6, 7, 28, 19)), (&apos;c_hor&apos;, -289), (&apos;c_ver&apos;, -167), (&apos;trx_id&apos;, &apos;e03e7a66310f67b69e82714a071892dd144caf7c&apos;), (&apos;block_num&apos;, 32663837), (&apos;planet_id&apos;, &apos;P-ZHYWH6QELGG&apos;)])] print(&quot;Found %d planets&quot; % len(planet_found_list)) print(&quot;| vops block num | custom_json trx_id | uid | valid |&quot;) print(&quot;| --- | --- | --- | --- |&quot;) for data in planet_found_list: found = get_was_planet_found(data[&quot;block_num&quot;], data[&quot;trx_id&quot;]) print(&quot;| %d | %s | %s | %s |&quot; % (data[&quot;block_num&quot;], data[&quot;trx_id&quot;], data[&quot;planet_id&quot;], str(found))) The result of the script is the following: vops block num custom_json trx_id uid valid 32498931 ca7093442b53ea5186b4ebecb56570e27e68ed58 P-ZT52Y2YAEOW True 32519195 dcd914ae73de12a876b9c9688ae54d7574fc79fa P-ZIY07VLIZXC True 32567483 29dcd2d88eba9aaa2f413e3a36fac83a69e72a33 P-ZU1JXAEU4KW True 32569691 3fddd68f03eedae6dd93970c9d15cc5ff6f0db01 P-ZBPUNEE2NMO True 32604121 c1f4e868160ca9160f28d426c2738429a8d7ee0e P-Z8LN8NEOGE8 True 32648704 b808dafaa97bf34f17fe7a71c20ed6ebb767d103 P-ZCQ6XF6HTSW True 32655660 646c4548d666293e547d4ab0f19f5a1e38930c3a P-Z1L0K1F5PPS True 32663837 e03e7a66310f67b69e82714a071892dd144caf7c P-ZHYWH6QELGG True Checking all found empty space coordinatesI did the same for all 930 found empty spaces with the following results:12Found 930 empty spaces930 / 930 are valid I used the slightly modified get_empty_space_found function:123456def get_empty_space_found(block_num, trx_id): block = Block(block_num) seed = hashlib.md5((trx_id + block[&quot;block_id&quot;] + block[&quot;previous&quot;]).encode()).hexdigest() set_seed(seed) notfound = get_is_empty_space() return notfound ConclusionAll eight planets and all 930 explored coordinates are valid. The distance to the start planet does not play a role, only the transaction id of the custom_json and the block_id and the previous id of the first block after the arrival time. This page is synchronized from the post: ‘NextColony - checking if the 8 explored planets are valid’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/nextcolony-checking-if-the-8-explored-planets-are-valid/"},{"title":"Update for steemengine - testnet, stake and unstake support have been added","text":"Repositoryhttps://github.com/holgern/steemengine steemenginesteemengine is a python library for working with steem-engine.com tokens. I released version 0.5.0 which can be installed by1pip install steemengine New featuressteem-engine testnet is supportedIt is possible to set the url in the Api class and input the Api object to each steemengine class.This allows it to use the steem-engine testnet.123456from steemengine.api import Apifrom steemengine.wallet import Walletapi = Api(&quot;https://testapi.steem-engine.com/&quot;)w = Wallet(&quot;holger80&quot;, api=api)w.set_id(&quot;ssc-00000000000000000002&quot;)print(w.get_token(&quot;SSC&quot;)) The url of the testnet api is https://testapi.steem-engine.com/. When set the url in the API class and set the api parameter in all steemengine classes, e.g. Wallet(&quot;holger80&quot;, api=api), all API calls are done to the testnet. When operation as transfers should be performed ih the testnet, the id has to be changed, by using theset_id function. The id of the mainnet is ssc-mainnet1 and the testnet id is: ssc-00000000000000000002. 1w.set_id(&quot;ssc-00000000000000000002&quot;) sets the id to the testnet id. Using the testnetWhen the testnet should be used, the following has to be done:For the Wallet class:123api = Api(&quot;https://testapi.steem-engine.com/&quot;)w = Wallet(..., api=api)w.set_id(&quot;ssc-00000000000000000002&quot;) For the Market class:123api = Api(&quot;https://testapi.steem-engine.com/&quot;)m = Market(..., api=api)m.set_id(&quot;ssc-00000000000000000002&quot;) For the Tokenobject class:12api = Api(&quot;https://testapi.steem-engine.com/&quot;)t = Token(..., api=api) For the Tokens class:12api = Api(&quot;https://testapi.steem-engine.com/&quot;)t = Tokens(api=api) staking and unstaking of tokensAt the last update of steem-engine staking of token was activated. Three new functions were added to the command line tool and the wallet class in order to support staking. 1steemengine stake -a holger80 1 DRAGON broadcasts a custom_jsonwith stake as contractAction. As it can be seen here, the transaction was accepted. As staking was not enabled at the DRAGON token, the transaction had no effect.123456789101112131415161718192021222324steemengine info 2bf97f544b1fc86fbbe5ef4c43b8e622b6aad388Transaction Id: 2bf97f544b1fc86fbbe5ef4c43b8e622b6aad388+---------------------+------------------------------------------+| Key | Value |+---------------------+------------------------------------------+| blockNumber | 137651 || action | stake || contract | tokens || logs | { || | &quot;errors&quot;: [ || | &quot;staking not enabled&quot; || | ] || | } || payload | { || | &quot;symbol&quot;: &quot;DRAGON&quot;, || | &quot;quantity&quot;: &quot;1.0000000&quot;, || | &quot;isSignedWithActiveKey&quot;: true || | } || refSteemBlockNumber | 32722564 || sender | holger80 || transactionId | 2bf97f544b1fc86fbbe5ef4c43b8e622b6aad388 |+---------------------+------------------------------------------+ Syntax of the new commands:This command stakes an AMOUNT of unstaked token TOKEN. The account on which the staking should happen must be given by the -a options.1234567Usage: steemengine stake [OPTIONS] AMOUNT TOKEN stake a tokenOptions: -a, --account TEXT Transfer from this account --help Show this message and exit. This command unstakes an AMOUNT of staked token TOKEN. The account on which the staking should happen must be given by the -a options.1234567Usage: steemengine unstake [OPTIONS] AMOUNT TOKEN unstake a tokenOptions: -a, --account TEXT Transfer from this account --help Show this message and exit. This command cancel an ongoing unstake operation with the transaction id TRX_ID. The account on which the staking should happen must be given by the -a options.1234567Usage: steemengine cancel-unstake [OPTIONS] TRX_ID unstake a tokenOptions: -a, --account TEXT Transfer from this account --help Show this message and exit. New function at the wallet classA token MYTOKEN can be staked with the stake function:123456from steemengine.wallet import Walletfrom beem import Steemactive_wif = &quot;5xxxx&quot;stm = Steem(keys=[active_wif])wallet = Wallet(&quot;test&quot;, steem_instance=stm)wallet.stake(1, &quot;MYTOKEN&quot;) The staked token can then be unstaked by:1wallet.unstake(1, &quot;MYTOKEN&quot;) Unstaking takes some time. The process can be canceled by:1wallet.stake(&quot;cf39ecb8b846f1efffb8db526fada21a5fcf41c3&quot;) where cf39ecb8b846f1efffb8db526fada21a5fcf41c3 is the transaction id of the unstake operation. Info shows the amount of staked token1steemengine info holger80 or123from steemengine.wallet import Walletwallet = Wallet(&quot;holger80&quot;)print(wallet) Shows the amount of staked token. Token on which staking is not enabled, has only a balance key.All tokens on which staking is activated have a stake and pendingUnstake field. The info command shows the content of these fields are prints a - when staking was not activated for a token. CommitsRelease 0.5.0 commit 58d9b11 Add stake, unstake, cancel_unstake to Wallet class Add stake, unstake, cancel_unstake to the command line tool Add stake and pendingUnstake to info from the commandline toolRelease 0.4.6 commit 3288300 Allow to change the ssc idRelease 0.4.5 commit b567e61 Propagate the APi object to all steemengine objects Release 0.4.4 commit 6ca253f Fix URL for RPC objectRelease 0.4.3 commit c03c444 Change URL also in RPCRelease 0.4.2 commit 8f806a1 Fix issue #2 - Fix cancel for handling new buy/sell id URL for steemengine API can be setGitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘Update for steemengine - testnet, stake and unstake support have been added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/pdate-for-steemengine-testnet-stake-and-unstake-support-have-been-added/"},{"title":"Scotbot  parameter manual","text":"As you my know may know, I’m the developer of the scotbot backend. The bot is written in python and uses my beem library. In order to add your token to scotbot, the active key of the token issuer account itself or any other account that have sufficient token in their wallet is needed. The bot uses the key to send out token when a user has a sufficient amount of pending token and is willing to claim them. You can read more about it here. Let me explain all parameter that can be set at https://sto.steem-engine.com/#/launch/scotbot: json_metadata_keyand json_metadata_valueThis parameter is important, it defines which parameter in the json metadata of a post is checked. One possible choice is “tags”. Only posts that have a json_metadata_key parameter in the json metadata field are included and can collect rewards. The value of the json_metadata_key must include or be equal to json_metadata_value. When json_metadata_key=&quot;tags&quot; and json_metadata_value=&quot;scottest&quot;, then only posts that have a “scottest” tag can have pending tokens. Pending tokens will be generated when token holder upvote this post. json_metadata_key can also be a new parameter, as for example scot_token. In this case, a new frontend is needed that broadcasts posts that have this parameter in its json metadata field.When json_metadata_key=&quot;scot_token&quot; and json_metadata_value=&quot;MYTOKEN&quot;, posts that have:123json_metadata&quot;: {&quot;scot_token&quot;: [ &quot;MYTOKEN&quot;]} can have receive token from the MYTOKEN reward pool. At the moment it is advised to use the tags parameter and define a tag that every post must use for receiving token from the reward pool rewards_token and rewards_token_every_n_blockThese two parameters define the size of the reward pool. Every rewards_token_every_n_block steem blocks, the reward pool is increased by rewards_token . When for example rewards_token_every_n_block=3 and rewards_token=8, 8 token are added to the reward pool every 9s (3 blocks). Every hour, 3200 token are added to the pool and every day 76800 token. The reward pool is distributed entirely to authors and voters. reduction_every_n_block and reduction_percentageEvery reduction_every_n_block blocks, the amount of token that are added to the pool is reduced by reduction_percentage.When reduction_every_n_block = 10512000 and reduction_percentage = 0.5, the reward is reduced by 0.5% every year. For example, when the old reward was 8 token, it is reduced after the first year to18 / (1.005) = 7.96 cashout_window_daysThis parameter defines when voting on a post is closed and the amount of pending token can be claimed. For example for steem, cashout_window_days is 7. issue_tokenWhen this parameter is true, claimed token are send out with the issue command. This is only be possible when the token account is also the token creator. When issue_token is false, token are send out with the transfer command. In this case, the token account just needs to have sufficient token in its wallet. author_reward_percentageDefines the split between post creator and upvoter. When it is set to author_reward_percentage = 50, 50% of the pending tokens goes to the author and the remaining 50% to the voters. author_curve_exponentThis parameter can be a number between 1 and 2. author_curve_exponent = 1 is equivalent to linear and author_curve_exponent &gt; 1 means super linear. The pending token for a post are calculated as follow:123y = token_config[token][&quot;author_curve_exponent&quot;]weight_rshares = int_pow(sum_rshares, y)pending_token = int(weight_rshares / pending_rshares * reward_pool) When author_curve_exponent &gt; 1, it means that posts with more votes will receive an increased share from the reward pool. ExampleWhen author_curve_exponent = 1, and we have two posts, one with 100 rshares and one with 1000 rshares and the reward_pool has 1 token:1pending_token = 100 / 1100 * 1 = 0.09 and1pending_token = 1000 / 1100 * 1 = 0.91 When author_curve_exponent = 2, the pending_rshares is 100 100 + 10001000 = 10100001pending_token = 100 * 100 / 1010000 * 1 = 0.009 and1pending_token = 1000 * 1000 / 1010000 * 1 = 0.991 curation_curve_exponentThis parameter defines the curation rewards. It can be a number between 0.5 and 2. The curation reward which can be given to the voters is1curation_reward = pending_token - author_reward For each vote, a weight is calculated. When curation_curve_exponent = 1, the weight is linear the vote rshares.123y = token_config[token][&quot;curation_curve_exponent&quot;]vote_weight = (int_pow(sum_rshares + vote[&apos;rshares&apos;], y) - int_pow(sum_rshares, y))sum_rshares += vote[&quot;rshares&quot;] The vote_weight of all voters is summed up in total_vote_weight.The curation reward is then1pending_curation_token = int(curation_reward * vote_weight / total_vote_weight) Examplecuration_curve_exponent = 0.5, curation_reward = 1 , one vote with 100 rshares and a later vote with 1000 rshares. 12345sum_rshares = 0vote_weight_1 = sqrt(100) = 10sum_rshares = 100vote_weight_2 = sqrt(100 + 1000) - sqrt(100) = 23.166total_vote_weight = 33.166 The first voter receives:11 * 10 / 33.166 = 0.302 and the second voter receives:11 * 23.166 / 33.166 = 0.698 vote_regeneration_seconds and vote_power_consumptionThese two parameter defines how often it is possible to vote. These parameters are integer in the steem percentage notation 100 means 1 %. vote_power_consumption defines how the vote power is reduced with a 100% vote. When it is set to 200 (2%), the vote power is reduced to 98% when voting at full vote power and a weight of 100%. vote_regeneration_seconds defines in which time duration an empty vote power is regenerating to 100%. downvote_regeneration_seconds and downvote_power_consumptionThese two parameter defines how often it is possible to downvote. When downvote_regeneration_seconds is set to a positve integer, a second downvote pool is activated. When a downvote pool is active, downvoting does not reduce the vote power. downvote_power_consumption defines how the downvote power is reduced with a 100% downvote. When it is set to 200 (2%), the downvote power is reduced to 98% when downvoting at a full downvote power and a weight of 100%. downvote_regeneration_seconds defines in which time duration an empty downvote power is regenerating to 100%. When this parameter is negative, the downvote pool is deactivated and downvoting will reduce the vote power. This page is synchronized from the post: ‘Scotbot parameter manual’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/scotbot-parameter-manual/"},{"title":"API endpoints for snax.one and registering for snax.one","text":"You might have seen some snax.one registration posts on steem lately. At the moment, 78 steem account have been registered (source : It seems that snax.one does not know that steem is not steemit. The internal platform codename for steem is p.steemit. User ID and snax usernameYou need your snax username and the platform ID for receiving more information using the snax API. Both can be received from the snax blockchain raw data. When registering on a platform, an addaccount operation is broadcasted. In this operation, a platform (in our case it is p.steemit), a steem account, a snax account, a platform user id and the verification post.123456789101112act:Object {&quot;account&quot;:&quot;p.steemit&quot;,&quot;name&quot;:&quot;addaccount&quot;,&quot;authorization&quot;:[{&quot;actor&quot;:&quot;p.steemit&quot;,&quot;permission&quot;:&quot;active&quot;}],&quot;data&quot;:[&quot;creator&quot;:&quot;p.steemit&quot;,&quot;account&quot;:&quot;bobokyaw&quot;,&quot;id&quot;:306643,&quot;account_name&quot;:&quot;bobokyaw&quot;,&quot;verification_post&quot;:74786076,&quot;verification_salt&quot;:&quot;d8ea45790b9b2df8c20dd937e00a9c1c&quot;,&quot;stat_diff&quot;:[]},&quot;hex_data&quot;:&quot;0000c84e2a9531a8000000dc78480f3dd3ad04000000000008626f626f6b7961771c2575040000000020643865613435373930623962326466386332306464393337653030613963316300&quot;} In this case, the steem-account and snax-account is boboyaw and the steem user ID is 306643. This transaction can be found by going through all transactions id provided by the v1/history/get_actions call from the p.steemit account. snax.one APIThere is already an API, you can use to find out more about single transactions or blockchain parameter. The API is on github, but not fully documented. I found some API calls that were not yet documented. The API endpoint URL is https://cdn.snax.one/. history API calls - Account related callsThese calls can be used to receive transaction details from a single account. v1/history/get_actionsThis API needs {&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;pos&quot;: -1, &quot;offset&quot;: -20} 1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;pos&quot;: -1, &quot;offset&quot;: -20}&apos; https://cdn.snax.one/v1/history/get_actions and returns an array of actions of a given account v1/history/get_transactionThis call needs an transaction id {&quot;id&quot;: &quot;8c5a1fe143c5fbd202ec3620eb4ec3b6248938308779a35e65ee2de82496e49f&quot;}1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;id&quot;: &quot;8c5a1fe143c5fbd202ec3620eb4ec3b6248938308779a35e65ee2de82496e49f&quot;}&apos; https://cdn.snax.one/v1/history/get_transaction and returns content of the transaction. v1/history/get_key_accountsThis call returns an account name for a given public key, the call needs:{&quot;public_key&quot;: &quot;SNAX83XFetwYpt7aqxKoKxV3AAP6cuTP3FcyvYh9o5bkkWXtEB73gi&quot;}: 1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;public_key&quot;: &quot;SNAX83XFetwYpt7aqxKoKxV3AAP6cuTP3FcyvYh9o5bkkWXtEB73gi&quot;}&apos; https://cdn.snax.one/v1/history/get_key_accounts /v1/history/get_transfers_by_accountThis call returns all transfers for the account. The call needs: {&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;platform&quot;: { &quot;p.steemit&quot;: {&quot;id&quot;: &quot;306643&quot;} }, &quot;pos&quot;: -1, &quot;offset&quot;: -20}1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;platform&quot;: { &quot;p.steemit&quot;: {&quot;id&quot;: &quot;306643&quot;} }, &quot;pos&quot;: -1, &quot;offset&quot;: -20}&apos; https://cdn.snax.one/v1/history/get_transfers_by_account /v1/history/get_platform_transfers_by_accountThis call returns all transfers for the account on the given platform. The call needs: {&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;platform&quot;: { &quot;p.steemit&quot;: {&quot;id&quot;: &quot;306643&quot;} }, &quot;pos&quot;: -1, &quot;offset&quot;: -20}1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;platform&quot;: { &quot;p.steemit&quot;: {&quot;id&quot;: &quot;306643&quot;} }, &quot;pos&quot;: -1, &quot;offset&quot;: -20}&apos; https://cdn.snax.one/v1/history/get_platform_transfers_by_account /v1/history/get_rewards_by_accountThis call returns the received rewards for the account on the given platform. The call needs: {&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;platform&quot;: { &quot;p.steemit&quot;: {&quot;id&quot;: &quot;306643&quot;} }, &quot;pos&quot;: -1, &quot;offset&quot;: -20}1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;account_name&quot;: &quot;bobokyaw&quot;, &quot;platform&quot;: { &quot;p.steemit&quot;: {&quot;id&quot;: &quot;306643&quot;} }, &quot;pos&quot;: -1, &quot;offset&quot;: -20}&apos; https://cdn.snax.one/v1/history/get_rewards_by_account /v1/history/get_controlled_accountsThis call returns the controlling accounts for a given one. The call needs {&quot;controlling_account&quot;: &quot;bobokyaw&quot;}1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;controlling_account&quot;: &quot;bobokyaw&quot;}&apos; https://cdn.snax.one/v1/history/get_controlled_accounts Chain related callsv1/chain/get_accountThis API needs {&quot;account_name&quot;: &quot;bobokyaw&quot;} and returns account information1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;account_name&quot;: &quot;bobokyaw&quot;}&apos; https://cdn.snax.one/v1/chain/get_account v1/chain/get_blockThis call needs a block number and returns the block raw data. json input is {&quot;block_num_or_id&quot;: 5934124}.1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;block_num_or_id&quot;: 5934124}&apos; https://cdn.snax.one/v1/chain/get_block v1/chain/get_infoThis call needs no input and returns some information about the snax blockchain1curl -X POST -H &quot;Content-Type: application/json&quot; https://cdn.snax.one/v1/chain/get_info v1/chain/get_table_rowsThis call returns information about a specific platform. The json input is {&quot;json&quot;:true,&quot;code&quot;:&quot;p.steemit&quot;,&quot;scope&quot;:&quot;p.steemit&quot;,&quot;table&quot;:&quot;state&quot;,&quot;table_key&quot;:&quot;&quot;,&quot;lower_bound&quot;:&quot;&quot;,&quot;upper_bound&quot;:&quot;&quot;,&quot;index_position&quot;:1,&quot;key_type&quot;:&quot;&quot;,&quot;limit&quot;:11curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;json&quot;:true,&quot;code&quot;:&quot;p.steemit&quot;,&quot;scope&quot;:&quot;p.steemit&quot;,&quot;table&quot;:&quot;state&quot;,&quot;table_key&quot;:&quot;&quot;,&quot;lower_bound&quot;:&quot;&quot;,&quot;upper_bound&quot;:&quot;&quot;,&quot;index_position&quot;:1,&quot;key_type&quot;:&quot;&quot;,&quot;limit&quot;:1}&apos; https://cdn.snax.one/v1/chain/get_table_rows v1/chain/get_currency_balanceThis call returns the supply. The input json is {&quot;code&quot;:&quot;snax.token&quot;,&quot;account&quot;:&quot;p.steemit&quot;,&quot;symbol&quot;:&quot;SNAX&quot;}.account can be: snax p.twitter snax.creator snax.airdrop p.steemit1curl -X POST -H &quot;Content-Type: application/json&quot; --data &apos;{&quot;code&quot;:&quot;snax.token&quot;,&quot;account&quot;:&quot;p.steemit&quot;,&quot;symbol&quot;:&quot;SNAX&quot;}&apos; https://cdn.snax.one/v1/chain/get_currency_balance Register on snaxWhen creating a new account, I was asked to publish a post on steem with the following content: You have to post this on steem and have clicked on the Authenificate with Steem: Edit:The post must not contain any other text then the shown one. I will start over and create a new empty post for registering on stax. This page is synchronized from the post: ‘API endpoints for snax.one and registering for snax.one’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/api-endpoints-for-snax-one-and-registering-for-snax-one/"},{"title":"Snax authentication post","text":"I want to link my Steem account with my account on Snax blockchain using https://snax.onePlease, create Snax account for me!My authentication hash: 21641b105b9bad96546457e11ae845b959158c80aad6b6f89a068f2f8572c360 This page is synchronized from the post: ‘Snax authentication post’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/snax-authentication-post/"},{"title":"Creating a blog from my steem posts using hexo.io","text":"I’m experimenting with a approach to download all my posts as markdown file and build a website from these files. I found hexo.io which is a blog framework that can parse markdown files. I used this framework and a python script to generate a blog website at https://holger80.de hexo templateI installed the hexo npm package by:1npm install hexo-cli -g I’m using the icarus theme: https://github.com/ppoffice/hexo-theme-icarus/tree/siteI did a checkout and installed all missing packages by:1npm install inside the main directory. Storing all posts as markdown filesI wrote a small python script that downloads the posts and adds a yaml header to it. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475from __future__ import absolute_importfrom __future__ import divisionfrom __future__ import print_functionfrom __future__ import unicode_literalsfrom builtins import bytes, int, strfrom beem import Steemfrom beem.comment import Commentfrom beem.account import Accountfrom beem.amount import Amountfrom beem.nodelist import NodeListfrom beem.utils import addTzInfo, resolve_authorperm, construct_authorperm, derive_permlink, formatTimeStringfrom datetime import datetime, timedeltaimport clickimport loggingimport sysimport osimport ioimport argparseimport reimport six click.disable_unicode_literals_warning = Truelog = logging.getLogger(__name__)if __name__ == &quot;__main__&quot;: image_path = None path = &quot;.\\\\source\\\\_posts&quot; author = &quot;holger80&quot; nodelist = NodeList() nodelist.update_nodes() stm = Steem(node=nodelist.get_nodes()) account = Account(author, steem_instance=stm) permlink_list = [] cnt = 0 for h in account.history(only_ops=[&quot;comment&quot;]): if h[&quot;parent_author&quot;] != &apos;&apos;: continue if h[&quot;author&quot;] != author: continue if h[&quot;permlink&quot;] in permlink_list: continue else: permlink_list.append(h[&quot;permlink&quot;]) # get newest version comment = Comment(h, steem_instance=stm) comment.refresh() markdown_content = comment[&quot;body&quot;].replace(&apos;&lt;center&gt;&apos;,&apos;&apos;).replace(&apos;&lt;/center&gt;&apos;, &apos;&apos;) title = comment[&quot;title&quot;] timestamp = comment.json()[&quot;created&quot;] author = comment[&quot;author&quot;] permlink = comment[&quot;permlink&quot;] yaml_prefix = &apos;---\\n&apos; yaml_prefix += &apos;title: &quot;%s&quot;\\n&apos; % title.replace(&apos;&quot;&apos;, &apos;&apos;) yaml_prefix += &apos;catalog: true\\n&apos; yaml_prefix += &apos;toc_nav_num: true\\n&apos; yaml_prefix += &apos;date: %s\\n&apos; % timestamp.replace(&apos;T&apos;, &apos; &apos;) yaml_prefix += &apos;tags:\\n&apos; for tag in comment.json_metadata[&quot;tags&quot;]: yaml_prefix += &apos;- %s\\n&apos; % tag yaml_prefix += &apos;categories:\\n&apos; yaml_prefix += &apos;- %s\\n&apos; % comment.json_metadata[&quot;tags&quot;][0] yaml_prefix += &apos;toc: true\\n&apos; yaml_prefix += &apos;---\\n\\n&apos; filename = os.path.join(path, timestamp.split(&apos;T&apos;)[0] + &apos;_&apos; + permlink + &quot;.md&quot;) with io.open(filename, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f: f.write(yaml_prefix + markdown_content) cnt += 1 if cnt % 10 == 0: print(&quot;Receiving posts ... (%d stored)&quot; % cnt) The script must be stored in the main directory and the author = &quot;holger80&quot; must be changed. When running the script, all steem posts will be stored in ./source/_posts Configuration of the siteI modified the _config.yml and _config.theme.yml configuration files.It is possible to test the outcome by1hexo server and view the site at http://localhost:4000/. Create a static siteThese commands generate static html pages that can be uploaded to any webserver.12hexo cleanhexo generate ResultsAfter experimenting a little bit, you can find my blog at https://holger80.de My newest posts are shown on top: On the left side, my profile is shown: Categories are shown below this:and a tag cloud: On the right side, my recent posts are shown:and a archive: When clicking on a archive entry, a timeline is shown: It is also possible to search all posts for a keyword: When opening a posts, all used header are shown on the left side as navigation help: The markdown parser could handle almost every post. Only &lt;center&gt; tags lead to an error, I solved this y removing all &lt;center&gt; tags. What do you think? Would you like to have something like this for your steem account as well? This page is synchronized from the post: ‘Creating a blog from my steem posts using hexo.io’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/creating-a-blog-from-my-steem-posts-using-hexo-io/"},{"title":"Update for scotbot - rewards can be limited to a specific app and beneficiaries token rewards have been implemented","text":"EDIT:json_metadata_app_value was set to Null for the SCT token and posting is possible from every app As you can see here:https://scot-api.steem-engine.com/config?token=SCTthree new configuration parameters have been added: name default value for SCT token beneficiaries_reward_percentage 0 10 beneficiaries_account null sct.admin json_metadata_app_value None None When a posts reaches its payout date, 10% of the token that this post will receive is now sent to the sct.admin account.author_reward_percentage is now set to 45%, which means that the author will receive 45% and all curators will also receive 45%. So author and curators will receive the same amount of tokens. Edit: the setting was set back for SCT, so posting is possible again from every app SCOT token that have set json_metadata_app_value will limit rewards to posts that were posted from the specified appThere is now a json_metadata_app_value parameter. When set, only main posts which are posted from the set app are accepted for rewards. As before, the specified tag must still be added to the post. Comments will be accepted when the parent main post is accepted. Parameter setup for other SCOT tokens@coffeebuds, @actnearn, @pgarcgo, @ribai please let me know, if you want to set some of these new parameters for your SCOT token. The parameter setup throught https://sto.steem-engine.com/#/launch/scotbot will be adapted soon, but I can change the parameter for your bot now. This page is synchronized from the post: ‘Update for scotbot - rewards can be limited to a specific app and beneficiaries token rewards have been implemented’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-scotbot-rewards-can-be-limited-to-a-specific-app-and-beneficiaries-token-rewards-have-been-implemented/"},{"title":"steemrewarding.com - new api functions and pause votes when below a global VP threshold have been added","text":"Repositoryhttps://github.com/holgern/steemrewarding steemrewarding.com is a feature-rich automatic voting tool. It can be used to create voting rules at https://steemrewarding.com, using several parameters. It is possible to automatically optimize vote delay times in order to increase curation rewards. Posting authority needs to be given to the @rewarding account. I created a discord server for all topics regarding steemrewarding.com: discord invitation. steemrewarding is currently used by 242 users which created 3029 rules for posts, 115 rules for comments and 51 trail vote rules. In the last 7 days, 12377 time based votes and 1727 vp based votes were broadcasted through steemrewarding. New FeaturesPause votes when below a global VP threshold have been addedA new global vote power threshold has been added to https://steemrewarding.com/settings When the vote power of the voter goes below this threshold: a VP based vote will be hold until the accounts VP is above this global threshold all time based votes will be canceled, when the accounts VP is below this global threshold Curation performance calculation for already paid out posts have been implementedWhen a post is not pending anymore, its active vote field is cleared.The votes are obtained now by the ActiveVotes class from beem:1activeVotes = ActiveVotes(authorperm, steem_instance=stm).get_sorted_list() API functions have been implementedAll new api functions needs at least an access_token parameter. POST and GET requests are supported on all API functions.This access token is used together with the me function from steemconnect to receive the account name and to validate the token: 12345try: steemconnect.set_access_token(access_token) name = steemconnect.me()[&quot;name&quot;]except: return jsonify([]) Each API call starts with https://steemrewarding.com, a valid api call would be: https://steemrewarding.com/api/vote_rules?access_token=... The API functions could be used to build an alternative frontend for steemrewarding. /api/vote_rulesReturns all vote rules as array. /api/new_trail_vote_ruleCan be used to create a new trail vote rule. A voter_to_follow parameter must be given. /api/new_vote_ruleCreates a new vote rule. author and main_post must be given. /api/delayed_voteAdds a new pending vote for a post. authorperm must be given. /api/delete_vote_ruleRemoves a vote rule. author and main_post must be given. /api/delete_trail_vote_ruleDeletes a trail vote rule. A voter_to_follow parameter must be given. /api/edit_vote_ruleEdits an existing vote rule. author and main_post must be given. Only variable names shown at /api/vote_rules are accepted. The parameter of a vote rule are changed when attached to the api. For example, the min_vp parameter can be changed with: https://steemrewarding.com/api/edit_vote_rule?author=abh12345&amp;main_post=true&amp;min_vp=90&amp;access_token=… /api/edit_trail_vote_rule’Edits an existing trail vote rule. A voter_to_follow parameter must be given. Only variable names shown at /api/trail_vote_rules are accepted. The parameter of a vote rule are changed when attached to the api. /api/trail_vote_rulesShows all trail vote rules. /api/failed_vote_logShows all failed votes. /api/pending_votesShows all pending votes. /api/settingsShows the user settings. All settings can be modified by adding the parameter with a new value.E.g.:https://steemrewarding.com/api/settings?pause_votes_below_vp=50&amp;access_token=…sets the pause_votes_below_vp parameter to 50. CommitsAll API functions support now POST and GET requests commit 6d7082fb7Add pause votes when below a global VP threshold to settings commit 8c5d628add api functions for viewing and creating new vote and trail vote rules commit 897265f the api allows to delete and edit rules It is possible to add a single delayed voteAdd curation performance calculation for paid out posts commit 6a9f109 Robustify comment parsing Some bug fixes Limit the number of shown failed votes at the homepage GitHub Accounthttps://github.com/holgern This page is synchronized from the post: ‘steemrewarding.com - new api functions and pause votes when below a global VP threshold have been added’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/steemrewarding-com-new-api-functions-and-pause-votes-when-below-a-global-vp-threshold-have-been-added/"},{"title":"Update for scotbot - allowed vote window can be limited and post can be promoted by token transfers","text":"As you can see here:https://scot-api.steem-engine.com/config?token=SCT Two new configuration parameters have been added: name default value for SCT token vote_window_days -1 2 promoted_post_account null null vote_window_daysIt is now possible to limit the time window when a post can receive up- and down-votes. When this parameter is greater than zero, votes casted at a post/comment which are older than vote_window_daywill not increase / decrease the payout and the voter will not receive curation rewards. For SCT, it is now set to 2 days. The payout window of SCT token for a post with sct tag remains at 3 days after creation. All vote operation that were broadcasted on a post which was older than 2 days will not have an effect on the SCT payout. The steem payout and the steem curation rewards are not changed at all. This parameter was implemented in order to limit abuse, in which posts were upvoted in the last seconds. Promoting posts with tokensAll SCOT tokens can now be used to promote posts in their specific nitrous instance. For example SCT token can then be used to promote posts in https://www.steemcoinpan.com/promoted. When sending token with a post link as memo to the promoted_post_account account, they will be shown in the promoted tab of nitrous. The changes have been implemented in the SCOT backend, but not yet in the nitrous frontend. The promoted posts will be shown ordered by the promoted token that have been spend. Only pending posts are shown in the promoted tab. When nitrious is updated, promotion of a post can be performed by sending some SCT token to null (this is currently the promoted_post_account for SCT): This page is synchronized from the post: ‘Update for scotbot - allowed vote window can be limited and post can be promoted by token transfers’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/update-for-scotbot-allowed-vote-window-can-be-limited-and-post-can-be-promoted-by-token-transfers/"},{"title":"Validating the mining results of ENG token","text":"I’ve programmed a lot for the steem blockchain, thus I’m currently not very active in writing posts. As you may know I’m the developer behind scot and I have now also implemented Delegated Proof of Stake Mining for steem-engine tokens. Currently two token can be staked to participate in ENG mining: EM with a mining power of 1 EMFOUR with a mining power of 4 Every hour, the ENG token mining reward pool is send to 10 accounts which were randomly selected based on the staked mining power (in one round one account can be added more than once). How does this workEvery hour, all mining token staker are obtained from the steem-engine api. Then a custom_json with id scot_create_claim and {&quot;symbol&quot;:&quot;ENG&quot;,&quot;type&quot;:&quot;mining&quot;,&quot;N&quot;:10} as content is broadcasted from the engpool account. The scot bot fetches this custom_json and uses the block number and the transaction id to calculate a seed. The seed is then used to initialize a random generator. Then 10 accounts are randomly selected by generating random numbers from 0 to the staked mining power sum. The staked mining power of all accounts are summed up and sorted by the staked mining power and the loki steem-api id. The results are broadcasted as a custom_json from the engpool account: Lets assume that we have 3 miner, a has staked 1 EMFOUR with loki 2, b has staked 1 EMFOUR with loki 3 and c has staked 3 EM token with loki 1. index name staked mining power sum loki 1 c 3 3 1 1 a 4 7 2 1 b 4 11 3 In the next step, we draw 5 times a random number between 0 and 11.That account is selected which sum is closed above the random number.Lets assume that the sequence is (I’m using integer random number for this example):14, 2, 10, 7, 1 This means the winner are random number winner 4 a 2 c 10 b 7 b 1 c Script to validate the most recent mining operationIn order to run this script, beem and steemengine must be installed. The block number and the transaction id of the custom_json containing the mining outcome must be provided:12block_num = 33505765 trx_id = &quot;98df419edbd76079d1991bc58c2ea6db5077e4bd&quot; You can take a look at the custom_json here: https://steemd.com/tx/98df419edbd76079d1991bc58c2ea6db5077e4bd Validation of the mining operation is only possible when: nobody unstaked their mining token nobody staked more mining token no new accounts staked mining tokenAs long these condition are true, any mining operation can be validated. The condition is check in the script by comparing N_accounts and staked_mining_power from the custom_json with the currently staked accounts. The staked mining power is obtained by using the steem-engine api:12345678910111213141516171819202122accounts_by_name = {}miner_tokens = {&quot;EM&quot;: 1, &quot;EMFOUR&quot;: 4}mining_power_sum = 0for miner_token in miner_tokens: mining_power = miner_tokens[miner_token] token_object = Token(miner_token) token_holder = token_object.get_holder() for holder in token_holder: if float(holder[&quot;stake&quot;]) == 0: continue if holder[&quot;account&quot;] not in accounts_by_name: accounts_by_name[holder[&quot;account&quot;]] = {&quot;name&quot;: holder[&quot;account&quot;], &quot;staked_mining_power&quot;: float(holder[&quot;stake&quot;]) * mining_power, &quot;loki&quot;: holder[&quot;$loki&quot;]} else: accounts_by_name[holder[&quot;account&quot;]][&quot;staked_mining_power&quot;] += float(holder[&quot;stake&quot;]) * mining_power if accounts_by_name[holder[&quot;account&quot;]][&quot;loki&quot;] &gt; holder[&quot;$loki&quot;]: accounts_by_name[holder[&quot;account&quot;]][&quot;loki&quot;] = holder[&quot;$loki&quot;] mining_power_sum += float(holder[&quot;stake&quot;]) * mining_power accounts = []for acc in accounts_by_name: accounts.append(accounts_by_name[acc])sorted_accounts = sorted(accounts, key=lambda m: (m[&quot;staked_mining_power&quot;], m[&quot;loki&quot;])) The accounts are firstly sorted by their staked mining power and secondly by the $loki id from the steem-engine account. This allows it to validate a mining operation, as the accounts are sorted in the same way. The seed is set by:12345def set_seed(seed): random.seed(a=seed, version=2)block = Block(json_data[&quot;block_num&quot;])seed = hashlib.md5((json_data[&quot;trx_id&quot;] + block[&quot;block_id&quot;] + block[&quot;previous&quot;]).encode()).hexdigest() set_seed(seed) where block_num and trx_id are provided from the custom_json.Finally, winner can be obtained by:12345678910111213141516def get_random_range(start, end): return ((random.random() * (end-start + 1)) + start)N = int(json_data[&quot;N&quot;])mining_power_sum = float(json_data[&quot;staked_mining_power&quot;])winner_accs = []for i in range(N): x = get_random_range(0, mining_power_sum) sum_mining_power = 0 winner_found = False for acc_data in sorted_accounts: sum_mining_power += acc_data[&quot;staked_mining_power&quot;] if sum_mining_power &gt; x and not winner_found: winner_accs.append(acc_data[&quot;name&quot;]) winner_found = True The output of the script for the last custom_json is: Script source12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import time import jsonimport mathimport randomfrom steemengine.tokenobject import Tokenfrom beem.block import Blockimport hashlibdef set_seed(seed): random.seed(a=seed, version=2)def get_random_range(start, end): return ((random.random() * (end-start + 1)) + start)if __name__ == &quot;__main__&quot;: block_num = 33505765 trx_id = &quot;98df419edbd76079d1991bc58c2ea6db5077e4bd&quot; block = Block(block_num) data = None for trx in block.transactions: if trx[&quot;transaction_id&quot;] ==trx_id: data = trx trx = data[&quot;operations&quot;][0][&quot;value&quot;] json_data = json.loads(trx[&quot;json&quot;]) block = Block(json_data[&quot;block_num&quot;]) seed = hashlib.md5((json_data[&quot;trx_id&quot;] + block[&quot;block_id&quot;] + block[&quot;previous&quot;]).encode()).hexdigest() set_seed(seed) accounts_by_name = {} miner_tokens = {&quot;EM&quot;: 1, &quot;EMFOUR&quot;: 4} mining_power_sum = 0 for miner_token in miner_tokens: mining_power = miner_tokens[miner_token] token_object = Token(miner_token) token_holder = token_object.get_holder() for holder in token_holder: if float(holder[&quot;stake&quot;]) == 0: continue if holder[&quot;account&quot;] not in accounts_by_name: accounts_by_name[holder[&quot;account&quot;]] = {&quot;name&quot;: holder[&quot;account&quot;], &quot;staked_mining_power&quot;: float(holder[&quot;stake&quot;]) * mining_power, &quot;loki&quot;: holder[&quot;$loki&quot;]} else: accounts_by_name[holder[&quot;account&quot;]][&quot;staked_mining_power&quot;] += float(holder[&quot;stake&quot;]) * mining_power if accounts_by_name[holder[&quot;account&quot;]][&quot;loki&quot;] &gt; holder[&quot;$loki&quot;]: accounts_by_name[holder[&quot;account&quot;]][&quot;loki&quot;] = holder[&quot;$loki&quot;] mining_power_sum += float(holder[&quot;stake&quot;]) * mining_power accounts = [] for acc in accounts_by_name: accounts.append(accounts_by_name[acc]) sorted_accounts = sorted(accounts, key=lambda m: (m[&quot;staked_mining_power&quot;], m[&quot;loki&quot;])) sum_mining_power = 0 for acc_data in sorted_accounts: sum_mining_power += acc_data[&quot;staked_mining_power&quot;] if int(json_data[&quot;N_accounts&quot;]) != len(accounts_by_name) or abs(mining_power_sum - float(json_data[&quot;staked_mining_power&quot;])) &gt; 2 / 10 ** 6: print(&quot;staked accounts have changed and the mining cannot be validated...&quot;) else: N = int(json_data[&quot;N&quot;]) mining_power_sum = float(json_data[&quot;staked_mining_power&quot;]) winner_accs = [] for i in range(N): x = get_random_range(0, mining_power_sum) sum_mining_power = 0 winner_found = False for acc_data in sorted_accounts: sum_mining_power += acc_data[&quot;staked_mining_power&quot;] if sum_mining_power &gt; x and not winner_found: winner_accs.append(acc_data[&quot;name&quot;]) winner_found = True print(&quot;%d winner found&quot; % len(winner_accs)) if (winner_accs) == (json_data[&quot;winner&quot;]): print(&quot;custom_json with %s was sucessfully validated. Winner are:&quot; % trx_id) print(str(winner_accs)) else: print(&quot;Custom_json could not be validated&quot;) print(&quot;winner from script:&quot;) print(str(winner_accs)) print(&quot;winner from custom_json:&quot;) print(str(json_data[&quot;winner&quot;])) This page is synchronized from the post: ‘Validating the mining results of ENG token’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/validating-the-mining-results-of-eng-token/"},{"title":"Palnet: How to check your voting power and your PAL vote value","text":"Each Scot like PAL has their own reward pool and voting power. A vote on a palnet post is a normal STEEM vote operation which is processed by Scotbot. When the voter has staked some token, the vote adds token rshares to the post. For example, when a voter has 1000 PAL staked, his 100% vote will add 1000 PAL rshares to the post (As the precision for PAL is 0, the token amount is equal to its rshares). In order to check the size of a vote in PAL, we can check the scot api:https://scot-api.steem-engine.com/info?token=PAL A vote can be calculated by:1vote_value = vote_weight / 100 * voting_power / 100 * rshares / pending_rshares * reward_pool assuming vote_weight and voting_power is 100 %, we get:1vote_value = rshares / pending_rshares * reward_pool after entering the current values:1vote_value = rshares / 2937387* 894 = rshares / 3285.67 When someone stakes 3286 PAL, his 100% vote value is currently worth 1 PAL. Vote powerThe vote power calculation is similar to steem, with the difference that when voting outside palnet, the PAL voting power will not be reduced. You can check your voting power with a tool by @blockchainstudio: https://economicstudio.github.io/vp/?a=aggroed&amp;t=PAL the url parameter are a= and t= Downvoting poolThe pal token has a seperate downvoting pool. A downvote consumes 20% of its pool, thus one free downvote per day is available. when downvoting more often, the downvote will have less and less effect. Downvoting removes rshares from a post, when the downvoter has staked PAL token. This page is synchronized from the post: ‘Palnet: How to check your voting power and your PAL vote value’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/palnet-how-to-check-your-voting-power-and-your-pal-vote-value/"},{"title":"Scotbot was down for around 10 hours and is up and running again","text":"Scotbot sits on top of the steem blockchain and parses every block, processes the data in it and updates its database. Of course, there are already many checks in place that assure that the processed data have the correct type and do not lead to a crash… Yesterday evening (while I’m was sleeping), scotbot could not process a parameter which was None, so it crashed and could not proceed. I fixed it, added a new check that will prevent something in the future. Scotbot is replaying all missing blocks and up and running again. PAL and ENG miningI adapted the scotbot, so that in case scotbot halted, more than 10 winner are drawn. As scotbot was offline for 10h, 100 winner for ENG token and 90 winner for PAL token were dran: Claim tokenClaimed token should be sent out by now. Pending tokens are only removed from the database when the token sending was sucessfully Posts and votesAll posts and votes should be visible by now. As both are normal steem operation, they can not disappear. Why can I see no new posts on a nitrous instance as palnet.io when scotbot is down?scotbot has to process votes and comments from the steem blockchain and add them to the database. The nitrous instances are getting their data from the scotbot API, when scotbot is down, no new data is provided throught the API and the nitrous instances cannot show new posts/comments/votes. Why did scobot halt, can you not go to the next block in case of an error?I did not do chose this approach for a reason, as this would mean that scotbot may skip blockchain data. Assuming, that scotbot can not handle titles with a capital A. Just ignoring the error and skipping all posts with a capital A is not a good solution. It is better when scotbot halts when the first post with a capital A appears and force me to investigate the issue. I would solve the problem and the post itself and also all future posts with a A will be processed. Seems to me the better approach. As scotbot is new and I’m also adding new features to it, there may be happen some errors in the future. But I will fix them and then they will not happen again. Why is there a delay of some seconds until my vote or comment is visible?As mentioned, scobot has first to process the blockchain data and update the database. This delay will be reduced in the future, when the code is optimized. Current database sizeCurrently, 419240 votes 64288 posts/comments 56642 accounts are stored in the database. One stored vote/comment/post/account is related to one token. So when a posts accepts two token, it is two times in the database. The same is true for the accounts. 825 accounts in the database have staked scot tokens, When the same account has staked two different token, he counts as 2 accounts in the database. This page is synchronized from the post: ‘Scotbot was down for around 10 hours and is up and running again’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/scotbot-was-down-for-around-10-hours-and-is-up-and-running-again/"},{"title":"How to login with steemconnect  using the beta interface","text":"The beta interface of steemconnect uses a different node and works currently, while v2 from steemconnect may not work. How to login at steemconnect betaSelect the beta interface Press login Enter your posting key, it may not work using your active key Press Sign This should allow you to login using steemconnect, currently the v2 version of steemconnect did not work (it may work now). This page is synchronized from the post: ‘How to login with steemconnect using the beta interface’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/how-to-login-with-steemconnect-currently-login-is-not-possible-to-login-using-the-stable-version-v2/"},{"title":"Code optimizations for scotbot","text":"As more and more posts were created that have at least one of the scot tags included, my previous scotbot implementation was not efficient anymore. I rewrote the part that handles the all pending rshares and the token reward pool. In order to show the pending token rewards for one posts, I need to know the current reward pool size and the sum of all pending rshares of all posts. As there are currently around 15000 pending posts/comments and 217000 votes on palnet, going everytime through all posts and votes is not very efficient. The first part of improving this is now completed. The pending token amount for a post is no longer stored directly in the database and calculated directly on request. With this change, it is no longer necessary to change all pending posts/comments objects in the database at every round. The complete sum of all rshares and the current reward pool can be received from the API:https://scot-api.steem-engine.com/info?token=PALwith the parameter pending_rshares and reward_pool. pending_rshares includes the author nonlinear curve.The reward_pool is stored as integer, the token amount can be calculated by dividing it through 10**precision. Every posts has now a vote_rsharesparameter, which is the sum of all vote rshares. The nonlinear author curve exponent is also stored in every posts with theauthor_curve_exponent parameter. The vote_rsharesparameter and the global pending_rshares are updated whenever a new vote arrives. The pending token amount can then be calculated on request by:1pending_token = int_pow(vote_rshares, author_curve_exponent) / pending_rshares * reward_pool / 10**precision Blacklisted accountsWhenever the @steemsc accounts mutes an account, this account will be blacklisted from all SCOT instances. A blacklisted account can not vote and can only post once a day. Currently, only animalcontrol is muted by steemsc. This page is synchronized from the post: ‘Code optimizations for scotbot’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/code-optimizations-for-scotbot/"},{"title":"Which influence has the card order in a deck?","text":"Steem monsters is a dezentralized card game on the steem blockchain. Except for the summoner card which has to be selected as first card , the order of the summoned monster cards is completely free. The chosen card order influences the battle and make a deck stronger or weaker. In order to analyze which influence the card order in a deck has, I checked all 159829 played ranked matches from the ongoing tournament of steem monsters. I skipped mirror fights (same deck and same order) and counted how often a deck has won. I count only fights between decks with exact the same relative card level (max level deck vs max level deck, or level 1 deck vs level 1 deck) I found 30920 different decks including all variants with different card order. I sorted the decks by the number of won matches and took the first 25 decks. For each deck, I show all played order variants sorted by their win ratio. 1. deck wins n summoner monsters 33.38 % 701 Talia Firestorm:6 Cerberus:8, Kobold Miner:10, Elemental Phoenix:4, Goblin Shaman:10, Fire Demon:6 31.88 % 69 Talia Firestorm:6 Cerberus:8, Kobold Miner:10, Goblin Shaman:10, Fire Demon:6, Elemental Phoenix:4 28.57 % 7 Talia Firestorm:6 Cerberus:8, Goblin Shaman:10, Kobold Miner:10, Elemental Phoenix:4, Fire Demon:6 22.22 % 9 Talia Firestorm:6 Cerberus:8, Goblin Shaman:10, Kobold Miner:10, Fire Demon:6, Elemental Phoenix:4 21.21 % 33 Talia Firestorm:6 Cerberus:8, Elemental Phoenix:4, Kobold Miner:10, Goblin Shaman:10, Fire Demon:6 14.29 % 7 Talia Firestorm:6 Cerberus:8, Kobold Miner:10, Goblin Shaman:10, Elemental Phoenix:4, Fire Demon:6 0.00 % 2 Talia Firestorm:6 Cerberus:8, Kobold Miner:10, Elemental Phoenix:4, Fire Demon:6, Goblin Shaman:10 0.00 % 2 Talia Firestorm:6 Cerberus:8, Elemental Phoenix:4, Goblin Shaman:10, Fire Demon:6, Kobold Miner:10 0.00 % 1 Talia Firestorm:6 Cerberus:8, Fire Demon:6, Kobold Miner:10, Elemental Phoenix:4, Goblin Shaman:10 2. deck wins n summoner monsters 57.89 % 19 Zintar Mortalis:1 Haunted Spirit:1, Screaming Banshee:1, Haunted Spider:1, Twisted Jester:1, Undead Priest:1 52.17 % 23 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Haunted Spider:1, Undead Priest:1, Screaming Banshee:1 50.00 % 2 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Haunted Spider:1, Screaming Banshee:1 50.00 % 10 Zintar Mortalis:1 Haunted Spirit:1, Screaming Banshee:1, Undead Priest:1, Haunted Spider:1, Twisted Jester:1 50.00 % 2 Zintar Mortalis:1 Undead Priest:1, Twisted Jester:1, Haunted Spirit:1, Haunted Spider:1, Screaming Banshee:1 48.00 % 25 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Haunted Spider:1, Screaming Banshee:1, Twisted Jester:1 41.30 % 46 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Screaming Banshee:1, Undead Priest:1, Twisted Jester:1 40.74 % 27 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Screaming Banshee:1, Haunted Spider:1 40.00 % 20 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Haunted Spider:1, Screaming Banshee:1 35.00 % 20 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Undead Priest:1, Screaming Banshee:1, Twisted Jester:1 28.00 % 25 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Haunted Spider:1, Twisted Jester:1, Screaming Banshee:1 27.85 % 79 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Screaming Banshee:1, Haunted Spider:1 27.78 % 18 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Screaming Banshee:1, Haunted Spider:1, Twisted Jester:1 26.88 % 160 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Haunted Spider:1, Screaming Banshee:1, Undead Priest:1 21.49 % 335 Zintar Mortalis:1 Screaming Banshee:1, Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Haunted Spider:1 20.00 % 5 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Twisted Jester:1, Screaming Banshee:1, Undead Priest:1 16.67 % 6 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Screaming Banshee:1, Twisted Jester:1, Haunted Spider:1 0.00 % 3 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Screaming Banshee:1, Twisted Jester:1, Undead Priest:1 0.00 % 1 Zintar Mortalis:1 Screaming Banshee:1, Haunted Spider:1, Twisted Jester:1, Haunted Spirit:1, Undead Priest:1 0.00 % 1 Zintar Mortalis:1 Haunted Spider:1, Twisted Jester:1, Haunted Spirit:1, Screaming Banshee:1, Undead Priest:1 0.00 % 1 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Twisted Jester:1, Undead Priest:1, Screaming Banshee:1 0.00 % 1 Zintar Mortalis:1 Haunted Spirit:1, Screaming Banshee:1, Twisted Jester:1, Undead Priest:1, Haunted Spider:1 0.00 % 1 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Screaming Banshee:1, Haunted Spider:1, Undead Priest:1 3. deck wins n summoner monsters 32.11 % 109 Selenia Sky:4 Naga Warrior:6, Medusa:8, Gold Dragon:4, Crustacean King:10 29.57 % 328 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Crustacean King:10, Medusa:8 22.06 % 136 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Medusa:8, Crustacean King:10 20.00 % 5 Selenia Sky:4 Naga Warrior:6, Crustacean King:10, Gold Dragon:4, Medusa:8 16.67 % 6 Selenia Sky:4 Naga Warrior:6, Crustacean King:10, Medusa:8, Gold Dragon:4 15.38 % 13 Selenia Sky:4 Naga Warrior:6, Medusa:8, Crustacean King:10, Gold Dragon:4 4. deck wins n summoner monsters 50.00 % 2 Selenia Sky:4 Naga Warrior:6, Medusa:8, Gold Dragon:4, Pirate Captain:10, Crustacean King:10 50.00 % 2 Selenia Sky:4 Naga Warrior:6, Medusa:8, Crustacean King:10, Pirate Captain:10, Gold Dragon:4 43.75 % 16 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Medusa:8, Pirate Captain:10, Crustacean King:10 40.00 % 5 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Crustacean King:10, Medusa:8, Pirate Captain:10 34.29 % 382 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Pirate Captain:10, Crustacean King:10, Medusa:8 27.14 % 70 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Crustacean King:10, Pirate Captain:10, Medusa:8 25.00 % 8 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Medusa:8, Crustacean King:10, Pirate Captain:10 20.00 % 5 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Pirate Captain:10, Medusa:8, Crustacean King:10 0.00 % 1 Selenia Sky:4 Naga Warrior:6, Crustacean King:10, Gold Dragon:4, Pirate Captain:10, Medusa:8 0.00 % 2 Selenia Sky:4 Naga Warrior:6, Pirate Captain:10, Gold Dragon:4, Crustacean King:10, Medusa:8 0.00 % 2 Selenia Sky:4 Naga Warrior:6, Medusa:8, Gold Dragon:4, Crustacean King:10, Pirate Captain:10 5. deck wins n summoner monsters 35.56 % 239 Zintar Mortalis:8 Haunted Spirit:8, Skeleton Assassin:10, Undead Priest:8, Twisted Jester:8 32.26 % 31 Zintar Mortalis:8 Haunted Spirit:8, Undead Priest:8, Skeleton Assassin:10, Twisted Jester:8 24.56 % 228 Zintar Mortalis:8 Haunted Spirit:8, Twisted Jester:8, Undead Priest:8, Skeleton Assassin:10 22.73 % 44 Zintar Mortalis:8 Haunted Spirit:8, Skeleton Assassin:10, Twisted Jester:8, Undead Priest:8 20.00 % 5 Zintar Mortalis:8 Haunted Spirit:8, Undead Priest:8, Twisted Jester:8, Skeleton Assassin:10 6. deck wins n summoner monsters 100.00 % 2 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Kobold Miner:10, Goblin Shaman:10, Fire Demon:6 44.00 % 25 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Goblin Shaman:10, Fire Beetle:10, Fire Demon:6 40.00 % 5 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6, Kobold Miner:10 38.00 % 50 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Goblin Shaman:10, Fire Demon:6, Fire Beetle:10 35.00 % 60 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Kobold Miner:10, Fire Demon:6, Goblin Shaman:10 30.06 % 163 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6 29.53 % 149 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Fire Demon:6, Goblin Shaman:10 25.00 % 4 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Goblin Shaman:10, Kobold Miner:10, Fire Demon:6 0.00 % 2 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Fire Demon:6, Fire Beetle:10, Goblin Shaman:10 0.00 % 4 Selenia Sky:4 Serpentine Soldier:8, Kobold Miner:10, Fire Demon:6, Goblin Shaman:10, Fire Beetle:10 0.00 % 1 Selenia Sky:4 Serpentine Soldier:8, Goblin Shaman:10, Fire Beetle:10, Fire Demon:6, Kobold Miner:10 7. deck wins n summoner monsters 100.00 % 1 Alric Stormbringer:8 Mischievous Mermaid:6, Sabre Shark:10, Crustacean King:10, Medusa:8 57.14 % 7 Alric Stormbringer:8 Mischievous Mermaid:6, Medusa:8, Sabre Shark:10, Crustacean King:10 42.86 % 7 Alric Stormbringer:8 Medusa:8, Mischievous Mermaid:6, Crustacean King:10, Sabre Shark:10 40.00 % 5 Alric Stormbringer:8 Sabre Shark:10, Mischievous Mermaid:6, Crustacean King:10, Medusa:8 34.05 % 232 Alric Stormbringer:8 Sabre Shark:10, Medusa:8, Mischievous Mermaid:6, Crustacean King:10 33.33 % 6 Alric Stormbringer:8 Sabre Shark:10, Crustacean King:10, Mischievous Mermaid:6, Medusa:8 33.33 % 3 Alric Stormbringer:8 Mischievous Mermaid:6, Medusa:8, Crustacean King:10, Sabre Shark:10 32.65 % 49 Alric Stormbringer:8 Medusa:8, Sabre Shark:10, Mischievous Mermaid:6, Crustacean King:10 31.37 % 51 Alric Stormbringer:8 Sabre Shark:10, Medusa:8, Crustacean King:10, Mischievous Mermaid:6 25.00 % 40 Alric Stormbringer:8 Sabre Shark:10, Mischievous Mermaid:6, Medusa:8, Crustacean King:10 0.00 % 1 Alric Stormbringer:8 Crustacean King:10, Medusa:8, Mischievous Mermaid:6, Sabre Shark:10 0.00 % 6 Alric Stormbringer:8 Mischievous Mermaid:6, Sabre Shark:10, Medusa:8, Crustacean King:10 0.00 % 1 Alric Stormbringer:8 Sabre Shark:10, Crustacean King:10, Medusa:8, Mischievous Mermaid:6 0.00 % 1 Alric Stormbringer:8 Medusa:8, Mischievous Mermaid:6, Sabre Shark:10, Crustacean King:10 0.00 % 1 Alric Stormbringer:8 Medusa:8, Sabre Shark:10, Crustacean King:10, Mischievous Mermaid:6 0.00 % 1 Alric Stormbringer:8 Medusa:8, Crustacean King:10, Mischievous Mermaid:6, Sabre Shark:10 8. deck wins n summoner monsters 39.39 % 33 Zintar Mortalis:1 Haunted Spirit:1, Skeleton Assassin:1, Twisted Jester:1, Undead Priest:1 38.24 % 34 Zintar Mortalis:1 Haunted Spirit:1, Skeleton Assassin:1, Undead Priest:1, Twisted Jester:1 31.82 % 22 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Skeleton Assassin:1, Undead Priest:1 28.57 % 21 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Skeleton Assassin:1, Twisted Jester:1 22.04 % 422 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Skeleton Assassin:1 0.00 % 2 Zintar Mortalis:1 Twisted Jester:1, Undead Priest:1, Haunted Spirit:1, Skeleton Assassin:1 9. deck wins n summoner monsters 24.90 % 490 Selenia Sky:4 Stone Golem:8, Swamp Thing:6, Spirit of the Forest:4 9.09 % 33 Selenia Sky:4 Stone Golem:8, Spirit of the Forest:4, Swamp Thing:6 10. deck wins n summoner monsters 49.06 % 53 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Haunted Spider:1, Twisted Jester:1 41.03 % 39 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Haunted Spider:1 38.98 % 59 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Undead Priest:1, Twisted Jester:1 36.67 % 30 Zintar Mortalis:1 Haunted Spirit:1, Haunted Spider:1, Twisted Jester:1, Undead Priest:1 35.71 % 56 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Haunted Spider:1 34.92 % 63 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Haunted Spider:1, Undead Priest:1 11. deck wins n summoner monsters 50.00 % 2 Selenia Sky:4 Haunted Spirit:8, Haunted Spider:10, Gold Dragon:4, Screaming Banshee:6, Undead Priest:8 40.00 % 10 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Screaming Banshee:6, Haunted Spider:10, Undead Priest:8 36.36 % 11 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10, Gold Dragon:4 33.33 % 3 Selenia Sky:4 Haunted Spirit:8, Haunted Spider:10, Undead Priest:8, Screaming Banshee:6, Gold Dragon:4 33.33 % 6 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Haunted Spider:10, Screaming Banshee:6, Undead Priest:8 32.27 % 313 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10 27.27 % 11 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Haunted Spider:10, Screaming Banshee:6, Gold Dragon:4 12.50 % 8 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Screaming Banshee:6, Undead Priest:8, Haunted Spider:10 0.00 % 2 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Undead Priest:8, Haunted Spider:10, Screaming Banshee:6 12. deck wins n summoner monsters 30.43 % 46 Selenia Sky:4 Serpentine Soldier:8, Goblin Shaman:10, Fire Beetle:10, Fire Demon:6 28.91 % 128 Selenia Sky:4 Serpentine Soldier:8, Goblin Shaman:10, Fire Demon:6, Fire Beetle:10 28.57 % 7 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Fire Demon:6, Goblin Shaman:10 26.88 % 186 Selenia Sky:4 Serpentine Soldier:8, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6 13. deck wins n summoner monsters 30.77 % 26 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Goblin Shaman:10, Fire Demon:6, Fire Beetle:10 30.07 % 296 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6 20.00 % 10 Malric Inferno:8 Serpentine Soldier:8, Fire Beetle:10, Kobold Miner:10, Fire Demon:6, Goblin Shaman:10 16.67 % 12 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Fire Demon:6, Goblin Shaman:10 0.00 % 2 Malric Inferno:8 Serpentine Soldier:8, Goblin Shaman:10, Kobold Miner:10, Fire Beetle:10, Fire Demon:6 0.00 % 2 Malric Inferno:8 Serpentine Soldier:8, Goblin Shaman:10, Fire Demon:6, Fire Beetle:10, Kobold Miner:10 0.00 % 1 Malric Inferno:8 Serpentine Soldier:8, Fire Beetle:10, Kobold Miner:10, Goblin Shaman:10, Fire Demon:6 0.00 % 2 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Fire Demon:6, Goblin Shaman:10, Fire Beetle:10 0.00 % 2 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Goblin Shaman:10, Fire Beetle:10, Fire Demon:6 0.00 % 3 Malric Inferno:8 Serpentine Soldier:8, Fire Beetle:10, Goblin Shaman:10, Fire Demon:6, Kobold Miner:10 14. deck wins n summoner monsters 50.00 % 18 Selenia Sky:4 Naga Warrior:6, Crustacean King:10, Pirate Captain:10, Sabre Shark:10 35.71 % 14 Selenia Sky:4 Naga Warrior:6, Crustacean King:10, Sabre Shark:10, Pirate Captain:10 30.84 % 227 Selenia Sky:4 Naga Warrior:6, Sabre Shark:10, Pirate Captain:10, Crustacean King:10 27.87 % 61 Selenia Sky:4 Naga Warrior:6, Sabre Shark:10, Crustacean King:10, Pirate Captain:10 0.00 % 3 Selenia Sky:4 Naga Warrior:6, Pirate Captain:10, Crustacean King:10, Sabre Shark:10 15. deck wins n summoner monsters 46.67 % 15 Alric Stormbringer:8 Naga Warrior:6, Sabre Shark:10, Crustacean King:10, Medusa:8 32.03 % 153 Alric Stormbringer:8 Naga Warrior:6, Medusa:8, Crustacean King:10, Sabre Shark:10 31.52 % 92 Alric Stormbringer:8 Naga Warrior:6, Medusa:8, Sabre Shark:10, Crustacean King:10 30.77 % 39 Alric Stormbringer:8 Naga Warrior:6, Sabre Shark:10, Medusa:8, Crustacean King:10 28.57 % 7 Alric Stormbringer:8 Naga Warrior:6, Crustacean King:10, Sabre Shark:10, Medusa:8 20.00 % 5 Alric Stormbringer:8 Sabre Shark:10, Naga Warrior:6, Medusa:8, Crustacean King:10 0.00 % 1 Alric Stormbringer:8 Medusa:8, Naga Warrior:6, Sabre Shark:10, Crustacean King:10 16. deck wins n summoner monsters 54.84 % 31 Alric Stormbringer:1 Spineback Turtle:1, Crustacean King:1, Mischievous Mermaid:1, Medusa:1 52.00 % 50 Alric Stormbringer:1 Spineback Turtle:1, Medusa:1, Crustacean King:1, Mischievous Mermaid:1 51.22 % 41 Alric Stormbringer:1 Spineback Turtle:1, Medusa:1, Mischievous Mermaid:1, Crustacean King:1 50.00 % 16 Alric Stormbringer:1 Crustacean King:1, Medusa:1, Mischievous Mermaid:1, Spineback Turtle:1 50.00 % 2 Alric Stormbringer:1 Spineback Turtle:1, Mischievous Mermaid:1, Crustacean King:1, Medusa:1 37.70 % 61 Alric Stormbringer:1 Spineback Turtle:1, Crustacean King:1, Medusa:1, Mischievous Mermaid:1 0.00 % 2 Alric Stormbringer:1 Spineback Turtle:1, Mischievous Mermaid:1, Medusa:1, Crustacean King:1 17. deck wins n summoner monsters 33.33 % 3 Selenia Sky:4 Haunted Spirit:8, Screaming Banshee:6, Gold Dragon:4, Undead Priest:8 26.52 % 328 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Gold Dragon:4 22.86 % 35 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Screaming Banshee:6, Undead Priest:8 0.00 % 1 Selenia Sky:4 Haunted Spirit:8, Screaming Banshee:6, Undead Priest:8, Gold Dragon:4 0.00 % 6 Selenia Sky:4 Haunted Spirit:8, Gold Dragon:4, Undead Priest:8, Screaming Banshee:6 0.00 % 4 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Gold Dragon:4, Screaming Banshee:6 18. deck wins n summoner monsters 100.00 % 1 Selenia Sky:4 Chromatic Dragon:4, Spirit of the Forest:4, Swamp Thing:6, Goblin Sorcerer:10, Earth Elemental:8 100.00 % 3 Selenia Sky:4 Chromatic Dragon:4, Earth Elemental:8, Goblin Sorcerer:10, Swamp Thing:6, Spirit of the Forest:4 57.14 % 7 Selenia Sky:4 Chromatic Dragon:4, Swamp Thing:6, Earth Elemental:8, Goblin Sorcerer:10, Spirit of the Forest:4 50.00 % 2 Selenia Sky:4 Chromatic Dragon:4, Earth Elemental:8, Goblin Sorcerer:10, Spirit of the Forest:4, Swamp Thing:6 38.46 % 221 Selenia Sky:4 Chromatic Dragon:4, Earth Elemental:8, Swamp Thing:6, Goblin Sorcerer:10, Spirit of the Forest:4 16.67 % 6 Selenia Sky:4 Chromatic Dragon:4, Swamp Thing:6, Goblin Sorcerer:10, Spirit of the Forest:4, Earth Elemental:8 0.00 % 1 Selenia Sky:4 Chromatic Dragon:4, Swamp Thing:6, Spirit of the Forest:4, Goblin Sorcerer:10, Earth Elemental:8 19. deck wins n summoner monsters 37.86 % 140 Alric Stormbringer:8 Naga Warrior:6, Mischievous Mermaid:6, Medusa:8, Crustacean King:10 25.00 % 4 Alric Stormbringer:8 Naga Warrior:6, Crustacean King:10, Mischievous Mermaid:6, Medusa:8 23.53 % 34 Alric Stormbringer:8 Naga Warrior:6, Medusa:8, Mischievous Mermaid:6, Crustacean King:10 22.88 % 118 Alric Stormbringer:8 Naga Warrior:6, Medusa:8, Crustacean King:10, Mischievous Mermaid:6 14.81 % 27 Alric Stormbringer:8 Naga Warrior:6, Mischievous Mermaid:6, Crustacean King:10, Medusa:8 0.00 % 5 Alric Stormbringer:8 Naga Warrior:6, Crustacean King:10, Medusa:8, Mischievous Mermaid:6 20. deck wins n summoner monsters 50.00 % 6 Lyanna Natura:8 Earth Elemental:8, Goblin Sorcerer:10, Swamp Thing:6, Spirit of the Forest:4 29.80 % 302 Lyanna Natura:8 Earth Elemental:8, Swamp Thing:6, Goblin Sorcerer:10, Spirit of the Forest:4 0.00 % 3 Lyanna Natura:8 Earth Elemental:8, Spirit of the Forest:4, Swamp Thing:6, Goblin Sorcerer:10 0.00 % 1 Lyanna Natura:8 Goblin Sorcerer:10, Earth Elemental:8, Swamp Thing:6, Spirit of the Forest:4 21. deck wins n summoner monsters 40.00 % 5 Malric Inferno:8 Serpentine Soldier:8, Fire Beetle:10, Kobold Miner:10, Fire Demon:6 40.00 % 5 Malric Inferno:8 Serpentine Soldier:8, Fire Beetle:10, Fire Demon:6, Kobold Miner:10 29.79 % 141 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Fire Beetle:10, Fire Demon:6 18.67 % 241 Malric Inferno:8 Serpentine Soldier:8, Kobold Miner:10, Fire Demon:6, Fire Beetle:10 22. deck wins n summoner monsters 50.00 % 4 Selenia Sky:4 Haunted Spirit:8, Screaming Banshee:6, Undead Priest:8, Haunted Spider:10, Twisted Jester:8 44.44 % 18 Selenia Sky:4 Haunted Spirit:8, Screaming Banshee:6, Undead Priest:8, Twisted Jester:8, Haunted Spider:10 33.96 % 53 Selenia Sky:4 Haunted Spirit:8, Twisted Jester:8, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10 33.33 % 3 Selenia Sky:4 Haunted Spirit:8, Haunted Spider:10, Screaming Banshee:6, Twisted Jester:8, Undead Priest:8 33.33 % 3 Selenia Sky:4 Haunted Spirit:8, Twisted Jester:8, Screaming Banshee:6, Haunted Spider:10, Undead Priest:8 30.95 % 42 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Haunted Spider:10, Twisted Jester:8 23.08 % 195 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Haunted Spider:10, Screaming Banshee:6, Twisted Jester:8 20.00 % 5 Selenia Sky:4 Haunted Spirit:8, Twisted Jester:8, Haunted Spider:10, Screaming Banshee:6, Undead Priest:8 0.00 % 1 Selenia Sky:4 Haunted Spirit:8, Haunted Spider:10, Undead Priest:8, Screaming Banshee:6, Twisted Jester:8 0.00 % 1 Selenia Sky:4 Haunted Spirit:8, Undead Priest:8, Screaming Banshee:6, Twisted Jester:8, Haunted Spider:10 23. deck wins n summoner monsters 50.00 % 4 Selenia Sky:4 Stone Golem:8, Spirit of the Forest:4, Goblin Sorcerer:10, Swamp Thing:6, Earth Elemental:8 26.11 % 157 Selenia Sky:4 Stone Golem:8, Earth Elemental:8, Goblin Sorcerer:10, Swamp Thing:6, Spirit of the Forest:4 25.14 % 179 Selenia Sky:4 Stone Golem:8, Earth Elemental:8, Swamp Thing:6, Goblin Sorcerer:10, Spirit of the Forest:4 20.00 % 5 Selenia Sky:4 Stone Golem:8, Spirit of the Forest:4, Swamp Thing:6, Goblin Sorcerer:10, Earth Elemental:8 0.00 % 1 Selenia Sky:4 Stone Golem:8, Earth Elemental:8, Swamp Thing:6, Spirit of the Forest:4, Goblin Sorcerer:10 0.00 % 1 Selenia Sky:4 Stone Golem:8, Earth Elemental:8, Goblin Sorcerer:10, Spirit of the Forest:4, Swamp Thing:6 24. deck wins n summoner monsters 47.00 % 100 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Screaming Banshee:1, Twisted Jester:1 33.93 % 56 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Screaming Banshee:1, Undead Priest:1 33.33 % 6 Zintar Mortalis:1 Haunted Spirit:1, Screaming Banshee:1, Undead Priest:1, Twisted Jester:1 29.41 % 51 Zintar Mortalis:1 Haunted Spirit:1, Undead Priest:1, Twisted Jester:1, Screaming Banshee:1 25.00 % 12 Zintar Mortalis:1 Haunted Spirit:1, Twisted Jester:1, Undead Priest:1, Screaming Banshee:1 25. deck wins n summoner monsters 45.45 % 22 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Water Elemental:8, Crustacean King:10 35.21 % 213 Selenia Sky:4 Naga Warrior:6, Gold Dragon:4, Crustacean King:10, Water Elemental:8 0.00 % 3 Selenia Sky:4 Naga Warrior:6, Water Elemental:8, Crustacean King:10, Gold Dragon:4 0.00 % 1 Selenia Sky:4 Naga Warrior:6, Water Elemental:8, Gold Dragon:4, Crustacean King:10 ConclusionThe results are showing that most players do not experiment with card order. The most played variant does not always have the best win ratio. Ordering the cards in a deck plays an important role. The most played deck is not always the best deck variant. This can be seen e.g. on deck 2. This page is synchronized from the post: ‘Which influence has the card order in a deck?’ document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/@holger80/which-influence-has-the-card-order-in-a-deck/"}],"tags":[{"name":"deutsch","slug":"deutsch","link":"/@holger80/tags/deutsch/"},{"name":"bitcoin","slug":"bitcoin","link":"/@holger80/tags/bitcoin/"},{"name":"cryptocurrency","slug":"cryptocurrency","link":"/@holger80/tags/cryptocurrency/"},{"name":"investing","slug":"investing","link":"/@holger80/tags/investing/"},{"name":"altcoin","slug":"altcoin","link":"/@holger80/tags/altcoin/"},{"name":"vericon","slug":"vericon","link":"/@holger80/tags/vericon/"},{"name":"verium","slug":"verium","link":"/@holger80/tags/verium/"},{"name":"verge","slug":"verge","link":"/@holger80/tags/verge/"},{"name":"blockchain","slug":"blockchain","link":"/@holger80/tags/blockchain/"},{"name":"faucet","slug":"faucet","link":"/@holger80/tags/faucet/"},{"name":"money","slug":"money","link":"/@holger80/tags/money/"},{"name":"cybersecurity","slug":"cybersecurity","link":"/@holger80/tags/cybersecurity/"},{"name":"meltdown","slug":"meltdown","link":"/@holger80/tags/meltdown/"},{"name":"spectre","slug":"spectre","link":"/@holger80/tags/spectre/"},{"name":"technology","slug":"technology","link":"/@holger80/tags/technology/"},{"name":"security","slug":"security","link":"/@holger80/tags/security/"},{"name":"safety","slug":"safety","link":"/@holger80/tags/safety/"},{"name":"intel","slug":"intel","link":"/@holger80/tags/intel/"},{"name":"ico","slug":"ico","link":"/@holger80/tags/ico/"},{"name":"pre-sale","slug":"pre-sale","link":"/@holger80/tags/pre-sale/"},{"name":"invest","slug":"invest","link":"/@holger80/tags/invest/"},{"name":"browser","slug":"browser","link":"/@holger80/tags/browser/"},{"name":"keylogger","slug":"keylogger","link":"/@holger80/tags/keylogger/"},{"name":"windows","slug":"windows","link":"/@holger80/tags/windows/"},{"name":"comodo","slug":"comodo","link":"/@holger80/tags/comodo/"},{"name":"steemit","slug":"steemit","link":"/@holger80/tags/steemit/"},{"name":"steem","slug":"steem","link":"/@holger80/tags/steem/"},{"name":"voting","slug":"voting","link":"/@holger80/tags/voting/"},{"name":"utopian-io","slug":"utopian-io","link":"/@holger80/tags/utopian-io/"},{"name":"steem-dev","slug":"steem-dev","link":"/@holger80/tags/steem-dev/"},{"name":"python","slug":"python","link":"/@holger80/tags/python/"},{"name":"tutorial","slug":"tutorial","link":"/@holger80/tags/tutorial/"},{"name":"sbd","slug":"sbd","link":"/@holger80/tags/sbd/"},{"name":"suggestion","slug":"suggestion","link":"/@holger80/tags/suggestion/"},{"name":"minnowsupport","slug":"minnowsupport","link":"/@holger80/tags/minnowsupport/"},{"name":"community","slug":"community","link":"/@holger80/tags/community/"},{"name":"register","slug":"register","link":"/@holger80/tags/register/"},{"name":"wallet","slug":"wallet","link":"/@holger80/tags/wallet/"},{"name":"erc20","slug":"erc20","link":"/@holger80/tags/erc20/"},{"name":"steemdev","slug":"steemdev","link":"/@holger80/tags/steemdev/"},{"name":"dev","slug":"dev","link":"/@holger80/tags/dev/"},{"name":"steemdata","slug":"steemdata","link":"/@holger80/tags/steemdata/"},{"name":"feed","slug":"feed","link":"/@holger80/tags/feed/"},{"name":"filter","slug":"filter","link":"/@holger80/tags/filter/"},{"name":"bubble","slug":"bubble","link":"/@holger80/tags/bubble/"},{"name":"rewards","slug":"rewards","link":"/@holger80/tags/rewards/"},{"name":"tools","slug":"tools","link":"/@holger80/tags/tools/"},{"name":"vote","slug":"vote","link":"/@holger80/tags/vote/"},{"name":"scrypt","slug":"scrypt","link":"/@holger80/tags/scrypt/"},{"name":"update","slug":"update","link":"/@holger80/tags/update/"},{"name":"feedme","slug":"feedme","link":"/@holger80/tags/feedme/"},{"name":"curation","slug":"curation","link":"/@holger80/tags/curation/"},{"name":"reward","slug":"reward","link":"/@holger80/tags/reward/"},{"name":"pip","slug":"pip","link":"/@holger80/tags/pip/"},{"name":"statistic","slug":"statistic","link":"/@holger80/tags/statistic/"},{"name":"stats","slug":"stats","link":"/@holger80/tags/stats/"},{"name":"review","slug":"review","link":"/@holger80/tags/review/"},{"name":"sola","slug":"sola","link":"/@holger80/tags/sola/"},{"name":"installation","slug":"installation","link":"/@holger80/tags/installation/"},{"name":"conda","slug":"conda","link":"/@holger80/tags/conda/"},{"name":"steem-python","slug":"steem-python","link":"/@holger80/tags/steem-python/"},{"name":"steempy","slug":"steempy","link":"/@holger80/tags/steempy/"},{"name":"password","slug":"password","link":"/@holger80/tags/password/"},{"name":"memo","slug":"memo","link":"/@holger80/tags/memo/"},{"name":"beem","slug":"beem","link":"/@holger80/tags/beem/"},{"name":"python-steem","slug":"python-steem","link":"/@holger80/tags/python-steem/"},{"name":"library","slug":"library","link":"/@holger80/tags/library/"},{"name":"appbase","slug":"appbase","link":"/@holger80/tags/appbase/"},{"name":"appics","slug":"appics","link":"/@holger80/tags/appics/"},{"name":"smt","slug":"smt","link":"/@holger80/tags/smt/"},{"name":"bounty","slug":"bounty","link":"/@holger80/tags/bounty/"},{"name":"zappl","slug":"zappl","link":"/@holger80/tags/zappl/"},{"name":"phishing","slug":"phishing","link":"/@holger80/tags/phishing/"},{"name":"metacert","slug":"metacert","link":"/@holger80/tags/metacert/"},{"name":"cryptonite","slug":"cryptonite","link":"/@holger80/tags/cryptonite/"},{"name":"protection","slug":"protection","link":"/@holger80/tags/protection/"},{"name":"extension","slug":"extension","link":"/@holger80/tags/extension/"},{"name":"full-node","slug":"full-node","link":"/@holger80/tags/full-node/"},{"name":"logo","slug":"logo","link":"/@holger80/tags/logo/"},{"name":"request","slug":"request","link":"/@holger80/tags/request/"},{"name":"markdown","slug":"markdown","link":"/@holger80/tags/markdown/"},{"name":"json","slug":"json","link":"/@holger80/tags/json/"},{"name":"basicincome","slug":"basicincome","link":"/@holger80/tags/basicincome/"},{"name":"swift","slug":"swift","link":"/@holger80/tags/swift/"},{"name":"crypto","slug":"crypto","link":"/@holger80/tags/crypto/"},{"name":"ubi","slug":"ubi","link":"/@holger80/tags/ubi/"},{"name":"witness","slug":"witness","link":"/@holger80/tags/witness/"},{"name":"rating","slug":"rating","link":"/@holger80/tags/rating/"},{"name":"score","slug":"score","link":"/@holger80/tags/score/"},{"name":"beempy","slug":"beempy","link":"/@holger80/tags/beempy/"},{"name":"bug","slug":"bug","link":"/@holger80/tags/bug/"},{"name":"solution","slug":"solution","link":"/@holger80/tags/solution/"},{"name":"mytherwallet","slug":"mytherwallet","link":"/@holger80/tags/mytherwallet/"},{"name":"savedroid","slug":"savedroid","link":"/@holger80/tags/savedroid/"},{"name":"hack","slug":"hack","link":"/@holger80/tags/hack/"},{"name":"pr","slug":"pr","link":"/@holger80/tags/pr/"},{"name":"full-nodes","slug":"full-nodes","link":"/@holger80/tags/full-nodes/"},{"name":"witness-category","slug":"witness-category","link":"/@holger80/tags/witness-category/"},{"name":"warning","slug":"warning","link":"/@holger80/tags/warning/"},{"name":"steemconnect","slug":"steemconnect","link":"/@holger80/tags/steemconnect/"},{"name":"bug-hunting","slug":"bug-hunting","link":"/@holger80/tags/bug-hunting/"},{"name":"busy","slug":"busy","link":"/@holger80/tags/busy/"},{"name":"development","slug":"development","link":"/@holger80/tags/development/"},{"name":"curator-friendly","slug":"curator-friendly","link":"/@holger80/tags/curator-friendly/"},{"name":"nobidbot","slug":"nobidbot","link":"/@holger80/tags/nobidbot/"},{"name":"dapp","slug":"dapp","link":"/@holger80/tags/dapp/"},{"name":"programming","slug":"programming","link":"/@holger80/tags/programming/"},{"name":"learning","slug":"learning","link":"/@holger80/tags/learning/"},{"name":"coding","slug":"coding","link":"/@holger80/tags/coding/"},{"name":"etherium","slug":"etherium","link":"/@holger80/tags/etherium/"},{"name":"release","slug":"release","link":"/@holger80/tags/release/"},{"name":"gdpr","slug":"gdpr","link":"/@holger80/tags/gdpr/"},{"name":"privacy","slug":"privacy","link":"/@holger80/tags/privacy/"},{"name":"hardfork","slug":"hardfork","link":"/@holger80/tags/hardfork/"},{"name":"hf20","slug":"hf20","link":"/@holger80/tags/hf20/"},{"name":"task-bug-hunting","slug":"task-bug-hunting","link":"/@holger80/tags/task-bug-hunting/"},{"name":"seed-node","slug":"seed-node","link":"/@holger80/tags/seed-node/"},{"name":"witness-server","slug":"witness-server","link":"/@holger80/tags/witness-server/"},{"name":"bandwidth","slug":"bandwidth","link":"/@holger80/tags/bandwidth/"},{"name":"comedyopenmic","slug":"comedyopenmic","link":"/@holger80/tags/comedyopenmic/"},{"name":"funny","slug":"funny","link":"/@holger80/tags/funny/"},{"name":"humor","slug":"humor","link":"/@holger80/tags/humor/"},{"name":"comedy","slug":"comedy","link":"/@holger80/tags/comedy/"},{"name":"meme","slug":"meme","link":"/@holger80/tags/meme/"},{"name":"steemhive","slug":"steemhive","link":"/@holger80/tags/steemhive/"},{"name":"blocktradesworldcup","slug":"blocktradesworldcup","link":"/@holger80/tags/blocktradesworldcup/"},{"name":"mypicks","slug":"mypicks","link":"/@holger80/tags/mypicks/"},{"name":"witness-update","slug":"witness-update","link":"/@holger80/tags/witness-update/"},{"name":"pricefeed","slug":"pricefeed","link":"/@holger80/tags/pricefeed/"},{"name":"contest","slug":"contest","link":"/@holger80/tags/contest/"},{"name":"reputation","slug":"reputation","link":"/@holger80/tags/reputation/"},{"name":"league","slug":"league","link":"/@holger80/tags/league/"},{"name":"fullnode","slug":"fullnode","link":"/@holger80/tags/fullnode/"},{"name":"benchmark","slug":"benchmark","link":"/@holger80/tags/benchmark/"},{"name":"follow","slug":"follow","link":"/@holger80/tags/follow/"},{"name":"unfollow","slug":"unfollow","link":"/@holger80/tags/unfollow/"},{"name":"conveyor","slug":"conveyor","link":"/@holger80/tags/conveyor/"},{"name":"systemctl","slug":"systemctl","link":"/@holger80/tags/systemctl/"},{"name":"follower","slug":"follower","link":"/@holger80/tags/follower/"},{"name":"statistics","slug":"statistics","link":"/@holger80/tags/statistics/"},{"name":"report","slug":"report","link":"/@holger80/tags/report/"},{"name":"steemmonsters","slug":"steemmonsters","link":"/@holger80/tags/steemmonsters/"},{"name":"combinations","slug":"combinations","link":"/@holger80/tags/combinations/"},{"name":"rc","slug":"rc","link":"/@holger80/tags/rc/"},{"name":"resources","slug":"resources","link":"/@holger80/tags/resources/"},{"name":"testnet","slug":"testnet","link":"/@holger80/tags/testnet/"},{"name":"battle","slug":"battle","link":"/@holger80/tags/battle/"},{"name":"decks","slug":"decks","link":"/@holger80/tags/decks/"},{"name":"cards","slug":"cards","link":"/@holger80/tags/cards/"},{"name":"deck","slug":"deck","link":"/@holger80/tags/deck/"},{"name":"steemtank","slug":"steemtank","link":"/@holger80/tags/steemtank/"},{"name":"rewarding","slug":"rewarding","link":"/@holger80/tags/rewarding/"},{"name":"bug-fix","slug":"bug-fix","link":"/@holger80/tags/bug-fix/"},{"name":"test","slug":"test","link":"/@holger80/tags/test/"},{"name":"business","slug":"business","link":"/@holger80/tags/business/"},{"name":"steemde","slug":"steemde","link":"/@holger80/tags/steemde/"},{"name":"steemtools","slug":"steemtools","link":"/@holger80/tags/steemtools/"},{"name":"analysis","slug":"analysis","link":"/@holger80/tags/analysis/"},{"name":"splinter","slug":"splinter","link":"/@holger80/tags/splinter/"},{"name":"witnesssurvey","slug":"witnesssurvey","link":"/@holger80/tags/witnesssurvey/"},{"name":"witnessupdate","slug":"witnessupdate","link":"/@holger80/tags/witnessupdate/"},{"name":"steemmonsteres","slug":"steemmonsteres","link":"/@holger80/tags/steemmonsteres/"},{"name":"steembasicincome","slug":"steembasicincome","link":"/@holger80/tags/steembasicincome/"},{"name":"steemhistory","slug":"steemhistory","link":"/@holger80/tags/steemhistory/"},{"name":"challenges","slug":"challenges","link":"/@holger80/tags/challenges/"},{"name":"challonge","slug":"challonge","link":"/@holger80/tags/challonge/"},{"name":"tournament","slug":"tournament","link":"/@holger80/tags/tournament/"},{"name":"multisignature","slug":"multisignature","link":"/@holger80/tags/multisignature/"},{"name":"ranking","slug":"ranking","link":"/@holger80/tags/ranking/"},{"name":"challanges","slug":"challanges","link":"/@holger80/tags/challanges/"},{"name":"performance","slug":"performance","link":"/@holger80/tags/performance/"},{"name":"automation","slug":"automation","link":"/@holger80/tags/automation/"},{"name":"stopthepowerdown","slug":"stopthepowerdown","link":"/@holger80/tags/stopthepowerdown/"},{"name":"autovoter","slug":"autovoter","link":"/@holger80/tags/autovoter/"},{"name":"autovote","slug":"autovote","link":"/@holger80/tags/autovote/"},{"name":"trail","slug":"trail","link":"/@holger80/tags/trail/"},{"name":"transfer","slug":"transfer","link":"/@holger80/tags/transfer/"},{"name":"wordcloud","slug":"wordcloud","link":"/@holger80/tags/wordcloud/"},{"name":"medium","slug":"medium","link":"/@holger80/tags/medium/"},{"name":"bookkeeping","slug":"bookkeeping","link":"/@holger80/tags/bookkeeping/"},{"name":"drugwars","slug":"drugwars","link":"/@holger80/tags/drugwars/"},{"name":"steem-engine","slug":"steem-engine","link":"/@holger80/tags/steem-engine/"},{"name":"token","slug":"token","link":"/@holger80/tags/token/"},{"name":"steem-promo","slug":"steem-promo","link":"/@holger80/tags/steem-promo/"},{"name":"everipedia","slug":"everipedia","link":"/@holger80/tags/everipedia/"},{"name":"wikipedia","slug":"wikipedia","link":"/@holger80/tags/wikipedia/"},{"name":"scot","slug":"scot","link":"/@holger80/tags/scot/"},{"name":"steemdesktop","slug":"steemdesktop","link":"/@holger80/tags/steemdesktop/"},{"name":"bsuy","slug":"bsuy","link":"/@holger80/tags/bsuy/"},{"name":"amount","slug":"amount","link":"/@holger80/tags/amount/"},{"name":"nextcolony","slug":"nextcolony","link":"/@holger80/tags/nextcolony/"},{"name":"game","slug":"game","link":"/@holger80/tags/game/"},{"name":"logger","slug":"logger","link":"/@holger80/tags/logger/"},{"name":"spud","slug":"spud","link":"/@holger80/tags/spud/"},{"name":"gaming","slug":"gaming","link":"/@holger80/tags/gaming/"},{"name":"free-snaxaccount","slug":"free-snaxaccount","link":"/@holger80/tags/free-snaxaccount/"},{"name":"snax","slug":"snax","link":"/@holger80/tags/snax/"},{"name":"api","slug":"api","link":"/@holger80/tags/api/"},{"name":"snaxbountyprogram","slug":"snaxbountyprogram","link":"/@holger80/tags/snaxbountyprogram/"},{"name":"blog","slug":"blog","link":"/@holger80/tags/blog/"},{"name":"hexo","slug":"hexo","link":"/@holger80/tags/hexo/"},{"name":"sct","slug":"sct","link":"/@holger80/tags/sct/"},{"name":"mining","slug":"mining","link":"/@holger80/tags/mining/"},{"name":"palnet","slug":"palnet","link":"/@holger80/tags/palnet/"},{"name":"scotbot","slug":"scotbot","link":"/@holger80/tags/scotbot/"},{"name":"pool","slug":"pool","link":"/@holger80/tags/pool/"},{"name":"weedcash","slug":"weedcash","link":"/@holger80/tags/weedcash/"},{"name":"beta","slug":"beta","link":"/@holger80/tags/beta/"},{"name":"spt","slug":"spt","link":"/@holger80/tags/spt/"}],"categories":[{"name":"deutsch","slug":"deutsch","link":"/@holger80/categories/deutsch/"},{"name":"cryptocurrency","slug":"cryptocurrency","link":"/@holger80/categories/cryptocurrency/"},{"name":"verge","slug":"verge","link":"/@holger80/categories/verge/"},{"name":"faucet","slug":"faucet","link":"/@holger80/categories/faucet/"},{"name":"cybersecurity","slug":"cybersecurity","link":"/@holger80/categories/cybersecurity/"},{"name":"security","slug":"security","link":"/@holger80/categories/security/"},{"name":"steemit","slug":"steemit","link":"/@holger80/categories/steemit/"},{"name":"utopian-io","slug":"utopian-io","link":"/@holger80/categories/utopian-io/"},{"name":"steemdev","slug":"steemdev","link":"/@holger80/categories/steemdev/"},{"name":"steem","slug":"steem","link":"/@holger80/categories/steem/"},{"name":"steemdata","slug":"steemdata","link":"/@holger80/categories/steemdata/"},{"name":"review","slug":"review","link":"/@holger80/categories/review/"},{"name":"appbase","slug":"appbase","link":"/@holger80/categories/appbase/"},{"name":"appics","slug":"appics","link":"/@holger80/categories/appics/"},{"name":"zappl","slug":"zappl","link":"/@holger80/categories/zappl/"},{"name":"phishing","slug":"phishing","link":"/@holger80/categories/phishing/"},{"name":"full-node","slug":"full-node","link":"/@holger80/categories/full-node/"},{"name":"basicincome","slug":"basicincome","link":"/@holger80/categories/basicincome/"},{"name":"python","slug":"python","link":"/@holger80/categories/python/"},{"name":"metacert","slug":"metacert","link":"/@holger80/categories/metacert/"},{"name":"ico","slug":"ico","link":"/@holger80/categories/ico/"},{"name":"curator-friendly","slug":"curator-friendly","link":"/@holger80/categories/curator-friendly/"},{"name":"dapp","slug":"dapp","link":"/@holger80/categories/dapp/"},{"name":"witness-category","slug":"witness-category","link":"/@holger80/categories/witness-category/"},{"name":"witness","slug":"witness","link":"/@holger80/categories/witness/"},{"name":"bandwidth","slug":"bandwidth","link":"/@holger80/categories/bandwidth/"},{"name":"comedyopenmic","slug":"comedyopenmic","link":"/@holger80/categories/comedyopenmic/"},{"name":"community","slug":"community","link":"/@holger80/categories/community/"},{"name":"blocktradesworldcup","slug":"blocktradesworldcup","link":"/@holger80/categories/blocktradesworldcup/"},{"name":"curation","slug":"curation","link":"/@holger80/categories/curation/"},{"name":"tutorial","slug":"tutorial","link":"/@holger80/categories/tutorial/"},{"name":"beem","slug":"beem","link":"/@holger80/categories/beem/"},{"name":"follower","slug":"follower","link":"/@holger80/categories/follower/"},{"name":"witness-update","slug":"witness-update","link":"/@holger80/categories/witness-update/"},{"name":"fullnode","slug":"fullnode","link":"/@holger80/categories/fullnode/"},{"name":"steemmonsters","slug":"steemmonsters","link":"/@holger80/categories/steemmonsters/"},{"name":"beempy","slug":"beempy","link":"/@holger80/categories/beempy/"},{"name":"steemtank","slug":"steemtank","link":"/@holger80/categories/steemtank/"},{"name":"minnowsupport","slug":"minnowsupport","link":"/@holger80/categories/minnowsupport/"},{"name":"test","slug":"test","link":"/@holger80/categories/test/"},{"name":"contest","slug":"contest","link":"/@holger80/categories/contest/"},{"name":"witnesssurvey","slug":"witnesssurvey","link":"/@holger80/categories/witnesssurvey/"},{"name":"steemmonsteres","slug":"steemmonsteres","link":"/@holger80/categories/steemmonsteres/"},{"name":"rewarding","slug":"rewarding","link":"/@holger80/categories/rewarding/"},{"name":"scrypt","slug":"scrypt","link":"/@holger80/categories/scrypt/"},{"name":"medium","slug":"medium","link":"/@holger80/categories/medium/"},{"name":"bookkeeping","slug":"bookkeeping","link":"/@holger80/categories/bookkeeping/"},{"name":"steem-engine","slug":"steem-engine","link":"/@holger80/categories/steem-engine/"},{"name":"testnet","slug":"testnet","link":"/@holger80/categories/testnet/"},{"name":"nextcolony","slug":"nextcolony","link":"/@holger80/categories/nextcolony/"},{"name":"free-snaxaccount","slug":"free-snaxaccount","link":"/@holger80/categories/free-snaxaccount/"},{"name":"sct","slug":"sct","link":"/@holger80/categories/sct/"},{"name":"scot","slug":"scot","link":"/@holger80/categories/scot/"},{"name":"palnet","slug":"palnet","link":"/@holger80/categories/palnet/"},{"name":"scotbot","slug":"scotbot","link":"/@holger80/categories/scotbot/"},{"name":"steemconnect","slug":"steemconnect","link":"/@holger80/categories/steemconnect/"}]}